/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/duplexer2";
exports.ids = ["vendor-chunks/duplexer2"];
exports.modules = {

/***/ "(ssr)/./node_modules/duplexer2/index.js":
/*!*****************************************!*\
  !*** ./node_modules/duplexer2/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar stream = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/readable.js\");\nfunction DuplexWrapper(options, writable, readable) {\n    if (typeof readable === \"undefined\") {\n        readable = writable;\n        writable = options;\n        options = null;\n    }\n    stream.Duplex.call(this, options);\n    if (typeof readable.read !== \"function\") {\n        readable = new stream.Readable(options).wrap(readable);\n    }\n    this._writable = writable;\n    this._readable = readable;\n    this._waiting = false;\n    var self = this;\n    writable.once(\"finish\", function() {\n        self.end();\n    });\n    this.once(\"finish\", function() {\n        writable.end();\n    });\n    readable.on(\"readable\", function() {\n        if (self._waiting) {\n            self._waiting = false;\n            self._read();\n        }\n    });\n    readable.once(\"end\", function() {\n        self.push(null);\n    });\n    if (!options || typeof options.bubbleErrors === \"undefined\" || options.bubbleErrors) {\n        writable.on(\"error\", function(err) {\n            self.emit(\"error\", err);\n        });\n        readable.on(\"error\", function(err) {\n            self.emit(\"error\", err);\n        });\n    }\n}\nDuplexWrapper.prototype = Object.create(stream.Duplex.prototype, {\n    constructor: {\n        value: DuplexWrapper\n    }\n});\nDuplexWrapper.prototype._write = function _write(input, encoding, done) {\n    this._writable.write(input, encoding, done);\n};\nDuplexWrapper.prototype._read = function _read() {\n    var buf;\n    var reads = 0;\n    while((buf = this._readable.read()) !== null){\n        this.push(buf);\n        reads++;\n    }\n    if (reads === 0) {\n        this._waiting = true;\n    }\n};\nmodule.exports = function duplex2(options, writable, readable) {\n    return new DuplexWrapper(options, writable, readable);\n};\nmodule.exports.DuplexWrapper = DuplexWrapper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHVwbGV4ZXIyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUMsZ0dBQWlCO0FBRXRDLFNBQVNDLGNBQWNDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxRQUFRO0lBQ2hELElBQUksT0FBT0EsYUFBYSxhQUFhO1FBQ25DQSxXQUFXRDtRQUNYQSxXQUFXRDtRQUNYQSxVQUFVO0lBQ1o7SUFFQUgsT0FBT00sTUFBTSxDQUFDQyxJQUFJLENBQUMsSUFBSSxFQUFFSjtJQUV6QixJQUFJLE9BQU9FLFNBQVNHLElBQUksS0FBSyxZQUFZO1FBQ3ZDSCxXQUFXLElBQUtMLE9BQU9TLFFBQVEsQ0FBQ04sU0FBVU8sSUFBSSxDQUFDTDtJQUNqRDtJQUVBLElBQUksQ0FBQ00sU0FBUyxHQUFHUDtJQUNqQixJQUFJLENBQUNRLFNBQVMsR0FBR1A7SUFDakIsSUFBSSxDQUFDUSxRQUFRLEdBQUc7SUFFaEIsSUFBSUMsT0FBTyxJQUFJO0lBRWZWLFNBQVNXLElBQUksQ0FBQyxVQUFVO1FBQ3RCRCxLQUFLRSxHQUFHO0lBQ1Y7SUFFQSxJQUFJLENBQUNELElBQUksQ0FBQyxVQUFVO1FBQ2xCWCxTQUFTWSxHQUFHO0lBQ2Q7SUFFQVgsU0FBU1ksRUFBRSxDQUFDLFlBQVk7UUFDdEIsSUFBSUgsS0FBS0QsUUFBUSxFQUFFO1lBQ2pCQyxLQUFLRCxRQUFRLEdBQUc7WUFDaEJDLEtBQUtJLEtBQUs7UUFDWjtJQUNGO0lBRUFiLFNBQVNVLElBQUksQ0FBQyxPQUFPO1FBQ25CRCxLQUFLSyxJQUFJLENBQUM7SUFDWjtJQUVBLElBQUksQ0FBQ2hCLFdBQVcsT0FBT0EsUUFBUWlCLFlBQVksS0FBSyxlQUFlakIsUUFBUWlCLFlBQVksRUFBRTtRQUNuRmhCLFNBQVNhLEVBQUUsQ0FBQyxTQUFTLFNBQVNJLEdBQUc7WUFDL0JQLEtBQUtRLElBQUksQ0FBQyxTQUFTRDtRQUNyQjtRQUVBaEIsU0FBU1ksRUFBRSxDQUFDLFNBQVMsU0FBU0ksR0FBRztZQUMvQlAsS0FBS1EsSUFBSSxDQUFDLFNBQVNEO1FBQ3JCO0lBQ0Y7QUFDRjtBQUVBbkIsY0FBY3FCLFNBQVMsR0FBR0MsT0FBT0MsTUFBTSxDQUFDekIsT0FBT00sTUFBTSxDQUFDaUIsU0FBUyxFQUFFO0lBQUNHLGFBQWE7UUFBQ0MsT0FBT3pCO0lBQWE7QUFBQztBQUVyR0EsY0FBY3FCLFNBQVMsQ0FBQ0ssTUFBTSxHQUFHLFNBQVNBLE9BQU9DLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxJQUFJO0lBQ3BFLElBQUksQ0FBQ3BCLFNBQVMsQ0FBQ3FCLEtBQUssQ0FBQ0gsT0FBT0MsVUFBVUM7QUFDeEM7QUFFQTdCLGNBQWNxQixTQUFTLENBQUNMLEtBQUssR0FBRyxTQUFTQTtJQUN2QyxJQUFJZTtJQUNKLElBQUlDLFFBQVE7SUFDWixNQUFPLENBQUNELE1BQU0sSUFBSSxDQUFDckIsU0FBUyxDQUFDSixJQUFJLEVBQUMsTUFBTyxLQUFNO1FBQzdDLElBQUksQ0FBQ1csSUFBSSxDQUFDYztRQUNWQztJQUNGO0lBQ0EsSUFBSUEsVUFBVSxHQUFHO1FBQ2YsSUFBSSxDQUFDckIsUUFBUSxHQUFHO0lBQ2xCO0FBQ0Y7QUFFQXNCLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxRQUFRbEMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFFBQVE7SUFDM0QsT0FBTyxJQUFJSCxjQUFjQyxTQUFTQyxVQUFVQztBQUM5QztBQUVBOEIsNEJBQTRCLEdBQUdqQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NkLXRpbWVzaGVldC1hbmFseXplci8uL25vZGVfbW9kdWxlcy9kdXBsZXhlcjIvaW5kZXguanM/ODlhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0cmVhbSA9IHJlcXVpcmUoXCJyZWFkYWJsZS1zdHJlYW1cIik7XG5cbmZ1bmN0aW9uIER1cGxleFdyYXBwZXIob3B0aW9ucywgd3JpdGFibGUsIHJlYWRhYmxlKSB7XG4gIGlmICh0eXBlb2YgcmVhZGFibGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZWFkYWJsZSA9IHdyaXRhYmxlO1xuICAgIHdyaXRhYmxlID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuXG4gIHN0cmVhbS5EdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBpZiAodHlwZW9mIHJlYWRhYmxlLnJlYWQgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJlYWRhYmxlID0gKG5ldyBzdHJlYW0uUmVhZGFibGUob3B0aW9ucykpLndyYXAocmVhZGFibGUpO1xuICB9XG5cbiAgdGhpcy5fd3JpdGFibGUgPSB3cml0YWJsZTtcbiAgdGhpcy5fcmVhZGFibGUgPSByZWFkYWJsZTtcbiAgdGhpcy5fd2FpdGluZyA9IGZhbHNlO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICB3cml0YWJsZS5vbmNlKFwiZmluaXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuZW5kKCk7XG4gIH0pO1xuXG4gIHRoaXMub25jZShcImZpbmlzaFwiLCBmdW5jdGlvbigpIHtcbiAgICB3cml0YWJsZS5lbmQoKTtcbiAgfSk7XG5cbiAgcmVhZGFibGUub24oXCJyZWFkYWJsZVwiLCBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi5fd2FpdGluZykge1xuICAgICAgc2VsZi5fd2FpdGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5fcmVhZCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmVhZGFibGUub25jZShcImVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucy5idWJibGVFcnJvcnMgPT09IFwidW5kZWZpbmVkXCIgfHwgb3B0aW9ucy5idWJibGVFcnJvcnMpIHtcbiAgICB3cml0YWJsZS5vbihcImVycm9yXCIsIGZ1bmN0aW9uKGVycikge1xuICAgICAgc2VsZi5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgICB9KTtcblxuICAgIHJlYWRhYmxlLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBzZWxmLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgIH0pO1xuICB9XG59XG5cbkR1cGxleFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdHJlYW0uRHVwbGV4LnByb3RvdHlwZSwge2NvbnN0cnVjdG9yOiB7dmFsdWU6IER1cGxleFdyYXBwZXJ9fSk7XG5cbkR1cGxleFdyYXBwZXIucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZShpbnB1dCwgZW5jb2RpbmcsIGRvbmUpIHtcbiAgdGhpcy5fd3JpdGFibGUud3JpdGUoaW5wdXQsIGVuY29kaW5nLCBkb25lKTtcbn07XG5cbkR1cGxleFdyYXBwZXIucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gX3JlYWQoKSB7XG4gIHZhciBidWY7XG4gIHZhciByZWFkcyA9IDA7XG4gIHdoaWxlICgoYnVmID0gdGhpcy5fcmVhZGFibGUucmVhZCgpKSAhPT0gbnVsbCkge1xuICAgIHRoaXMucHVzaChidWYpO1xuICAgIHJlYWRzKys7XG4gIH1cbiAgaWYgKHJlYWRzID09PSAwKSB7XG4gICAgdGhpcy5fd2FpdGluZyA9IHRydWU7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZHVwbGV4MihvcHRpb25zLCB3cml0YWJsZSwgcmVhZGFibGUpIHtcbiAgcmV0dXJuIG5ldyBEdXBsZXhXcmFwcGVyKG9wdGlvbnMsIHdyaXRhYmxlLCByZWFkYWJsZSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5EdXBsZXhXcmFwcGVyID0gRHVwbGV4V3JhcHBlcjtcbiJdLCJuYW1lcyI6WyJzdHJlYW0iLCJyZXF1aXJlIiwiRHVwbGV4V3JhcHBlciIsIm9wdGlvbnMiLCJ3cml0YWJsZSIsInJlYWRhYmxlIiwiRHVwbGV4IiwiY2FsbCIsInJlYWQiLCJSZWFkYWJsZSIsIndyYXAiLCJfd3JpdGFibGUiLCJfcmVhZGFibGUiLCJfd2FpdGluZyIsInNlbGYiLCJvbmNlIiwiZW5kIiwib24iLCJfcmVhZCIsInB1c2giLCJidWJibGVFcnJvcnMiLCJlcnIiLCJlbWl0IiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsIl93cml0ZSIsImlucHV0IiwiZW5jb2RpbmciLCJkb25lIiwid3JpdGUiLCJidWYiLCJyZWFkcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJkdXBsZXgyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/duplexer2/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/duplexer2/node_modules/isarray/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/duplexer2/node_modules/isarray/index.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("var toString = {}.toString;\nmodule.exports = Array.isArray || function(arr) {\n    return toString.call(arr) == \"[object Array]\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZC10aW1lc2hlZXQtYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvZHVwbGV4ZXIyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzPzY2ODciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iXSwibmFtZXMiOlsidG9TdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJyIiwiY2FsbCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsV0FBVyxDQUFDLEVBQUVBLFFBQVE7QUFFMUJDLE9BQU9DLE9BQU8sR0FBR0MsTUFBTUMsT0FBTyxJQUFJLFNBQVVDLEdBQUc7SUFDN0MsT0FBT0wsU0FBU00sSUFBSSxDQUFDRCxRQUFRO0FBQy9CIiwiZmlsZSI6Iihzc3IpLy4vbm9kZV9tb2R1bGVzL2R1cGxleGVyMi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/duplexer2/node_modules/isarray/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_duplex.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_duplex.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n/*<replacement>*/ var pna = __webpack_require__(/*! process-nextick-args */ \"(ssr)/./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/ /*<replacement>*/ var objectKeys = Object.keys || function(obj) {\n    var keys = [];\n    for(var key in obj){\n        keys.push(key);\n    }\n    return keys;\n};\n/*</replacement>*/ module.exports = Duplex;\n/*<replacement>*/ var util = Object.create(__webpack_require__(/*! core-util-is */ \"(ssr)/./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\n/*</replacement>*/ var Readable = __webpack_require__(/*! ./_stream_readable */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_readable.js\");\nvar Writable = __webpack_require__(/*! ./_stream_writable */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_writable.js\");\nutil.inherits(Duplex, Readable);\n{\n    // avoid scope creep, the keys array can then be collected\n    var keys = objectKeys(Writable.prototype);\n    for(var v = 0; v < keys.length; v++){\n        var method = keys[v];\n        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n    }\n}function Duplex(options) {\n    if (!(this instanceof Duplex)) return new Duplex(options);\n    Readable.call(this, options);\n    Writable.call(this, options);\n    if (options && options.readable === false) this.readable = false;\n    if (options && options.writable === false) this.writable = false;\n    this.allowHalfOpen = true;\n    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n    this.once(\"end\", onend);\n}\nObject.defineProperty(Duplex.prototype, \"writableHighWaterMark\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function() {\n        return this._writableState.highWaterMark;\n    }\n});\n// the no-half-open enforcer\nfunction onend() {\n    // if we allow half-open state, or if the writable side ended,\n    // then we're ok.\n    if (this.allowHalfOpen || this._writableState.ended) return;\n    // no more data can be written.\n    // But allow more writes to happen in this tick.\n    pna.nextTick(onEndNT, this);\n}\nfunction onEndNT(self) {\n    self.end();\n}\nObject.defineProperty(Duplex.prototype, \"destroyed\", {\n    get: function() {\n        if (this._readableState === undefined || this._writableState === undefined) {\n            return false;\n        }\n        return this._readableState.destroyed && this._writableState.destroyed;\n    },\n    set: function(value) {\n        // we ignore the value if the stream\n        // has not been initialized yet\n        if (this._readableState === undefined || this._writableState === undefined) {\n            return;\n        }\n        // backward compatibility, the user is explicitly\n        // managing destroyed\n        this._readableState.destroyed = value;\n        this._writableState.destroyed = value;\n    }\n});\nDuplex.prototype._destroy = function(err, cb) {\n    this.push(null);\n    this.end();\n    pna.nextTick(cb, err);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_duplex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_passthrough.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\nmodule.exports = PassThrough;\nvar Transform = __webpack_require__(/*! ./_stream_transform */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_transform.js\");\n/*<replacement>*/ var util = Object.create(__webpack_require__(/*! core-util-is */ \"(ssr)/./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\n/*</replacement>*/ util.inherits(PassThrough, Transform);\nfunction PassThrough(options) {\n    if (!(this instanceof PassThrough)) return new PassThrough(options);\n    Transform.call(this, options);\n}\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\n    cb(null, chunk);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHVwbGV4ZXIyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBQ3RELEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUsZ0VBQWdFO0FBQ2hFLHNFQUFzRTtBQUN0RSxzRUFBc0U7QUFDdEUsNEVBQTRFO0FBQzVFLHFFQUFxRTtBQUNyRSx3QkFBd0I7QUFDeEIsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSx5REFBeUQ7QUFDekQsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSw2REFBNkQ7QUFDN0QsNEVBQTRFO0FBQzVFLDJFQUEyRTtBQUMzRSx3RUFBd0U7QUFDeEUsNEVBQTRFO0FBQzVFLHlDQUF5QztBQUV6Qyx3QkFBd0I7QUFDeEIsNERBQTREO0FBQzVELHlDQUF5QztBQUV6QztBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFlBQVlDLG1CQUFPQSxDQUFDO0FBRXhCLGVBQWUsR0FDZixJQUFJQyxPQUFPQyxPQUFPQyxNQUFNLENBQUNILG1CQUFPQSxDQUFDO0FBQ2pDQyxLQUFLRyxRQUFRLEdBQUdKLG1CQUFPQSxDQUFDO0FBQ3hCLGdCQUFnQixHQUVoQkMsS0FBS0csUUFBUSxDQUFDTixhQUFhQztBQUUzQixTQUFTRCxZQUFZTyxPQUFPO0lBQzFCLElBQUksQ0FBRSxLQUFJLFlBQVlQLFdBQVUsR0FBSSxPQUFPLElBQUlBLFlBQVlPO0lBRTNETixVQUFVTyxJQUFJLENBQUMsSUFBSSxFQUFFRDtBQUN2QjtBQUVBUCxZQUFZUyxTQUFTLENBQUNDLFVBQVUsR0FBRyxTQUFVQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsRUFBRTtJQUM5REEsR0FBRyxNQUFNRjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2QtdGltZXNoZWV0LWFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL2R1cGxleGVyMi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzPzJlODAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJQYXNzVGhyb3VnaCIsIlRyYW5zZm9ybSIsInJlcXVpcmUiLCJ1dGlsIiwiT2JqZWN0IiwiY3JlYXRlIiwiaW5oZXJpdHMiLCJvcHRpb25zIiwiY2FsbCIsInByb3RvdHlwZSIsIl90cmFuc2Zvcm0iLCJjaHVuayIsImVuY29kaW5nIiwiY2IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_passthrough.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_readable.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_readable.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*<replacement>*/ var pna = __webpack_require__(/*! process-nextick-args */ \"(ssr)/./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/ module.exports = Readable;\n/*<replacement>*/ var isArray = __webpack_require__(/*! isarray */ \"(ssr)/./node_modules/duplexer2/node_modules/isarray/index.js\");\n/*</replacement>*/ /*<replacement>*/ var Duplex;\n/*</replacement>*/ Readable.ReadableState = ReadableState;\n/*<replacement>*/ var EE = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar EElistenerCount = function(emitter, type) {\n    return emitter.listeners(type).length;\n};\n/*</replacement>*/ /*<replacement>*/ var Stream = __webpack_require__(/*! ./internal/streams/stream */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/stream.js\");\n/*</replacement>*/ /*<replacement>*/ var Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/duplexer2/node_modules/safe-buffer/index.js\").Buffer);\nvar OurUint8Array = (typeof global !== \"undefined\" ? global :  false ? 0 : typeof self !== \"undefined\" ? self : {}).Uint8Array || function() {};\nfunction _uint8ArrayToBuffer(chunk) {\n    return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*</replacement>*/ /*<replacement>*/ var util = Object.create(__webpack_require__(/*! core-util-is */ \"(ssr)/./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\n/*</replacement>*/ /*<replacement>*/ var debugUtil = __webpack_require__(/*! util */ \"util\");\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n    debug = debugUtil.debuglog(\"stream\");\n} else {\n    debug = function() {};\n}\n/*</replacement>*/ var BufferList = __webpack_require__(/*! ./internal/streams/BufferList */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/BufferList.js\");\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/destroy.js\");\nvar StringDecoder;\nutil.inherits(Readable, Stream);\nvar kProxyEvents = [\n    \"error\",\n    \"close\",\n    \"destroy\",\n    \"pause\",\n    \"resume\"\n];\nfunction prependListener(emitter, event, fn) {\n    // Sadly this is not cacheable as some libraries bundle their own\n    // event emitter implementation with them.\n    if (typeof emitter.prependListener === \"function\") return emitter.prependListener(event, fn);\n    // This is a hack to make sure that our error handler is attached before any\n    // userland ones.  NEVER DO THIS. This is here only because this code needs\n    // to continue to work with older versions of Node.js that do not include\n    // the prependListener() method. The goal is to eventually remove this hack.\n    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);\n    else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);\n    else emitter._events[event] = [\n        fn,\n        emitter._events[event]\n    ];\n}\nfunction ReadableState(options, stream) {\n    Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_duplex.js\");\n    options = options || {};\n    // Duplex streams are both readable and writable, but share\n    // the same options object.\n    // However, some cases require setting options to different\n    // values for the readable and the writable sides of the duplex stream.\n    // These options can be provided separately as readableXXX and writableXXX.\n    var isDuplex = stream instanceof Duplex;\n    // object stream flag. Used to make read(n) ignore n and to\n    // make all the buffer merging and length checks go away\n    this.objectMode = !!options.objectMode;\n    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n    // the point at which it stops calling _read() to fill the buffer\n    // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n    var hwm = options.highWaterMark;\n    var readableHwm = options.readableHighWaterMark;\n    var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n    if (hwm || hwm === 0) this.highWaterMark = hwm;\n    else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;\n    else this.highWaterMark = defaultHwm;\n    // cast to ints.\n    this.highWaterMark = Math.floor(this.highWaterMark);\n    // A linked list is used to store data chunks instead of an array because the\n    // linked list can remove elements from the beginning faster than\n    // array.shift()\n    this.buffer = new BufferList();\n    this.length = 0;\n    this.pipes = null;\n    this.pipesCount = 0;\n    this.flowing = null;\n    this.ended = false;\n    this.endEmitted = false;\n    this.reading = false;\n    // a flag to be able to tell if the event 'readable'/'data' is emitted\n    // immediately, or on a later tick.  We set this to true at first, because\n    // any actions that shouldn't happen until \"later\" should generally also\n    // not happen before the first read call.\n    this.sync = true;\n    // whenever we return null, then we set a flag to say\n    // that we're awaiting a 'readable' event emission.\n    this.needReadable = false;\n    this.emittedReadable = false;\n    this.readableListening = false;\n    this.resumeScheduled = false;\n    // has it been destroyed\n    this.destroyed = false;\n    // Crypto is kind of old and crusty.  Historically, its default string\n    // encoding is 'binary' so we have to make this configurable.\n    // Everything else in the universe uses 'utf8', though.\n    this.defaultEncoding = options.defaultEncoding || \"utf8\";\n    // the number of writers that are awaiting a drain event in .pipe()s\n    this.awaitDrain = 0;\n    // if true, a maybeReadMore has been scheduled\n    this.readingMore = false;\n    this.decoder = null;\n    this.encoding = null;\n    if (options.encoding) {\n        if (!StringDecoder) StringDecoder = (__webpack_require__(/*! string_decoder/ */ \"(ssr)/./node_modules/duplexer2/node_modules/string_decoder/lib/string_decoder.js\").StringDecoder);\n        this.decoder = new StringDecoder(options.encoding);\n        this.encoding = options.encoding;\n    }\n}\nfunction Readable(options) {\n    Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_duplex.js\");\n    if (!(this instanceof Readable)) return new Readable(options);\n    this._readableState = new ReadableState(options, this);\n    // legacy\n    this.readable = true;\n    if (options) {\n        if (typeof options.read === \"function\") this._read = options.read;\n        if (typeof options.destroy === \"function\") this._destroy = options.destroy;\n    }\n    Stream.call(this);\n}\nObject.defineProperty(Readable.prototype, \"destroyed\", {\n    get: function() {\n        if (this._readableState === undefined) {\n            return false;\n        }\n        return this._readableState.destroyed;\n    },\n    set: function(value) {\n        // we ignore the value if the stream\n        // has not been initialized yet\n        if (!this._readableState) {\n            return;\n        }\n        // backward compatibility, the user is explicitly\n        // managing destroyed\n        this._readableState.destroyed = value;\n    }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function(err, cb) {\n    this.push(null);\n    cb(err);\n};\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n    var state = this._readableState;\n    var skipChunkCheck;\n    if (!state.objectMode) {\n        if (typeof chunk === \"string\") {\n            encoding = encoding || state.defaultEncoding;\n            if (encoding !== state.encoding) {\n                chunk = Buffer.from(chunk, encoding);\n                encoding = \"\";\n            }\n            skipChunkCheck = true;\n        }\n    } else {\n        skipChunkCheck = true;\n    }\n    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n    return readableAddChunk(this, chunk, null, true, false);\n};\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n    var state = stream._readableState;\n    if (chunk === null) {\n        state.reading = false;\n        onEofChunk(stream, state);\n    } else {\n        var er;\n        if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n        if (er) {\n            stream.emit(\"error\", er);\n        } else if (state.objectMode || chunk && chunk.length > 0) {\n            if (typeof chunk !== \"string\" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n                chunk = _uint8ArrayToBuffer(chunk);\n            }\n            if (addToFront) {\n                if (state.endEmitted) stream.emit(\"error\", new Error(\"stream.unshift() after end event\"));\n                else addChunk(stream, state, chunk, true);\n            } else if (state.ended) {\n                stream.emit(\"error\", new Error(\"stream.push() after EOF\"));\n            } else {\n                state.reading = false;\n                if (state.decoder && !encoding) {\n                    chunk = state.decoder.write(chunk);\n                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);\n                    else maybeReadMore(stream, state);\n                } else {\n                    addChunk(stream, state, chunk, false);\n                }\n            }\n        } else if (!addToFront) {\n            state.reading = false;\n        }\n    }\n    return needMoreData(state);\n}\nfunction addChunk(stream, state, chunk, addToFront) {\n    if (state.flowing && state.length === 0 && !state.sync) {\n        stream.emit(\"data\", chunk);\n        stream.read(0);\n    } else {\n        // update the buffer info.\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront) state.buffer.unshift(chunk);\n        else state.buffer.push(chunk);\n        if (state.needReadable) emitReadable(stream);\n    }\n    maybeReadMore(stream, state);\n}\nfunction chunkInvalid(state, chunk) {\n    var er;\n    if (!_isUint8Array(chunk) && typeof chunk !== \"string\" && chunk !== undefined && !state.objectMode) {\n        er = new TypeError(\"Invalid non-string/buffer chunk\");\n    }\n    return er;\n}\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\nReadable.prototype.isPaused = function() {\n    return this._readableState.flowing === false;\n};\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n    if (!StringDecoder) StringDecoder = (__webpack_require__(/*! string_decoder/ */ \"(ssr)/./node_modules/duplexer2/node_modules/string_decoder/lib/string_decoder.js\").StringDecoder);\n    this._readableState.decoder = new StringDecoder(enc);\n    this._readableState.encoding = enc;\n    return this;\n};\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n    if (n >= MAX_HWM) {\n        n = MAX_HWM;\n    } else {\n        // Get the next highest power of 2 to prevent increasing hwm excessively in\n        // tiny amounts\n        n--;\n        n |= n >>> 1;\n        n |= n >>> 2;\n        n |= n >>> 4;\n        n |= n >>> 8;\n        n |= n >>> 16;\n        n++;\n    }\n    return n;\n}\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n    if (n <= 0 || state.length === 0 && state.ended) return 0;\n    if (state.objectMode) return 1;\n    if (n !== n) {\n        // Only flow one buffer at a time\n        if (state.flowing && state.length) return state.buffer.head.data.length;\n        else return state.length;\n    }\n    // If we're asking for more than the current hwm, then raise the hwm.\n    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n    if (n <= state.length) return n;\n    // Don't have enough\n    if (!state.ended) {\n        state.needReadable = true;\n        return 0;\n    }\n    return state.length;\n}\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n    debug(\"read\", n);\n    n = parseInt(n, 10);\n    var state = this._readableState;\n    var nOrig = n;\n    if (n !== 0) state.emittedReadable = false;\n    // if we're doing read(0) to trigger a readable event, but we\n    // already have a bunch of data in the buffer, then just trigger\n    // the 'readable' event and move on.\n    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n        debug(\"read: emitReadable\", state.length, state.ended);\n        if (state.length === 0 && state.ended) endReadable(this);\n        else emitReadable(this);\n        return null;\n    }\n    n = howMuchToRead(n, state);\n    // if we've ended, and we're now clear, then finish it up.\n    if (n === 0 && state.ended) {\n        if (state.length === 0) endReadable(this);\n        return null;\n    }\n    // All the actual chunk generation logic needs to be\n    // *below* the call to _read.  The reason is that in certain\n    // synthetic stream cases, such as passthrough streams, _read\n    // may be a completely synchronous operation which may change\n    // the state of the read buffer, providing enough data when\n    // before there was *not* enough.\n    //\n    // So, the steps are:\n    // 1. Figure out what the state of things will be after we do\n    // a read from the buffer.\n    //\n    // 2. If that resulting state will trigger a _read, then call _read.\n    // Note that this may be asynchronous, or synchronous.  Yes, it is\n    // deeply ugly to write APIs this way, but that still doesn't mean\n    // that the Readable class should behave improperly, as streams are\n    // designed to be sync/async agnostic.\n    // Take note if the _read call is sync or async (ie, if the read call\n    // has returned yet), so that we know whether or not it's safe to emit\n    // 'readable' etc.\n    //\n    // 3. Actually pull the requested chunks out of the buffer and return.\n    // if we need a readable event, then we need to do some reading.\n    var doRead = state.needReadable;\n    debug(\"need readable\", doRead);\n    // if we currently have less than the highWaterMark, then also read some\n    if (state.length === 0 || state.length - n < state.highWaterMark) {\n        doRead = true;\n        debug(\"length less than watermark\", doRead);\n    }\n    // however, if we've ended, then there's no point, and if we're already\n    // reading, then it's unnecessary.\n    if (state.ended || state.reading) {\n        doRead = false;\n        debug(\"reading or ended\", doRead);\n    } else if (doRead) {\n        debug(\"do read\");\n        state.reading = true;\n        state.sync = true;\n        // if the length is currently zero, then we *need* a readable event.\n        if (state.length === 0) state.needReadable = true;\n        // call internal read method\n        this._read(state.highWaterMark);\n        state.sync = false;\n        // If _read pushed data synchronously, then `reading` will be false,\n        // and we need to re-evaluate how much data we can return to the user.\n        if (!state.reading) n = howMuchToRead(nOrig, state);\n    }\n    var ret;\n    if (n > 0) ret = fromList(n, state);\n    else ret = null;\n    if (ret === null) {\n        state.needReadable = true;\n        n = 0;\n    } else {\n        state.length -= n;\n    }\n    if (state.length === 0) {\n        // If we have nothing in the buffer, then we want to know\n        // as soon as we *do* get something into the buffer.\n        if (!state.ended) state.needReadable = true;\n        // If we tried to read() past the EOF, then emit end on the next tick.\n        if (nOrig !== n && state.ended) endReadable(this);\n    }\n    if (ret !== null) this.emit(\"data\", ret);\n    return ret;\n};\nfunction onEofChunk(stream, state) {\n    if (state.ended) return;\n    if (state.decoder) {\n        var chunk = state.decoder.end();\n        if (chunk && chunk.length) {\n            state.buffer.push(chunk);\n            state.length += state.objectMode ? 1 : chunk.length;\n        }\n    }\n    state.ended = true;\n    // emit 'readable' now to make sure it gets picked up.\n    emitReadable(stream);\n}\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n    var state = stream._readableState;\n    state.needReadable = false;\n    if (!state.emittedReadable) {\n        debug(\"emitReadable\", state.flowing);\n        state.emittedReadable = true;\n        if (state.sync) pna.nextTick(emitReadable_, stream);\n        else emitReadable_(stream);\n    }\n}\nfunction emitReadable_(stream) {\n    debug(\"emit readable\");\n    stream.emit(\"readable\");\n    flow(stream);\n}\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n    if (!state.readingMore) {\n        state.readingMore = true;\n        pna.nextTick(maybeReadMore_, stream, state);\n    }\n}\nfunction maybeReadMore_(stream, state) {\n    var len = state.length;\n    while(!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark){\n        debug(\"maybeReadMore read 0\");\n        stream.read(0);\n        if (len === state.length) break;\n        else len = state.length;\n    }\n    state.readingMore = false;\n}\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n    this.emit(\"error\", new Error(\"_read() is not implemented\"));\n};\nReadable.prototype.pipe = function(dest, pipeOpts) {\n    var src = this;\n    var state = this._readableState;\n    switch(state.pipesCount){\n        case 0:\n            state.pipes = dest;\n            break;\n        case 1:\n            state.pipes = [\n                state.pipes,\n                dest\n            ];\n            break;\n        default:\n            state.pipes.push(dest);\n            break;\n    }\n    state.pipesCount += 1;\n    debug(\"pipe count=%d opts=%j\", state.pipesCount, pipeOpts);\n    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n    var endFn = doEnd ? onend : unpipe;\n    if (state.endEmitted) pna.nextTick(endFn);\n    else src.once(\"end\", endFn);\n    dest.on(\"unpipe\", onunpipe);\n    function onunpipe(readable, unpipeInfo) {\n        debug(\"onunpipe\");\n        if (readable === src) {\n            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n                unpipeInfo.hasUnpiped = true;\n                cleanup();\n            }\n        }\n    }\n    function onend() {\n        debug(\"onend\");\n        dest.end();\n    }\n    // when the dest drains, it reduces the awaitDrain counter\n    // on the source.  This would be more elegant with a .once()\n    // handler in flow(), but adding and removing repeatedly is\n    // too slow.\n    var ondrain = pipeOnDrain(src);\n    dest.on(\"drain\", ondrain);\n    var cleanedUp = false;\n    function cleanup() {\n        debug(\"cleanup\");\n        // cleanup event handlers once the pipe is broken\n        dest.removeListener(\"close\", onclose);\n        dest.removeListener(\"finish\", onfinish);\n        dest.removeListener(\"drain\", ondrain);\n        dest.removeListener(\"error\", onerror);\n        dest.removeListener(\"unpipe\", onunpipe);\n        src.removeListener(\"end\", onend);\n        src.removeListener(\"end\", unpipe);\n        src.removeListener(\"data\", ondata);\n        cleanedUp = true;\n        // if the reader is waiting for a drain event from this\n        // specific writer, then it would cause it to never start\n        // flowing again.\n        // So, if this is awaiting a drain, then we just call it now.\n        // If we don't know, then assume that we are waiting for one.\n        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n    }\n    // If the user pushes more data while we're writing to dest then we'll end up\n    // in ondata again. However, we only want to increase awaitDrain once because\n    // dest will only emit one 'drain' event for the multiple writes.\n    // => Introduce a guard on increasing awaitDrain.\n    var increasedAwaitDrain = false;\n    src.on(\"data\", ondata);\n    function ondata(chunk) {\n        debug(\"ondata\");\n        increasedAwaitDrain = false;\n        var ret = dest.write(chunk);\n        if (false === ret && !increasedAwaitDrain) {\n            // If the user unpiped during `dest.write()`, it is possible\n            // to get stuck in a permanently paused state if that write\n            // also returned false.\n            // => Check whether `dest` is still a piping destination.\n            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n                debug(\"false write response, pause\", state.awaitDrain);\n                state.awaitDrain++;\n                increasedAwaitDrain = true;\n            }\n            src.pause();\n        }\n    }\n    // if the dest has an error, then stop piping into it.\n    // however, don't suppress the throwing behavior for this.\n    function onerror(er) {\n        debug(\"onerror\", er);\n        unpipe();\n        dest.removeListener(\"error\", onerror);\n        if (EElistenerCount(dest, \"error\") === 0) dest.emit(\"error\", er);\n    }\n    // Make sure our error handler is attached before userland ones.\n    prependListener(dest, \"error\", onerror);\n    // Both close and finish should trigger unpipe, but only once.\n    function onclose() {\n        dest.removeListener(\"finish\", onfinish);\n        unpipe();\n    }\n    dest.once(\"close\", onclose);\n    function onfinish() {\n        debug(\"onfinish\");\n        dest.removeListener(\"close\", onclose);\n        unpipe();\n    }\n    dest.once(\"finish\", onfinish);\n    function unpipe() {\n        debug(\"unpipe\");\n        src.unpipe(dest);\n    }\n    // tell the dest that it's being piped to\n    dest.emit(\"pipe\", src);\n    // start the flow if it hasn't been started already.\n    if (!state.flowing) {\n        debug(\"pipe resume\");\n        src.resume();\n    }\n    return dest;\n};\nfunction pipeOnDrain(src) {\n    return function() {\n        var state = src._readableState;\n        debug(\"pipeOnDrain\", state.awaitDrain);\n        if (state.awaitDrain) state.awaitDrain--;\n        if (state.awaitDrain === 0 && EElistenerCount(src, \"data\")) {\n            state.flowing = true;\n            flow(src);\n        }\n    };\n}\nReadable.prototype.unpipe = function(dest) {\n    var state = this._readableState;\n    var unpipeInfo = {\n        hasUnpiped: false\n    };\n    // if we're not piping anywhere, then do nothing.\n    if (state.pipesCount === 0) return this;\n    // just one destination.  most common case.\n    if (state.pipesCount === 1) {\n        // passed in one, but it's not the right one.\n        if (dest && dest !== state.pipes) return this;\n        if (!dest) dest = state.pipes;\n        // got a match.\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        if (dest) dest.emit(\"unpipe\", this, unpipeInfo);\n        return this;\n    }\n    // slow case. multiple pipe destinations.\n    if (!dest) {\n        // remove all.\n        var dests = state.pipes;\n        var len = state.pipesCount;\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        for(var i = 0; i < len; i++){\n            dests[i].emit(\"unpipe\", this, {\n                hasUnpiped: false\n            });\n        }\n        return this;\n    }\n    // try to find the right one.\n    var index = indexOf(state.pipes, dest);\n    if (index === -1) return this;\n    state.pipes.splice(index, 1);\n    state.pipesCount -= 1;\n    if (state.pipesCount === 1) state.pipes = state.pipes[0];\n    dest.emit(\"unpipe\", this, unpipeInfo);\n    return this;\n};\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n    var res = Stream.prototype.on.call(this, ev, fn);\n    if (ev === \"data\") {\n        // Start flowing on next tick if stream isn't explicitly paused\n        if (this._readableState.flowing !== false) this.resume();\n    } else if (ev === \"readable\") {\n        var state = this._readableState;\n        if (!state.endEmitted && !state.readableListening) {\n            state.readableListening = state.needReadable = true;\n            state.emittedReadable = false;\n            if (!state.reading) {\n                pna.nextTick(nReadingNextTick, this);\n            } else if (state.length) {\n                emitReadable(this);\n            }\n        }\n    }\n    return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\nfunction nReadingNextTick(self1) {\n    debug(\"readable nexttick read 0\");\n    self1.read(0);\n}\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n    var state = this._readableState;\n    if (!state.flowing) {\n        debug(\"resume\");\n        state.flowing = true;\n        resume(this, state);\n    }\n    return this;\n};\nfunction resume(stream, state) {\n    if (!state.resumeScheduled) {\n        state.resumeScheduled = true;\n        pna.nextTick(resume_, stream, state);\n    }\n}\nfunction resume_(stream, state) {\n    if (!state.reading) {\n        debug(\"resume read 0\");\n        stream.read(0);\n    }\n    state.resumeScheduled = false;\n    state.awaitDrain = 0;\n    stream.emit(\"resume\");\n    flow(stream);\n    if (state.flowing && !state.reading) stream.read(0);\n}\nReadable.prototype.pause = function() {\n    debug(\"call pause flowing=%j\", this._readableState.flowing);\n    if (false !== this._readableState.flowing) {\n        debug(\"pause\");\n        this._readableState.flowing = false;\n        this.emit(\"pause\");\n    }\n    return this;\n};\nfunction flow(stream) {\n    var state = stream._readableState;\n    debug(\"flow\", state.flowing);\n    while(state.flowing && stream.read() !== null){}\n}\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n    var _this = this;\n    var state = this._readableState;\n    var paused = false;\n    stream.on(\"end\", function() {\n        debug(\"wrapped end\");\n        if (state.decoder && !state.ended) {\n            var chunk = state.decoder.end();\n            if (chunk && chunk.length) _this.push(chunk);\n        }\n        _this.push(null);\n    });\n    stream.on(\"data\", function(chunk) {\n        debug(\"wrapped data\");\n        if (state.decoder) chunk = state.decoder.write(chunk);\n        // don't skip over falsy values in objectMode\n        if (state.objectMode && (chunk === null || chunk === undefined)) return;\n        else if (!state.objectMode && (!chunk || !chunk.length)) return;\n        var ret = _this.push(chunk);\n        if (!ret) {\n            paused = true;\n            stream.pause();\n        }\n    });\n    // proxy all the other methods.\n    // important when wrapping filters and duplexes.\n    for(var i in stream){\n        if (this[i] === undefined && typeof stream[i] === \"function\") {\n            this[i] = function(method) {\n                return function() {\n                    return stream[method].apply(stream, arguments);\n                };\n            }(i);\n        }\n    }\n    // proxy certain important events.\n    for(var n = 0; n < kProxyEvents.length; n++){\n        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n    }\n    // when we try to consume some more bytes, simply unpause the\n    // underlying stream.\n    this._read = function(n) {\n        debug(\"wrapped _read\", n);\n        if (paused) {\n            paused = false;\n            stream.resume();\n        }\n    };\n    return this;\n};\nObject.defineProperty(Readable.prototype, \"readableHighWaterMark\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function() {\n        return this._readableState.highWaterMark;\n    }\n});\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n    // nothing buffered\n    if (state.length === 0) return null;\n    var ret;\n    if (state.objectMode) ret = state.buffer.shift();\n    else if (!n || n >= state.length) {\n        // read it all, truncate the list\n        if (state.decoder) ret = state.buffer.join(\"\");\n        else if (state.buffer.length === 1) ret = state.buffer.head.data;\n        else ret = state.buffer.concat(state.length);\n        state.buffer.clear();\n    } else {\n        // read part of list\n        ret = fromListPartial(n, state.buffer, state.decoder);\n    }\n    return ret;\n}\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n    var ret;\n    if (n < list.head.data.length) {\n        // slice is the same for buffers and strings\n        ret = list.head.data.slice(0, n);\n        list.head.data = list.head.data.slice(n);\n    } else if (n === list.head.data.length) {\n        // first chunk is a perfect match\n        ret = list.shift();\n    } else {\n        // result spans more than one buffer\n        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n    }\n    return ret;\n}\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n    var p = list.head;\n    var c = 1;\n    var ret = p.data;\n    n -= ret.length;\n    while(p = p.next){\n        var str = p.data;\n        var nb = n > str.length ? str.length : n;\n        if (nb === str.length) ret += str;\n        else ret += str.slice(0, n);\n        n -= nb;\n        if (n === 0) {\n            if (nb === str.length) {\n                ++c;\n                if (p.next) list.head = p.next;\n                else list.head = list.tail = null;\n            } else {\n                list.head = p;\n                p.data = str.slice(nb);\n            }\n            break;\n        }\n        ++c;\n    }\n    list.length -= c;\n    return ret;\n}\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n    var ret = Buffer.allocUnsafe(n);\n    var p = list.head;\n    var c = 1;\n    p.data.copy(ret);\n    n -= p.data.length;\n    while(p = p.next){\n        var buf = p.data;\n        var nb = n > buf.length ? buf.length : n;\n        buf.copy(ret, ret.length - n, 0, nb);\n        n -= nb;\n        if (n === 0) {\n            if (nb === buf.length) {\n                ++c;\n                if (p.next) list.head = p.next;\n                else list.head = list.tail = null;\n            } else {\n                list.head = p;\n                p.data = buf.slice(nb);\n            }\n            break;\n        }\n        ++c;\n    }\n    list.length -= c;\n    return ret;\n}\nfunction endReadable(stream) {\n    var state = stream._readableState;\n    // If we get here before consuming all the bytes, then that is a\n    // bug in node.  Should never happen.\n    if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n    if (!state.endEmitted) {\n        state.ended = true;\n        pna.nextTick(endReadableNT, state, stream);\n    }\n}\nfunction endReadableNT(state, stream) {\n    // Check that we didn't get one last unshift.\n    if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit(\"end\");\n    }\n}\nfunction indexOf(xs, x) {\n    for(var i = 0, l = xs.length; i < l; i++){\n        if (xs[i] === x) return i;\n    }\n    return -1;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_readable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_transform.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_transform.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\nmodule.exports = Transform;\nvar Duplex = __webpack_require__(/*! ./_stream_duplex */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_duplex.js\");\n/*<replacement>*/ var util = Object.create(__webpack_require__(/*! core-util-is */ \"(ssr)/./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\n/*</replacement>*/ util.inherits(Transform, Duplex);\nfunction afterTransform(er, data) {\n    var ts = this._transformState;\n    ts.transforming = false;\n    var cb = ts.writecb;\n    if (!cb) {\n        return this.emit(\"error\", new Error(\"write callback called multiple times\"));\n    }\n    ts.writechunk = null;\n    ts.writecb = null;\n    if (data != null) this.push(data);\n    cb(er);\n    var rs = this._readableState;\n    rs.reading = false;\n    if (rs.needReadable || rs.length < rs.highWaterMark) {\n        this._read(rs.highWaterMark);\n    }\n}\nfunction Transform(options) {\n    if (!(this instanceof Transform)) return new Transform(options);\n    Duplex.call(this, options);\n    this._transformState = {\n        afterTransform: afterTransform.bind(this),\n        needTransform: false,\n        transforming: false,\n        writecb: null,\n        writechunk: null,\n        writeencoding: null\n    };\n    // start out asking for a readable event once data is transformed.\n    this._readableState.needReadable = true;\n    // we have implemented the _read method, and done the other things\n    // that Readable wants before the first _read call, so unset the\n    // sync guard flag.\n    this._readableState.sync = false;\n    if (options) {\n        if (typeof options.transform === \"function\") this._transform = options.transform;\n        if (typeof options.flush === \"function\") this._flush = options.flush;\n    }\n    // When the writable side finishes, then flush out anything remaining.\n    this.on(\"prefinish\", prefinish);\n}\nfunction prefinish() {\n    var _this = this;\n    if (typeof this._flush === \"function\") {\n        this._flush(function(er, data) {\n            done(_this, er, data);\n        });\n    } else {\n        done(this, null, null);\n    }\n}\nTransform.prototype.push = function(chunk, encoding) {\n    this._transformState.needTransform = false;\n    return Duplex.prototype.push.call(this, chunk, encoding);\n};\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function(chunk, encoding, cb) {\n    throw new Error(\"_transform() is not implemented\");\n};\nTransform.prototype._write = function(chunk, encoding, cb) {\n    var ts = this._transformState;\n    ts.writecb = cb;\n    ts.writechunk = chunk;\n    ts.writeencoding = encoding;\n    if (!ts.transforming) {\n        var rs = this._readableState;\n        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n    }\n};\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function(n) {\n    var ts = this._transformState;\n    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n        ts.transforming = true;\n        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n    } else {\n        // mark that we need a transform, so that any data that comes in\n        // will get processed, now that we've asked for it.\n        ts.needTransform = true;\n    }\n};\nTransform.prototype._destroy = function(err, cb) {\n    var _this2 = this;\n    Duplex.prototype._destroy.call(this, err, function(err2) {\n        cb(err2);\n        _this2.emit(\"close\");\n    });\n};\nfunction done(stream, er, data) {\n    if (er) return stream.emit(\"error\", er);\n    if (data != null) stream.push(data);\n    // if there's nothing in the write buffer, then that means\n    // that nothing more will ever be provided\n    if (stream._writableState.length) throw new Error(\"Calling transform done when ws.length != 0\");\n    if (stream._transformState.transforming) throw new Error(\"Calling transform done when still transforming\");\n    return stream.push(null);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHVwbGV4ZXIyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUN0RCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLGdFQUFnRTtBQUNoRSxzRUFBc0U7QUFDdEUsc0VBQXNFO0FBQ3RFLDRFQUE0RTtBQUM1RSxxRUFBcUU7QUFDckUsd0JBQXdCO0FBQ3hCLEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUseURBQXlEO0FBQ3pELEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUsNkRBQTZEO0FBQzdELDRFQUE0RTtBQUM1RSwyRUFBMkU7QUFDM0Usd0VBQXdFO0FBQ3hFLDRFQUE0RTtBQUM1RSx5Q0FBeUM7QUFFekMsZ0VBQWdFO0FBQ2hFLDhEQUE4RDtBQUM5RCx1RUFBdUU7QUFDdkUsc0VBQXNFO0FBQ3RFLGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0YsZ0VBQWdFO0FBQ2hFLHFFQUFxRTtBQUNyRSxrRUFBa0U7QUFDbEUsMERBQTBEO0FBQzFELEVBQUU7QUFDRix5QkFBeUI7QUFDekIsRUFBRTtBQUNGLHdFQUF3RTtBQUN4RSxzRUFBc0U7QUFDdEUsbUVBQW1FO0FBQ25FLGdFQUFnRTtBQUNoRSxvREFBb0Q7QUFDcEQsRUFBRTtBQUNGLHVFQUF1RTtBQUN2RSxvRUFBb0U7QUFDcEUscUVBQXFFO0FBQ3JFLHVFQUF1RTtBQUN2RSxxRUFBcUU7QUFDckUsc0VBQXNFO0FBQ3RFLEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsMEVBQTBFO0FBQzFFLHlFQUF5RTtBQUN6RSxvRUFBb0U7QUFDcEUsc0VBQXNFO0FBQ3RFLHNFQUFzRTtBQUN0RSx3RUFBd0U7QUFDeEUsc0VBQXNFO0FBQ3RFLHFFQUFxRTtBQUNyRSxvRUFBb0U7QUFDcEUseUNBQXlDO0FBQ3pDLEVBQUU7QUFDRix5RUFBeUU7QUFDekUseUVBQXlFO0FBQ3pFLCtEQUErRDtBQUUvRDtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFNBQVNDLG1CQUFPQSxDQUFDO0FBRXJCLGVBQWUsR0FDZixJQUFJQyxPQUFPQyxPQUFPQyxNQUFNLENBQUNILG1CQUFPQSxDQUFDO0FBQ2pDQyxLQUFLRyxRQUFRLEdBQUdKLG1CQUFPQSxDQUFDO0FBQ3hCLGdCQUFnQixHQUVoQkMsS0FBS0csUUFBUSxDQUFDTixXQUFXQztBQUV6QixTQUFTTSxlQUFlQyxFQUFFLEVBQUVDLElBQUk7SUFDOUIsSUFBSUMsS0FBSyxJQUFJLENBQUNDLGVBQWU7SUFDN0JELEdBQUdFLFlBQVksR0FBRztJQUVsQixJQUFJQyxLQUFLSCxHQUFHSSxPQUFPO0lBRW5CLElBQUksQ0FBQ0QsSUFBSTtRQUNQLE9BQU8sSUFBSSxDQUFDRSxJQUFJLENBQUMsU0FBUyxJQUFJQyxNQUFNO0lBQ3RDO0lBRUFOLEdBQUdPLFVBQVUsR0FBRztJQUNoQlAsR0FBR0ksT0FBTyxHQUFHO0lBRWIsSUFBSUwsUUFBUSxNQUNWLElBQUksQ0FBQ1MsSUFBSSxDQUFDVDtJQUVaSSxHQUFHTDtJQUVILElBQUlXLEtBQUssSUFBSSxDQUFDQyxjQUFjO0lBQzVCRCxHQUFHRSxPQUFPLEdBQUc7SUFDYixJQUFJRixHQUFHRyxZQUFZLElBQUlILEdBQUdJLE1BQU0sR0FBR0osR0FBR0ssYUFBYSxFQUFFO1FBQ25ELElBQUksQ0FBQ0MsS0FBSyxDQUFDTixHQUFHSyxhQUFhO0lBQzdCO0FBQ0Y7QUFFQSxTQUFTeEIsVUFBVTBCLE9BQU87SUFDeEIsSUFBSSxDQUFFLEtBQUksWUFBWTFCLFNBQVEsR0FBSSxPQUFPLElBQUlBLFVBQVUwQjtJQUV2RHpCLE9BQU8wQixJQUFJLENBQUMsSUFBSSxFQUFFRDtJQUVsQixJQUFJLENBQUNmLGVBQWUsR0FBRztRQUNyQkosZ0JBQWdCQSxlQUFlcUIsSUFBSSxDQUFDLElBQUk7UUFDeENDLGVBQWU7UUFDZmpCLGNBQWM7UUFDZEUsU0FBUztRQUNURyxZQUFZO1FBQ1phLGVBQWU7SUFDakI7SUFFQSxrRUFBa0U7SUFDbEUsSUFBSSxDQUFDVixjQUFjLENBQUNFLFlBQVksR0FBRztJQUVuQyxrRUFBa0U7SUFDbEUsZ0VBQWdFO0lBQ2hFLG1CQUFtQjtJQUNuQixJQUFJLENBQUNGLGNBQWMsQ0FBQ1csSUFBSSxHQUFHO0lBRTNCLElBQUlMLFNBQVM7UUFDWCxJQUFJLE9BQU9BLFFBQVFNLFNBQVMsS0FBSyxZQUFZLElBQUksQ0FBQ0MsVUFBVSxHQUFHUCxRQUFRTSxTQUFTO1FBRWhGLElBQUksT0FBT04sUUFBUVEsS0FBSyxLQUFLLFlBQVksSUFBSSxDQUFDQyxNQUFNLEdBQUdULFFBQVFRLEtBQUs7SUFDdEU7SUFFQSxzRUFBc0U7SUFDdEUsSUFBSSxDQUFDRSxFQUFFLENBQUMsYUFBYUM7QUFDdkI7QUFFQSxTQUFTQTtJQUNQLElBQUlDLFFBQVEsSUFBSTtJQUVoQixJQUFJLE9BQU8sSUFBSSxDQUFDSCxNQUFNLEtBQUssWUFBWTtRQUNyQyxJQUFJLENBQUNBLE1BQU0sQ0FBQyxTQUFVM0IsRUFBRSxFQUFFQyxJQUFJO1lBQzVCOEIsS0FBS0QsT0FBTzlCLElBQUlDO1FBQ2xCO0lBQ0YsT0FBTztRQUNMOEIsS0FBSyxJQUFJLEVBQUUsTUFBTTtJQUNuQjtBQUNGO0FBRUF2QyxVQUFVd0MsU0FBUyxDQUFDdEIsSUFBSSxHQUFHLFNBQVV1QixLQUFLLEVBQUVDLFFBQVE7SUFDbEQsSUFBSSxDQUFDL0IsZUFBZSxDQUFDa0IsYUFBYSxHQUFHO0lBQ3JDLE9BQU81QixPQUFPdUMsU0FBUyxDQUFDdEIsSUFBSSxDQUFDUyxJQUFJLENBQUMsSUFBSSxFQUFFYyxPQUFPQztBQUNqRDtBQUVBLHVDQUF1QztBQUN2QyxvREFBb0Q7QUFDcEQsNkJBQTZCO0FBQzdCLEVBQUU7QUFDRix5REFBeUQ7QUFDekQsaUVBQWlFO0FBQ2pFLEVBQUU7QUFDRixpRUFBaUU7QUFDakUsc0VBQXNFO0FBQ3RFLHdEQUF3RDtBQUN4RDFDLFVBQVV3QyxTQUFTLENBQUNQLFVBQVUsR0FBRyxTQUFVUSxLQUFLLEVBQUVDLFFBQVEsRUFBRTdCLEVBQUU7SUFDNUQsTUFBTSxJQUFJRyxNQUFNO0FBQ2xCO0FBRUFoQixVQUFVd0MsU0FBUyxDQUFDRyxNQUFNLEdBQUcsU0FBVUYsS0FBSyxFQUFFQyxRQUFRLEVBQUU3QixFQUFFO0lBQ3hELElBQUlILEtBQUssSUFBSSxDQUFDQyxlQUFlO0lBQzdCRCxHQUFHSSxPQUFPLEdBQUdEO0lBQ2JILEdBQUdPLFVBQVUsR0FBR3dCO0lBQ2hCL0IsR0FBR29CLGFBQWEsR0FBR1k7SUFDbkIsSUFBSSxDQUFDaEMsR0FBR0UsWUFBWSxFQUFFO1FBQ3BCLElBQUlPLEtBQUssSUFBSSxDQUFDQyxjQUFjO1FBQzVCLElBQUlWLEdBQUdtQixhQUFhLElBQUlWLEdBQUdHLFlBQVksSUFBSUgsR0FBR0ksTUFBTSxHQUFHSixHQUFHSyxhQUFhLEVBQUUsSUFBSSxDQUFDQyxLQUFLLENBQUNOLEdBQUdLLGFBQWE7SUFDdEc7QUFDRjtBQUVBLHlDQUF5QztBQUN6QyxnQ0FBZ0M7QUFDaEMsaUVBQWlFO0FBQ2pFeEIsVUFBVXdDLFNBQVMsQ0FBQ2YsS0FBSyxHQUFHLFNBQVVtQixDQUFDO0lBQ3JDLElBQUlsQyxLQUFLLElBQUksQ0FBQ0MsZUFBZTtJQUU3QixJQUFJRCxHQUFHTyxVQUFVLEtBQUssUUFBUVAsR0FBR0ksT0FBTyxJQUFJLENBQUNKLEdBQUdFLFlBQVksRUFBRTtRQUM1REYsR0FBR0UsWUFBWSxHQUFHO1FBQ2xCLElBQUksQ0FBQ3FCLFVBQVUsQ0FBQ3ZCLEdBQUdPLFVBQVUsRUFBRVAsR0FBR29CLGFBQWEsRUFBRXBCLEdBQUdILGNBQWM7SUFDcEUsT0FBTztRQUNMLGdFQUFnRTtRQUNoRSxtREFBbUQ7UUFDbkRHLEdBQUdtQixhQUFhLEdBQUc7SUFDckI7QUFDRjtBQUVBN0IsVUFBVXdDLFNBQVMsQ0FBQ0ssUUFBUSxHQUFHLFNBQVVDLEdBQUcsRUFBRWpDLEVBQUU7SUFDOUMsSUFBSWtDLFNBQVMsSUFBSTtJQUVqQjlDLE9BQU91QyxTQUFTLENBQUNLLFFBQVEsQ0FBQ2xCLElBQUksQ0FBQyxJQUFJLEVBQUVtQixLQUFLLFNBQVVFLElBQUk7UUFDdERuQyxHQUFHbUM7UUFDSEQsT0FBT2hDLElBQUksQ0FBQztJQUNkO0FBQ0Y7QUFFQSxTQUFTd0IsS0FBS1UsTUFBTSxFQUFFekMsRUFBRSxFQUFFQyxJQUFJO0lBQzVCLElBQUlELElBQUksT0FBT3lDLE9BQU9sQyxJQUFJLENBQUMsU0FBU1A7SUFFcEMsSUFBSUMsUUFBUSxNQUNWd0MsT0FBTy9CLElBQUksQ0FBQ1Q7SUFFZCwwREFBMEQ7SUFDMUQsMENBQTBDO0lBQzFDLElBQUl3QyxPQUFPQyxjQUFjLENBQUMzQixNQUFNLEVBQUUsTUFBTSxJQUFJUCxNQUFNO0lBRWxELElBQUlpQyxPQUFPdEMsZUFBZSxDQUFDQyxZQUFZLEVBQUUsTUFBTSxJQUFJSSxNQUFNO0lBRXpELE9BQU9pQyxPQUFPL0IsSUFBSSxDQUFDO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2QtdGltZXNoZWV0LWFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL2R1cGxleGVyMi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcz8wYmQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm07XG5cbnZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhUcmFuc2Zvcm0sIER1cGxleCk7XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKGVyLCBkYXRhKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcblxuICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuXG4gIGlmICghY2IpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignd3JpdGUgY2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJykpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHRoaXMucHVzaChkYXRhKTtcblxuICBjYihlcik7XG5cbiAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcblxuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IHtcbiAgICBhZnRlclRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSxcbiAgICBuZWVkVHJhbnNmb3JtOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1pbmc6IGZhbHNlLFxuICAgIHdyaXRlY2I6IG51bGwsXG4gICAgd3JpdGVjaHVuazogbnVsbCxcbiAgICB3cml0ZWVuY29kaW5nOiBudWxsXG4gIH07XG5cbiAgLy8gc3RhcnQgb3V0IGFza2luZyBmb3IgYSByZWFkYWJsZSBldmVudCBvbmNlIGRhdGEgaXMgdHJhbnNmb3JtZWQuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVzaDtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cbiAgdGhpcy5vbigncHJlZmluaXNoJywgcHJlZmluaXNoKTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICAgIGRvbmUoX3RoaXMsIGVyLCBkYXRhKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpO1xuICB9XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ190cmFuc2Zvcm0oKSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTtcblxuLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICBEdXBsZXgucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcywgZXJyLCBmdW5jdGlvbiAoZXJyMikge1xuICAgIGNiKGVycjIpO1xuICAgIF90aGlzMi5lbWl0KCdjbG9zZScpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkge1xuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgaWYgKHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7XG5cbiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiBzdGlsbCB0cmFuc2Zvcm1pbmcnKTtcblxuICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG59Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJUcmFuc2Zvcm0iLCJEdXBsZXgiLCJyZXF1aXJlIiwidXRpbCIsIk9iamVjdCIsImNyZWF0ZSIsImluaGVyaXRzIiwiYWZ0ZXJUcmFuc2Zvcm0iLCJlciIsImRhdGEiLCJ0cyIsIl90cmFuc2Zvcm1TdGF0ZSIsInRyYW5zZm9ybWluZyIsImNiIiwid3JpdGVjYiIsImVtaXQiLCJFcnJvciIsIndyaXRlY2h1bmsiLCJwdXNoIiwicnMiLCJfcmVhZGFibGVTdGF0ZSIsInJlYWRpbmciLCJuZWVkUmVhZGFibGUiLCJsZW5ndGgiLCJoaWdoV2F0ZXJNYXJrIiwiX3JlYWQiLCJvcHRpb25zIiwiY2FsbCIsImJpbmQiLCJuZWVkVHJhbnNmb3JtIiwid3JpdGVlbmNvZGluZyIsInN5bmMiLCJ0cmFuc2Zvcm0iLCJfdHJhbnNmb3JtIiwiZmx1c2giLCJfZmx1c2giLCJvbiIsInByZWZpbmlzaCIsIl90aGlzIiwiZG9uZSIsInByb3RvdHlwZSIsImNodW5rIiwiZW5jb2RpbmciLCJfd3JpdGUiLCJuIiwiX2Rlc3Ryb3kiLCJlcnIiLCJfdGhpczIiLCJlcnIyIiwic3RyZWFtIiwiX3dyaXRhYmxlU3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_transform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_writable.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_writable.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n/*<replacement>*/ var pna = __webpack_require__(/*! process-nextick-args */ \"(ssr)/./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/ module.exports = Writable;\n/* <replacement> */ function WriteReq(chunk, encoding, cb) {\n    this.chunk = chunk;\n    this.encoding = encoding;\n    this.callback = cb;\n    this.next = null;\n}\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n    var _this = this;\n    this.next = null;\n    this.entry = null;\n    this.finish = function() {\n        onCorkedFinish(_this, state);\n    };\n}\n/* </replacement> */ /*<replacement>*/ var asyncWrite =  true && [\n    \"v0.10\",\n    \"v0.9.\"\n].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/ /*<replacement>*/ var Duplex;\n/*</replacement>*/ Writable.WritableState = WritableState;\n/*<replacement>*/ var util = Object.create(__webpack_require__(/*! core-util-is */ \"(ssr)/./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\n/*</replacement>*/ /*<replacement>*/ var internalUtil = {\n    deprecate: __webpack_require__(/*! util-deprecate */ \"(ssr)/./node_modules/util-deprecate/node.js\")\n};\n/*</replacement>*/ /*<replacement>*/ var Stream = __webpack_require__(/*! ./internal/streams/stream */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/stream.js\");\n/*</replacement>*/ /*<replacement>*/ var Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/duplexer2/node_modules/safe-buffer/index.js\").Buffer);\nvar OurUint8Array = (typeof global !== \"undefined\" ? global :  false ? 0 : typeof self !== \"undefined\" ? self : {}).Uint8Array || function() {};\nfunction _uint8ArrayToBuffer(chunk) {\n    return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*</replacement>*/ var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/destroy.js\");\nutil.inherits(Writable, Stream);\nfunction nop() {}\nfunction WritableState(options, stream) {\n    Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_duplex.js\");\n    options = options || {};\n    // Duplex streams are both readable and writable, but share\n    // the same options object.\n    // However, some cases require setting options to different\n    // values for the readable and the writable sides of the duplex stream.\n    // These options can be provided separately as readableXXX and writableXXX.\n    var isDuplex = stream instanceof Duplex;\n    // object stream flag to indicate whether or not this stream\n    // contains buffers or objects.\n    this.objectMode = !!options.objectMode;\n    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n    // the point at which write() starts returning false\n    // Note: 0 is a valid value, means that we always return false if\n    // the entire buffer is not flushed immediately on write()\n    var hwm = options.highWaterMark;\n    var writableHwm = options.writableHighWaterMark;\n    var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n    if (hwm || hwm === 0) this.highWaterMark = hwm;\n    else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;\n    else this.highWaterMark = defaultHwm;\n    // cast to ints.\n    this.highWaterMark = Math.floor(this.highWaterMark);\n    // if _final has been called\n    this.finalCalled = false;\n    // drain event flag.\n    this.needDrain = false;\n    // at the start of calling end()\n    this.ending = false;\n    // when end() has been called, and returned\n    this.ended = false;\n    // when 'finish' is emitted\n    this.finished = false;\n    // has it been destroyed\n    this.destroyed = false;\n    // should we decode strings into buffers before passing to _write?\n    // this is here so that some node-core streams can optimize string\n    // handling at a lower level.\n    var noDecode = options.decodeStrings === false;\n    this.decodeStrings = !noDecode;\n    // Crypto is kind of old and crusty.  Historically, its default string\n    // encoding is 'binary' so we have to make this configurable.\n    // Everything else in the universe uses 'utf8', though.\n    this.defaultEncoding = options.defaultEncoding || \"utf8\";\n    // not an actual buffer we keep track of, but a measurement\n    // of how much we're waiting to get pushed to some underlying\n    // socket or file.\n    this.length = 0;\n    // a flag to see when we're in the middle of a write.\n    this.writing = false;\n    // when true all writes will be buffered until .uncork() call\n    this.corked = 0;\n    // a flag to be able to tell if the onwrite cb is called immediately,\n    // or on a later tick.  We set this to true at first, because any\n    // actions that shouldn't happen until \"later\" should generally also\n    // not happen before the first write call.\n    this.sync = true;\n    // a flag to know if we're processing previously buffered items, which\n    // may call the _write() callback in the same tick, so that we don't\n    // end up in an overlapped onwrite situation.\n    this.bufferProcessing = false;\n    // the callback that's passed to _write(chunk,cb)\n    this.onwrite = function(er) {\n        onwrite(stream, er);\n    };\n    // the callback that the user supplies to write(chunk,encoding,cb)\n    this.writecb = null;\n    // the amount that is being written when _write is called.\n    this.writelen = 0;\n    this.bufferedRequest = null;\n    this.lastBufferedRequest = null;\n    // number of pending user-supplied write callbacks\n    // this must be 0 before 'finish' can be emitted\n    this.pendingcb = 0;\n    // emit prefinish if the only thing we're waiting for is _write cbs\n    // This is relevant for synchronous Transform streams\n    this.prefinished = false;\n    // True if the error was already emitted and should not be thrown again\n    this.errorEmitted = false;\n    // count buffered requests\n    this.bufferedRequestCount = 0;\n    // allocate the first CorkedRequest, there is always\n    // one allocated and free to use, and we maintain at most two\n    this.corkedRequestsFree = new CorkedRequest(this);\n}\nWritableState.prototype.getBuffer = function getBuffer() {\n    var current = this.bufferedRequest;\n    var out = [];\n    while(current){\n        out.push(current);\n        current = current.next;\n    }\n    return out;\n};\n(function() {\n    try {\n        Object.defineProperty(WritableState.prototype, \"buffer\", {\n            get: internalUtil.deprecate(function() {\n                return this.getBuffer();\n            }, \"_writableState.buffer is deprecated. Use _writableState.getBuffer \" + \"instead.\", \"DEP0003\")\n        });\n    } catch (_) {}\n})();\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === \"function\" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === \"function\") {\n    realHasInstance = Function.prototype[Symbol.hasInstance];\n    Object.defineProperty(Writable, Symbol.hasInstance, {\n        value: function(object) {\n            if (realHasInstance.call(this, object)) return true;\n            if (this !== Writable) return false;\n            return object && object._writableState instanceof WritableState;\n        }\n    });\n} else {\n    realHasInstance = function(object) {\n        return object instanceof this;\n    };\n}\nfunction Writable(options) {\n    Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_duplex.js\");\n    // Writable ctor is applied to Duplexes, too.\n    // `realHasInstance` is necessary because using plain `instanceof`\n    // would return false, as no `_writableState` property is attached.\n    // Trying to use the custom `instanceof` for Writable here will also break the\n    // Node.js LazyTransform implementation, which has a non-trivial getter for\n    // `_writableState` that would lead to infinite recursion.\n    if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n        return new Writable(options);\n    }\n    this._writableState = new WritableState(options, this);\n    // legacy.\n    this.writable = true;\n    if (options) {\n        if (typeof options.write === \"function\") this._write = options.write;\n        if (typeof options.writev === \"function\") this._writev = options.writev;\n        if (typeof options.destroy === \"function\") this._destroy = options.destroy;\n        if (typeof options.final === \"function\") this._final = options.final;\n    }\n    Stream.call(this);\n}\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n    this.emit(\"error\", new Error(\"Cannot pipe, not readable\"));\n};\nfunction writeAfterEnd(stream, cb) {\n    var er = new Error(\"write after end\");\n    // TODO: defer error events consistently everywhere, not just the cb\n    stream.emit(\"error\", er);\n    pna.nextTick(cb, er);\n}\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n    var valid = true;\n    var er = false;\n    if (chunk === null) {\n        er = new TypeError(\"May not write null values to stream\");\n    } else if (typeof chunk !== \"string\" && chunk !== undefined && !state.objectMode) {\n        er = new TypeError(\"Invalid non-string/buffer chunk\");\n    }\n    if (er) {\n        stream.emit(\"error\", er);\n        pna.nextTick(cb, er);\n        valid = false;\n    }\n    return valid;\n}\nWritable.prototype.write = function(chunk, encoding, cb) {\n    var state = this._writableState;\n    var ret = false;\n    var isBuf = !state.objectMode && _isUint8Array(chunk);\n    if (isBuf && !Buffer.isBuffer(chunk)) {\n        chunk = _uint8ArrayToBuffer(chunk);\n    }\n    if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n    }\n    if (isBuf) encoding = \"buffer\";\n    else if (!encoding) encoding = state.defaultEncoding;\n    if (typeof cb !== \"function\") cb = nop;\n    if (state.ended) writeAfterEnd(this, cb);\n    else if (isBuf || validChunk(this, state, chunk, cb)) {\n        state.pendingcb++;\n        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n    }\n    return ret;\n};\nWritable.prototype.cork = function() {\n    var state = this._writableState;\n    state.corked++;\n};\nWritable.prototype.uncork = function() {\n    var state = this._writableState;\n    if (state.corked) {\n        state.corked--;\n        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n    }\n};\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n    // node::ParseEncoding() requires lower case.\n    if (typeof encoding === \"string\") encoding = encoding.toLowerCase();\n    if (!([\n        \"hex\",\n        \"utf8\",\n        \"utf-8\",\n        \"ascii\",\n        \"binary\",\n        \"base64\",\n        \"ucs2\",\n        \"ucs-2\",\n        \"utf16le\",\n        \"utf-16le\",\n        \"raw\"\n    ].indexOf((encoding + \"\").toLowerCase()) > -1)) throw new TypeError(\"Unknown encoding: \" + encoding);\n    this._writableState.defaultEncoding = encoding;\n    return this;\n};\nfunction decodeChunk(state, chunk, encoding) {\n    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === \"string\") {\n        chunk = Buffer.from(chunk, encoding);\n    }\n    return chunk;\n}\nObject.defineProperty(Writable.prototype, \"writableHighWaterMark\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function() {\n        return this._writableState.highWaterMark;\n    }\n});\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n    if (!isBuf) {\n        var newChunk = decodeChunk(state, chunk, encoding);\n        if (chunk !== newChunk) {\n            isBuf = true;\n            encoding = \"buffer\";\n            chunk = newChunk;\n        }\n    }\n    var len = state.objectMode ? 1 : chunk.length;\n    state.length += len;\n    var ret = state.length < state.highWaterMark;\n    // we must ensure that previous needDrain will not be reset to false.\n    if (!ret) state.needDrain = true;\n    if (state.writing || state.corked) {\n        var last = state.lastBufferedRequest;\n        state.lastBufferedRequest = {\n            chunk: chunk,\n            encoding: encoding,\n            isBuf: isBuf,\n            callback: cb,\n            next: null\n        };\n        if (last) {\n            last.next = state.lastBufferedRequest;\n        } else {\n            state.bufferedRequest = state.lastBufferedRequest;\n        }\n        state.bufferedRequestCount += 1;\n    } else {\n        doWrite(stream, state, false, len, chunk, encoding, cb);\n    }\n    return ret;\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n    state.writelen = len;\n    state.writecb = cb;\n    state.writing = true;\n    state.sync = true;\n    if (writev) stream._writev(chunk, state.onwrite);\n    else stream._write(chunk, encoding, state.onwrite);\n    state.sync = false;\n}\nfunction onwriteError(stream, state, sync, er, cb) {\n    --state.pendingcb;\n    if (sync) {\n        // defer the callback if we are being called synchronously\n        // to avoid piling up things on the stack\n        pna.nextTick(cb, er);\n        // this can emit finish, and it will always happen\n        // after error\n        pna.nextTick(finishMaybe, stream, state);\n        stream._writableState.errorEmitted = true;\n        stream.emit(\"error\", er);\n    } else {\n        // the caller expect this to happen before if\n        // it is async\n        cb(er);\n        stream._writableState.errorEmitted = true;\n        stream.emit(\"error\", er);\n        // this can emit finish, but finish must\n        // always follow error\n        finishMaybe(stream, state);\n    }\n}\nfunction onwriteStateUpdate(state) {\n    state.writing = false;\n    state.writecb = null;\n    state.length -= state.writelen;\n    state.writelen = 0;\n}\nfunction onwrite(stream, er) {\n    var state = stream._writableState;\n    var sync = state.sync;\n    var cb = state.writecb;\n    onwriteStateUpdate(state);\n    if (er) onwriteError(stream, state, sync, er, cb);\n    else {\n        // Check if we're actually ready to finish, but don't emit yet\n        var finished = needFinish(state);\n        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n            clearBuffer(stream, state);\n        }\n        if (sync) {\n            /*<replacement>*/ asyncWrite(afterWrite, stream, state, finished, cb);\n        /*</replacement>*/ } else {\n            afterWrite(stream, state, finished, cb);\n        }\n    }\n}\nfunction afterWrite(stream, state, finished, cb) {\n    if (!finished) onwriteDrain(stream, state);\n    state.pendingcb--;\n    cb();\n    finishMaybe(stream, state);\n}\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n    if (state.length === 0 && state.needDrain) {\n        state.needDrain = false;\n        stream.emit(\"drain\");\n    }\n}\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n    state.bufferProcessing = true;\n    var entry = state.bufferedRequest;\n    if (stream._writev && entry && entry.next) {\n        // Fast case, write everything using _writev()\n        var l = state.bufferedRequestCount;\n        var buffer = new Array(l);\n        var holder = state.corkedRequestsFree;\n        holder.entry = entry;\n        var count = 0;\n        var allBuffers = true;\n        while(entry){\n            buffer[count] = entry;\n            if (!entry.isBuf) allBuffers = false;\n            entry = entry.next;\n            count += 1;\n        }\n        buffer.allBuffers = allBuffers;\n        doWrite(stream, state, true, state.length, buffer, \"\", holder.finish);\n        // doWrite is almost always async, defer these to save a bit of time\n        // as the hot path ends with doWrite\n        state.pendingcb++;\n        state.lastBufferedRequest = null;\n        if (holder.next) {\n            state.corkedRequestsFree = holder.next;\n            holder.next = null;\n        } else {\n            state.corkedRequestsFree = new CorkedRequest(state);\n        }\n        state.bufferedRequestCount = 0;\n    } else {\n        // Slow case, write chunks one-by-one\n        while(entry){\n            var chunk = entry.chunk;\n            var encoding = entry.encoding;\n            var cb = entry.callback;\n            var len = state.objectMode ? 1 : chunk.length;\n            doWrite(stream, state, false, len, chunk, encoding, cb);\n            entry = entry.next;\n            state.bufferedRequestCount--;\n            // if we didn't call the onwrite immediately, then\n            // it means that we need to wait until it does.\n            // also, that means that the chunk and cb are currently\n            // being processed, so move the buffer counter past them.\n            if (state.writing) {\n                break;\n            }\n        }\n        if (entry === null) state.lastBufferedRequest = null;\n    }\n    state.bufferedRequest = entry;\n    state.bufferProcessing = false;\n}\nWritable.prototype._write = function(chunk, encoding, cb) {\n    cb(new Error(\"_write() is not implemented\"));\n};\nWritable.prototype._writev = null;\nWritable.prototype.end = function(chunk, encoding, cb) {\n    var state = this._writableState;\n    if (typeof chunk === \"function\") {\n        cb = chunk;\n        chunk = null;\n        encoding = null;\n    } else if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n    }\n    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n    // .end() fully uncorks\n    if (state.corked) {\n        state.corked = 1;\n        this.uncork();\n    }\n    // ignore unnecessary end() calls.\n    if (!state.ending) endWritable(this, state, cb);\n};\nfunction needFinish(state) {\n    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n    stream._final(function(err) {\n        state.pendingcb--;\n        if (err) {\n            stream.emit(\"error\", err);\n        }\n        state.prefinished = true;\n        stream.emit(\"prefinish\");\n        finishMaybe(stream, state);\n    });\n}\nfunction prefinish(stream, state) {\n    if (!state.prefinished && !state.finalCalled) {\n        if (typeof stream._final === \"function\") {\n            state.pendingcb++;\n            state.finalCalled = true;\n            pna.nextTick(callFinal, stream, state);\n        } else {\n            state.prefinished = true;\n            stream.emit(\"prefinish\");\n        }\n    }\n}\nfunction finishMaybe(stream, state) {\n    var need = needFinish(state);\n    if (need) {\n        prefinish(stream, state);\n        if (state.pendingcb === 0) {\n            state.finished = true;\n            stream.emit(\"finish\");\n        }\n    }\n    return need;\n}\nfunction endWritable(stream, state, cb) {\n    state.ending = true;\n    finishMaybe(stream, state);\n    if (cb) {\n        if (state.finished) pna.nextTick(cb);\n        else stream.once(\"finish\", cb);\n    }\n    state.ended = true;\n    stream.writable = false;\n}\nfunction onCorkedFinish(corkReq, state, err) {\n    var entry = corkReq.entry;\n    corkReq.entry = null;\n    while(entry){\n        var cb = entry.callback;\n        state.pendingcb--;\n        cb(err);\n        entry = entry.next;\n    }\n    // reuse the free corkReq.\n    state.corkedRequestsFree.next = corkReq;\n}\nObject.defineProperty(Writable.prototype, \"destroyed\", {\n    get: function() {\n        if (this._writableState === undefined) {\n            return false;\n        }\n        return this._writableState.destroyed;\n    },\n    set: function(value) {\n        // we ignore the value if the stream\n        // has not been initialized yet\n        if (!this._writableState) {\n            return;\n        }\n        // backward compatibility, the user is explicitly\n        // managing destroyed\n        this._writableState.destroyed = value;\n    }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function(err, cb) {\n    this.end();\n    cb(err);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_writable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/BufferList.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/duplexer2/node_modules/safe-buffer/index.js\").Buffer);\nvar util = __webpack_require__(/*! util */ \"util\");\nfunction copyBuffer(src, target, offset) {\n    src.copy(target, offset);\n}\nmodule.exports = function() {\n    function BufferList() {\n        _classCallCheck(this, BufferList);\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n    }\n    BufferList.prototype.push = function push(v) {\n        var entry = {\n            data: v,\n            next: null\n        };\n        if (this.length > 0) this.tail.next = entry;\n        else this.head = entry;\n        this.tail = entry;\n        ++this.length;\n    };\n    BufferList.prototype.unshift = function unshift(v) {\n        var entry = {\n            data: v,\n            next: this.head\n        };\n        if (this.length === 0) this.tail = entry;\n        this.head = entry;\n        ++this.length;\n    };\n    BufferList.prototype.shift = function shift() {\n        if (this.length === 0) return;\n        var ret = this.head.data;\n        if (this.length === 1) this.head = this.tail = null;\n        else this.head = this.head.next;\n        --this.length;\n        return ret;\n    };\n    BufferList.prototype.clear = function clear() {\n        this.head = this.tail = null;\n        this.length = 0;\n    };\n    BufferList.prototype.join = function join(s) {\n        if (this.length === 0) return \"\";\n        var p = this.head;\n        var ret = \"\" + p.data;\n        while(p = p.next){\n            ret += s + p.data;\n        }\n        return ret;\n    };\n    BufferList.prototype.concat = function concat(n) {\n        if (this.length === 0) return Buffer.alloc(0);\n        var ret = Buffer.allocUnsafe(n >>> 0);\n        var p = this.head;\n        var i = 0;\n        while(p){\n            copyBuffer(p.data, ret, i);\n            i += p.data.length;\n            p = p.next;\n        }\n        return ret;\n    };\n    return BufferList;\n}();\nif (util && util.inspect && util.inspect.custom) {\n    module.exports.prototype[util.inspect.custom] = function() {\n        var obj = util.inspect({\n            length: this.length\n        });\n        return this.constructor.name + \" \" + obj;\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHVwbGV4ZXIyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLFNBQVNBLGdCQUFnQkMsUUFBUSxFQUFFQyxXQUFXO0lBQUksSUFBSSxDQUFFRCxDQUFBQSxvQkFBb0JDLFdBQVUsR0FBSTtRQUFFLE1BQU0sSUFBSUMsVUFBVTtJQUFzQztBQUFFO0FBRXhKLElBQUlDLFNBQVNDLG1IQUE2QjtBQUMxQyxJQUFJQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUVuQixTQUFTRSxXQUFXQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsTUFBTTtJQUNyQ0YsSUFBSUcsSUFBSSxDQUFDRixRQUFRQztBQUNuQjtBQUVBRSxPQUFPQyxPQUFPLEdBQUc7SUFDZixTQUFTQztRQUNQZCxnQkFBZ0IsSUFBSSxFQUFFYztRQUV0QixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxNQUFNLEdBQUc7SUFDaEI7SUFFQUgsV0FBV0ksU0FBUyxDQUFDQyxJQUFJLEdBQUcsU0FBU0EsS0FBS0MsQ0FBQztRQUN6QyxJQUFJQyxRQUFRO1lBQUVDLE1BQU1GO1lBQUdHLE1BQU07UUFBSztRQUNsQyxJQUFJLElBQUksQ0FBQ04sTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDRCxJQUFJLENBQUNPLElBQUksR0FBR0Y7YUFBVyxJQUFJLENBQUNOLElBQUksR0FBR007UUFDN0QsSUFBSSxDQUFDTCxJQUFJLEdBQUdLO1FBQ1osRUFBRSxJQUFJLENBQUNKLE1BQU07SUFDZjtJQUVBSCxXQUFXSSxTQUFTLENBQUNNLE9BQU8sR0FBRyxTQUFTQSxRQUFRSixDQUFDO1FBQy9DLElBQUlDLFFBQVE7WUFBRUMsTUFBTUY7WUFBR0csTUFBTSxJQUFJLENBQUNSLElBQUk7UUFBQztRQUN2QyxJQUFJLElBQUksQ0FBQ0UsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDRCxJQUFJLEdBQUdLO1FBQ25DLElBQUksQ0FBQ04sSUFBSSxHQUFHTTtRQUNaLEVBQUUsSUFBSSxDQUFDSixNQUFNO0lBQ2Y7SUFFQUgsV0FBV0ksU0FBUyxDQUFDTyxLQUFLLEdBQUcsU0FBU0E7UUFDcEMsSUFBSSxJQUFJLENBQUNSLE1BQU0sS0FBSyxHQUFHO1FBQ3ZCLElBQUlTLE1BQU0sSUFBSSxDQUFDWCxJQUFJLENBQUNPLElBQUk7UUFDeEIsSUFBSSxJQUFJLENBQUNMLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQ0YsSUFBSSxHQUFHLElBQUksQ0FBQ0MsSUFBSSxHQUFHO2FBQVUsSUFBSSxDQUFDRCxJQUFJLEdBQUcsSUFBSSxDQUFDQSxJQUFJLENBQUNRLElBQUk7UUFDbkYsRUFBRSxJQUFJLENBQUNOLE1BQU07UUFDYixPQUFPUztJQUNUO0lBRUFaLFdBQVdJLFNBQVMsQ0FBQ1MsS0FBSyxHQUFHLFNBQVNBO1FBQ3BDLElBQUksQ0FBQ1osSUFBSSxHQUFHLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ3hCLElBQUksQ0FBQ0MsTUFBTSxHQUFHO0lBQ2hCO0lBRUFILFdBQVdJLFNBQVMsQ0FBQ1UsSUFBSSxHQUFHLFNBQVNBLEtBQUtDLENBQUM7UUFDekMsSUFBSSxJQUFJLENBQUNaLE1BQU0sS0FBSyxHQUFHLE9BQU87UUFDOUIsSUFBSWEsSUFBSSxJQUFJLENBQUNmLElBQUk7UUFDakIsSUFBSVcsTUFBTSxLQUFLSSxFQUFFUixJQUFJO1FBQ3JCLE1BQU9RLElBQUlBLEVBQUVQLElBQUksQ0FBRTtZQUNqQkcsT0FBT0csSUFBSUMsRUFBRVIsSUFBSTtRQUNuQjtRQUFDLE9BQU9JO0lBQ1Y7SUFFQVosV0FBV0ksU0FBUyxDQUFDYSxNQUFNLEdBQUcsU0FBU0EsT0FBT0MsQ0FBQztRQUM3QyxJQUFJLElBQUksQ0FBQ2YsTUFBTSxLQUFLLEdBQUcsT0FBT2IsT0FBTzZCLEtBQUssQ0FBQztRQUMzQyxJQUFJUCxNQUFNdEIsT0FBTzhCLFdBQVcsQ0FBQ0YsTUFBTTtRQUNuQyxJQUFJRixJQUFJLElBQUksQ0FBQ2YsSUFBSTtRQUNqQixJQUFJb0IsSUFBSTtRQUNSLE1BQU9MLEVBQUc7WUFDUnZCLFdBQVd1QixFQUFFUixJQUFJLEVBQUVJLEtBQUtTO1lBQ3hCQSxLQUFLTCxFQUFFUixJQUFJLENBQUNMLE1BQU07WUFDbEJhLElBQUlBLEVBQUVQLElBQUk7UUFDWjtRQUNBLE9BQU9HO0lBQ1Q7SUFFQSxPQUFPWjtBQUNUO0FBRUEsSUFBSVIsUUFBUUEsS0FBSzhCLE9BQU8sSUFBSTlCLEtBQUs4QixPQUFPLENBQUNDLE1BQU0sRUFBRTtJQUMvQ3pCLE9BQU9DLE9BQU8sQ0FBQ0ssU0FBUyxDQUFDWixLQUFLOEIsT0FBTyxDQUFDQyxNQUFNLENBQUMsR0FBRztRQUM5QyxJQUFJQyxNQUFNaEMsS0FBSzhCLE9BQU8sQ0FBQztZQUFFbkIsUUFBUSxJQUFJLENBQUNBLE1BQU07UUFBQztRQUM3QyxPQUFPLElBQUksQ0FBQ3NCLFdBQVcsQ0FBQ0MsSUFBSSxHQUFHLE1BQU1GO0lBQ3ZDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZC10aW1lc2hlZXQtYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvZHVwbGV4ZXIyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdC5qcz8zNmU4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7XG5cbmlmICh1dGlsICYmIHV0aWwuaW5zcGVjdCAmJiB1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2JqID0gdXRpbC5pbnNwZWN0KHsgbGVuZ3RoOiB0aGlzLmxlbmd0aCB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnICsgb2JqO1xuICB9O1xufSJdLCJuYW1lcyI6WyJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiQnVmZmVyIiwicmVxdWlyZSIsInV0aWwiLCJjb3B5QnVmZmVyIiwic3JjIiwidGFyZ2V0Iiwib2Zmc2V0IiwiY29weSIsIm1vZHVsZSIsImV4cG9ydHMiLCJCdWZmZXJMaXN0IiwiaGVhZCIsInRhaWwiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJwdXNoIiwidiIsImVudHJ5IiwiZGF0YSIsIm5leHQiLCJ1bnNoaWZ0Iiwic2hpZnQiLCJyZXQiLCJjbGVhciIsImpvaW4iLCJzIiwicCIsImNvbmNhdCIsIm4iLCJhbGxvYyIsImFsbG9jVW5zYWZlIiwiaSIsImluc3BlY3QiLCJjdXN0b20iLCJvYmoiLCJjb25zdHJ1Y3RvciIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/BufferList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*<replacement>*/ var pna = __webpack_require__(/*! process-nextick-args */ \"(ssr)/./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/ // undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n    var _this = this;\n    var readableDestroyed = this._readableState && this._readableState.destroyed;\n    var writableDestroyed = this._writableState && this._writableState.destroyed;\n    if (readableDestroyed || writableDestroyed) {\n        if (cb) {\n            cb(err);\n        } else if (err) {\n            if (!this._writableState) {\n                pna.nextTick(emitErrorNT, this, err);\n            } else if (!this._writableState.errorEmitted) {\n                this._writableState.errorEmitted = true;\n                pna.nextTick(emitErrorNT, this, err);\n            }\n        }\n        return this;\n    }\n    // we set destroyed to true before firing error callbacks in order\n    // to make it re-entrance safe in case destroy() is called within callbacks\n    if (this._readableState) {\n        this._readableState.destroyed = true;\n    }\n    // if this is a duplex stream mark the writable part as destroyed as well\n    if (this._writableState) {\n        this._writableState.destroyed = true;\n    }\n    this._destroy(err || null, function(err) {\n        if (!cb && err) {\n            if (!_this._writableState) {\n                pna.nextTick(emitErrorNT, _this, err);\n            } else if (!_this._writableState.errorEmitted) {\n                _this._writableState.errorEmitted = true;\n                pna.nextTick(emitErrorNT, _this, err);\n            }\n        } else if (cb) {\n            cb(err);\n        }\n    });\n    return this;\n}\nfunction undestroy() {\n    if (this._readableState) {\n        this._readableState.destroyed = false;\n        this._readableState.reading = false;\n        this._readableState.ended = false;\n        this._readableState.endEmitted = false;\n    }\n    if (this._writableState) {\n        this._writableState.destroyed = false;\n        this._writableState.ended = false;\n        this._writableState.ending = false;\n        this._writableState.finalCalled = false;\n        this._writableState.prefinished = false;\n        this._writableState.finished = false;\n        this._writableState.errorEmitted = false;\n    }\n}\nfunction emitErrorNT(self, err) {\n    self.emit(\"error\", err);\n}\nmodule.exports = {\n    destroy: destroy,\n    undestroy: undestroy\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHVwbGV4ZXIyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLGVBQWUsR0FFZixJQUFJQSxNQUFNQyxtQkFBT0EsQ0FBQztBQUNsQixnQkFBZ0IsR0FFaEIsNkRBQTZEO0FBQzdELFNBQVNDLFFBQVFDLEdBQUcsRUFBRUMsRUFBRTtJQUN0QixJQUFJQyxRQUFRLElBQUk7SUFFaEIsSUFBSUMsb0JBQW9CLElBQUksQ0FBQ0MsY0FBYyxJQUFJLElBQUksQ0FBQ0EsY0FBYyxDQUFDQyxTQUFTO0lBQzVFLElBQUlDLG9CQUFvQixJQUFJLENBQUNDLGNBQWMsSUFBSSxJQUFJLENBQUNBLGNBQWMsQ0FBQ0YsU0FBUztJQUU1RSxJQUFJRixxQkFBcUJHLG1CQUFtQjtRQUMxQyxJQUFJTCxJQUFJO1lBQ05BLEdBQUdEO1FBQ0wsT0FBTyxJQUFJQSxLQUFLO1lBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQ08sY0FBYyxFQUFFO2dCQUN4QlYsSUFBSVcsUUFBUSxDQUFDQyxhQUFhLElBQUksRUFBRVQ7WUFDbEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDTyxjQUFjLENBQUNHLFlBQVksRUFBRTtnQkFDNUMsSUFBSSxDQUFDSCxjQUFjLENBQUNHLFlBQVksR0FBRztnQkFDbkNiLElBQUlXLFFBQVEsQ0FBQ0MsYUFBYSxJQUFJLEVBQUVUO1lBQ2xDO1FBQ0Y7UUFFQSxPQUFPLElBQUk7SUFDYjtJQUVBLGtFQUFrRTtJQUNsRSwyRUFBMkU7SUFFM0UsSUFBSSxJQUFJLENBQUNJLGNBQWMsRUFBRTtRQUN2QixJQUFJLENBQUNBLGNBQWMsQ0FBQ0MsU0FBUyxHQUFHO0lBQ2xDO0lBRUEseUVBQXlFO0lBQ3pFLElBQUksSUFBSSxDQUFDRSxjQUFjLEVBQUU7UUFDdkIsSUFBSSxDQUFDQSxjQUFjLENBQUNGLFNBQVMsR0FBRztJQUNsQztJQUVBLElBQUksQ0FBQ00sUUFBUSxDQUFDWCxPQUFPLE1BQU0sU0FBVUEsR0FBRztRQUN0QyxJQUFJLENBQUNDLE1BQU1ELEtBQUs7WUFDZCxJQUFJLENBQUNFLE1BQU1LLGNBQWMsRUFBRTtnQkFDekJWLElBQUlXLFFBQVEsQ0FBQ0MsYUFBYVAsT0FBT0Y7WUFDbkMsT0FBTyxJQUFJLENBQUNFLE1BQU1LLGNBQWMsQ0FBQ0csWUFBWSxFQUFFO2dCQUM3Q1IsTUFBTUssY0FBYyxDQUFDRyxZQUFZLEdBQUc7Z0JBQ3BDYixJQUFJVyxRQUFRLENBQUNDLGFBQWFQLE9BQU9GO1lBQ25DO1FBQ0YsT0FBTyxJQUFJQyxJQUFJO1lBQ2JBLEdBQUdEO1FBQ0w7SUFDRjtJQUVBLE9BQU8sSUFBSTtBQUNiO0FBRUEsU0FBU1k7SUFDUCxJQUFJLElBQUksQ0FBQ1IsY0FBYyxFQUFFO1FBQ3ZCLElBQUksQ0FBQ0EsY0FBYyxDQUFDQyxTQUFTLEdBQUc7UUFDaEMsSUFBSSxDQUFDRCxjQUFjLENBQUNTLE9BQU8sR0FBRztRQUM5QixJQUFJLENBQUNULGNBQWMsQ0FBQ1UsS0FBSyxHQUFHO1FBQzVCLElBQUksQ0FBQ1YsY0FBYyxDQUFDVyxVQUFVLEdBQUc7SUFDbkM7SUFFQSxJQUFJLElBQUksQ0FBQ1IsY0FBYyxFQUFFO1FBQ3ZCLElBQUksQ0FBQ0EsY0FBYyxDQUFDRixTQUFTLEdBQUc7UUFDaEMsSUFBSSxDQUFDRSxjQUFjLENBQUNPLEtBQUssR0FBRztRQUM1QixJQUFJLENBQUNQLGNBQWMsQ0FBQ1MsTUFBTSxHQUFHO1FBQzdCLElBQUksQ0FBQ1QsY0FBYyxDQUFDVSxXQUFXLEdBQUc7UUFDbEMsSUFBSSxDQUFDVixjQUFjLENBQUNXLFdBQVcsR0FBRztRQUNsQyxJQUFJLENBQUNYLGNBQWMsQ0FBQ1ksUUFBUSxHQUFHO1FBQy9CLElBQUksQ0FBQ1osY0FBYyxDQUFDRyxZQUFZLEdBQUc7SUFDckM7QUFDRjtBQUVBLFNBQVNELFlBQVlXLElBQUksRUFBRXBCLEdBQUc7SUFDNUJvQixLQUFLQyxJQUFJLENBQUMsU0FBU3JCO0FBQ3JCO0FBRUFzQixPQUFPQyxPQUFPLEdBQUc7SUFDZnhCLFNBQVNBO0lBQ1RhLFdBQVdBO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZC10aW1lc2hlZXQtYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvZHVwbGV4ZXIyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcz9kOTM5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLy8gdW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSVxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcblxuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIpIHtcbiAgICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkge1xuICAgICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIGlmICghX3RoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCBfdGhpcywgZXJyKTtcbiAgICAgIH0gZWxzZSBpZiAoIV90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIF90aGlzLCBlcnIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdW5kZXN0cm95KCkge1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluYWxDYWxsZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLnByZWZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcbn07Il0sIm5hbWVzIjpbInBuYSIsInJlcXVpcmUiLCJkZXN0cm95IiwiZXJyIiwiY2IiLCJfdGhpcyIsInJlYWRhYmxlRGVzdHJveWVkIiwiX3JlYWRhYmxlU3RhdGUiLCJkZXN0cm95ZWQiLCJ3cml0YWJsZURlc3Ryb3llZCIsIl93cml0YWJsZVN0YXRlIiwibmV4dFRpY2siLCJlbWl0RXJyb3JOVCIsImVycm9yRW1pdHRlZCIsIl9kZXN0cm95IiwidW5kZXN0cm95IiwicmVhZGluZyIsImVuZGVkIiwiZW5kRW1pdHRlZCIsImVuZGluZyIsImZpbmFsQ2FsbGVkIiwicHJlZmluaXNoZWQiLCJmaW5pc2hlZCIsInNlbGYiLCJlbWl0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/destroy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/stream.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/stream.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! stream */ \"stream\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHVwbGV4ZXIyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBQSw0REFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZC10aW1lc2hlZXQtYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvZHVwbGV4ZXIyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLmpzPzhkZDEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdzdHJlYW0nKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/internal/streams/stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/duplexer2/node_modules/readable-stream/readable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/duplexer2/node_modules/readable-stream/readable.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var Stream = __webpack_require__(/*! stream */ \"stream\");\nif (process.env.READABLE_STREAM === \"disable\" && Stream) {\n    module.exports = Stream;\n    exports = module.exports = Stream.Readable;\n    exports.Readable = Stream.Readable;\n    exports.Writable = Stream.Writable;\n    exports.Duplex = Stream.Duplex;\n    exports.Transform = Stream.Transform;\n    exports.PassThrough = Stream.PassThrough;\n    exports.Stream = Stream;\n} else {\n    exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_readable.js\");\n    exports.Stream = Stream || exports;\n    exports.Readable = exports;\n    exports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_writable.js\");\n    exports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_duplex.js\");\n    exports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_transform.js\");\n    exports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ \"(ssr)/./node_modules/duplexer2/node_modules/readable-stream/lib/_stream_passthrough.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHVwbGV4ZXIyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsUUFBUUMsR0FBRyxDQUFDQyxlQUFlLEtBQUssYUFBYUosUUFBUTtJQUN2REssT0FBT0MsT0FBTyxHQUFHTjtJQUNqQk0sVUFBVUQsT0FBT0MsT0FBTyxHQUFHTixPQUFPTyxRQUFRO0lBQzFDRCxnQkFBZ0IsR0FBR04sT0FBT08sUUFBUTtJQUNsQ0QsZ0JBQWdCLEdBQUdOLE9BQU9RLFFBQVE7SUFDbENGLGNBQWMsR0FBR04sT0FBT1MsTUFBTTtJQUM5QkgsaUJBQWlCLEdBQUdOLE9BQU9VLFNBQVM7SUFDcENKLG1CQUFtQixHQUFHTixPQUFPVyxXQUFXO0lBQ3hDTCxjQUFjLEdBQUdOO0FBQ25CLE9BQU87SUFDTE0sVUFBVUQsNEpBQXlCO0lBQ25DQyxjQUFjLEdBQUdOLFVBQVVNO0lBQzNCQSxnQkFBZ0IsR0FBR0E7SUFDbkJBLDhKQUEyQjtJQUMzQkEsd0pBQXlCO0lBQ3pCQSxpS0FBNEI7SUFDNUJBLHVLQUE4QjtBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NkLXRpbWVzaGVldC1hbmFseXplci8uL25vZGVfbW9kdWxlcy9kdXBsZXhlcjIvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcz85ZDI2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbmlmIChwcm9jZXNzLmVudi5SRUFEQUJMRV9TVFJFQU0gPT09ICdkaXNhYmxlJyAmJiBTdHJlYW0pIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG4gIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IFN0cmVhbS5SZWFkYWJsZTtcbiAgZXhwb3J0cy5SZWFkYWJsZSA9IFN0cmVhbS5SZWFkYWJsZTtcbiAgZXhwb3J0cy5Xcml0YWJsZSA9IFN0cmVhbS5Xcml0YWJsZTtcbiAgZXhwb3J0cy5EdXBsZXggPSBTdHJlYW0uRHVwbGV4O1xuICBleHBvcnRzLlRyYW5zZm9ybSA9IFN0cmVhbS5UcmFuc2Zvcm07XG4gIGV4cG9ydHMuUGFzc1Rocm91Z2ggPSBTdHJlYW0uUGFzc1Rocm91Z2g7XG4gIGV4cG9ydHMuU3RyZWFtID0gU3RyZWFtO1xufSBlbHNlIHtcbiAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuICBleHBvcnRzLlN0cmVhbSA9IFN0cmVhbSB8fCBleHBvcnRzO1xuICBleHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbiAgZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbiAgZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuICBleHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG4gIGV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG59XG4iXSwibmFtZXMiOlsiU3RyZWFtIiwicmVxdWlyZSIsInByb2Nlc3MiLCJlbnYiLCJSRUFEQUJMRV9TVFJFQU0iLCJtb2R1bGUiLCJleHBvcnRzIiwiUmVhZGFibGUiLCJXcml0YWJsZSIsIkR1cGxleCIsIlRyYW5zZm9ybSIsIlBhc3NUaHJvdWdoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/duplexer2/node_modules/readable-stream/readable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/duplexer2/node_modules/safe-buffer/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/duplexer2/node_modules/safe-buffer/index.js ***!
  \******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* eslint-disable node/no-deprecated-api */ var buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar Buffer = buffer.Buffer;\n// alternative to using Object.keys for old browsers\nfunction copyProps(src, dst) {\n    for(var key in src){\n        dst[key] = src[key];\n    }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n    module.exports = buffer;\n} else {\n    // Copy properties from require('buffer')\n    copyProps(buffer, exports);\n    exports.Buffer = SafeBuffer;\n}\nfunction SafeBuffer(arg, encodingOrOffset, length) {\n    return Buffer(arg, encodingOrOffset, length);\n}\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer);\nSafeBuffer.from = function(arg, encodingOrOffset, length) {\n    if (typeof arg === \"number\") {\n        throw new TypeError(\"Argument must not be a number\");\n    }\n    return Buffer(arg, encodingOrOffset, length);\n};\nSafeBuffer.alloc = function(size, fill, encoding) {\n    if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n    }\n    var buf = Buffer(size);\n    if (fill !== undefined) {\n        if (typeof encoding === \"string\") {\n            buf.fill(fill, encoding);\n        } else {\n            buf.fill(fill);\n        }\n    } else {\n        buf.fill(0);\n    }\n    return buf;\n};\nSafeBuffer.allocUnsafe = function(size) {\n    if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n    }\n    return Buffer(size);\n};\nSafeBuffer.allocUnsafeSlow = function(size) {\n    if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n    }\n    return buffer.SlowBuffer(size);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHVwbGV4ZXIyL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSx5Q0FBeUMsR0FDekMsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsU0FBU0YsT0FBT0UsTUFBTTtBQUUxQixvREFBb0Q7QUFDcEQsU0FBU0MsVUFBV0MsR0FBRyxFQUFFQyxHQUFHO0lBQzFCLElBQUssSUFBSUMsT0FBT0YsSUFBSztRQUNuQkMsR0FBRyxDQUFDQyxJQUFJLEdBQUdGLEdBQUcsQ0FBQ0UsSUFBSTtJQUNyQjtBQUNGO0FBQ0EsSUFBSUosT0FBT0ssSUFBSSxJQUFJTCxPQUFPTSxLQUFLLElBQUlOLE9BQU9PLFdBQVcsSUFBSVAsT0FBT1EsZUFBZSxFQUFFO0lBQy9FQyxPQUFPQyxPQUFPLEdBQUdaO0FBQ25CLE9BQU87SUFDTCx5Q0FBeUM7SUFDekNHLFVBQVVILFFBQVFZO0lBQ2xCQSxjQUFjLEdBQUdDO0FBQ25CO0FBRUEsU0FBU0EsV0FBWUMsR0FBRyxFQUFFQyxnQkFBZ0IsRUFBRUMsTUFBTTtJQUNoRCxPQUFPZCxPQUFPWSxLQUFLQyxrQkFBa0JDO0FBQ3ZDO0FBRUEsa0NBQWtDO0FBQ2xDYixVQUFVRCxRQUFRVztBQUVsQkEsV0FBV04sSUFBSSxHQUFHLFNBQVVPLEdBQUcsRUFBRUMsZ0JBQWdCLEVBQUVDLE1BQU07SUFDdkQsSUFBSSxPQUFPRixRQUFRLFVBQVU7UUFDM0IsTUFBTSxJQUFJRyxVQUFVO0lBQ3RCO0lBQ0EsT0FBT2YsT0FBT1ksS0FBS0Msa0JBQWtCQztBQUN2QztBQUVBSCxXQUFXTCxLQUFLLEdBQUcsU0FBVVUsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLFFBQVE7SUFDL0MsSUFBSSxPQUFPRixTQUFTLFVBQVU7UUFDNUIsTUFBTSxJQUFJRCxVQUFVO0lBQ3RCO0lBQ0EsSUFBSUksTUFBTW5CLE9BQU9nQjtJQUNqQixJQUFJQyxTQUFTRyxXQUFXO1FBQ3RCLElBQUksT0FBT0YsYUFBYSxVQUFVO1lBQ2hDQyxJQUFJRixJQUFJLENBQUNBLE1BQU1DO1FBQ2pCLE9BQU87WUFDTEMsSUFBSUYsSUFBSSxDQUFDQTtRQUNYO0lBQ0YsT0FBTztRQUNMRSxJQUFJRixJQUFJLENBQUM7SUFDWDtJQUNBLE9BQU9FO0FBQ1Q7QUFFQVIsV0FBV0osV0FBVyxHQUFHLFNBQVVTLElBQUk7SUFDckMsSUFBSSxPQUFPQSxTQUFTLFVBQVU7UUFDNUIsTUFBTSxJQUFJRCxVQUFVO0lBQ3RCO0lBQ0EsT0FBT2YsT0FBT2dCO0FBQ2hCO0FBRUFMLFdBQVdILGVBQWUsR0FBRyxTQUFVUSxJQUFJO0lBQ3pDLElBQUksT0FBT0EsU0FBUyxVQUFVO1FBQzVCLE1BQU0sSUFBSUQsVUFBVTtJQUN0QjtJQUNBLE9BQU9qQixPQUFPdUIsVUFBVSxDQUFDTDtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2NkLXRpbWVzaGVldC1hbmFseXplci8uL25vZGVfbW9kdWxlcy9kdXBsZXhlcjIvbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzP2EwYTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cbiJdLCJuYW1lcyI6WyJidWZmZXIiLCJyZXF1aXJlIiwiQnVmZmVyIiwiY29weVByb3BzIiwic3JjIiwiZHN0Iiwia2V5IiwiZnJvbSIsImFsbG9jIiwiYWxsb2NVbnNhZmUiLCJhbGxvY1Vuc2FmZVNsb3ciLCJtb2R1bGUiLCJleHBvcnRzIiwiU2FmZUJ1ZmZlciIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJsZW5ndGgiLCJUeXBlRXJyb3IiLCJzaXplIiwiZmlsbCIsImVuY29kaW5nIiwiYnVmIiwidW5kZWZpbmVkIiwiU2xvd0J1ZmZlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/duplexer2/node_modules/safe-buffer/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/duplexer2/node_modules/string_decoder/lib/string_decoder.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/duplexer2/node_modules/string_decoder/lib/string_decoder.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*<replacement>*/ var Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/duplexer2/node_modules/safe-buffer/index.js\").Buffer);\n/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {\n    encoding = \"\" + encoding;\n    switch(encoding && encoding.toLowerCase()){\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n        case \"raw\":\n            return true;\n        default:\n            return false;\n    }\n};\nfunction _normalizeEncoding(enc) {\n    if (!enc) return \"utf8\";\n    var retried;\n    while(true){\n        switch(enc){\n            case \"utf8\":\n            case \"utf-8\":\n                return \"utf8\";\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return \"utf16le\";\n            case \"latin1\":\n            case \"binary\":\n                return \"latin1\";\n            case \"base64\":\n            case \"ascii\":\n            case \"hex\":\n                return enc;\n            default:\n                if (retried) return; // undefined\n                enc = (\"\" + enc).toLowerCase();\n                retried = true;\n        }\n    }\n}\n;\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n    var nenc = _normalizeEncoding(enc);\n    if (typeof nenc !== \"string\" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error(\"Unknown encoding: \" + enc);\n    return nenc || enc;\n}\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n    this.encoding = normalizeEncoding(encoding);\n    var nb;\n    switch(this.encoding){\n        case \"utf16le\":\n            this.text = utf16Text;\n            this.end = utf16End;\n            nb = 4;\n            break;\n        case \"utf8\":\n            this.fillLast = utf8FillLast;\n            nb = 4;\n            break;\n        case \"base64\":\n            this.text = base64Text;\n            this.end = base64End;\n            nb = 3;\n            break;\n        default:\n            this.write = simpleWrite;\n            this.end = simpleEnd;\n            return;\n    }\n    this.lastNeed = 0;\n    this.lastTotal = 0;\n    this.lastChar = Buffer.allocUnsafe(nb);\n}\nStringDecoder.prototype.write = function(buf) {\n    if (buf.length === 0) return \"\";\n    var r;\n    var i;\n    if (this.lastNeed) {\n        r = this.fillLast(buf);\n        if (r === undefined) return \"\";\n        i = this.lastNeed;\n        this.lastNeed = 0;\n    } else {\n        i = 0;\n    }\n    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n    return r || \"\";\n};\nStringDecoder.prototype.end = utf8End;\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function(buf) {\n    if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n    }\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n    this.lastNeed -= buf.length;\n};\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n    if (byte <= 0x7F) return 0;\n    else if (byte >> 5 === 0x06) return 2;\n    else if (byte >> 4 === 0x0E) return 3;\n    else if (byte >> 3 === 0x1E) return 4;\n    return byte >> 6 === 0x02 ? -1 : -2;\n}\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n    var j = buf.length - 1;\n    if (j < i) return 0;\n    var nb = utf8CheckByte(buf[j]);\n    if (nb >= 0) {\n        if (nb > 0) self.lastNeed = nb - 1;\n        return nb;\n    }\n    if (--j < i || nb === -2) return 0;\n    nb = utf8CheckByte(buf[j]);\n    if (nb >= 0) {\n        if (nb > 0) self.lastNeed = nb - 2;\n        return nb;\n    }\n    if (--j < i || nb === -2) return 0;\n    nb = utf8CheckByte(buf[j]);\n    if (nb >= 0) {\n        if (nb > 0) {\n            if (nb === 2) nb = 0;\n            else self.lastNeed = nb - 3;\n        }\n        return nb;\n    }\n    return 0;\n}\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n    if ((buf[0] & 0xC0) !== 0x80) {\n        self.lastNeed = 0;\n        return \"�\";\n    }\n    if (self.lastNeed > 1 && buf.length > 1) {\n        if ((buf[1] & 0xC0) !== 0x80) {\n            self.lastNeed = 1;\n            return \"�\";\n        }\n        if (self.lastNeed > 2 && buf.length > 2) {\n            if ((buf[2] & 0xC0) !== 0x80) {\n                self.lastNeed = 2;\n                return \"�\";\n            }\n        }\n    }\n}\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n    var p = this.lastTotal - this.lastNeed;\n    var r = utf8CheckExtraBytes(this, buf, p);\n    if (r !== undefined) return r;\n    if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, p, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n    }\n    buf.copy(this.lastChar, p, 0, buf.length);\n    this.lastNeed -= buf.length;\n}\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n    var total = utf8CheckIncomplete(this, buf, i);\n    if (!this.lastNeed) return buf.toString(\"utf8\", i);\n    this.lastTotal = total;\n    var end = buf.length - (total - this.lastNeed);\n    buf.copy(this.lastChar, 0, end);\n    return buf.toString(\"utf8\", i, end);\n}\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n    var r = buf && buf.length ? this.write(buf) : \"\";\n    if (this.lastNeed) return r + \"�\";\n    return r;\n}\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n    if ((buf.length - i) % 2 === 0) {\n        var r = buf.toString(\"utf16le\", i);\n        if (r) {\n            var c = r.charCodeAt(r.length - 1);\n            if (c >= 0xD800 && c <= 0xDBFF) {\n                this.lastNeed = 2;\n                this.lastTotal = 4;\n                this.lastChar[0] = buf[buf.length - 2];\n                this.lastChar[1] = buf[buf.length - 1];\n                return r.slice(0, -1);\n            }\n        }\n        return r;\n    }\n    this.lastNeed = 1;\n    this.lastTotal = 2;\n    this.lastChar[0] = buf[buf.length - 1];\n    return buf.toString(\"utf16le\", i, buf.length - 1);\n}\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n    var r = buf && buf.length ? this.write(buf) : \"\";\n    if (this.lastNeed) {\n        var end = this.lastTotal - this.lastNeed;\n        return r + this.lastChar.toString(\"utf16le\", 0, end);\n    }\n    return r;\n}\nfunction base64Text(buf, i) {\n    var n = (buf.length - i) % 3;\n    if (n === 0) return buf.toString(\"base64\", i);\n    this.lastNeed = 3 - n;\n    this.lastTotal = 3;\n    if (n === 1) {\n        this.lastChar[0] = buf[buf.length - 1];\n    } else {\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n    }\n    return buf.toString(\"base64\", i, buf.length - n);\n}\nfunction base64End(buf) {\n    var r = buf && buf.length ? this.write(buf) : \"\";\n    if (this.lastNeed) return r + this.lastChar.toString(\"base64\", 0, 3 - this.lastNeed);\n    return r;\n}\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n    return buf.toString(this.encoding);\n}\nfunction simpleEnd(buf) {\n    return buf && buf.length ? this.write(buf) : \"\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/duplexer2/node_modules/string_decoder/lib/string_decoder.js\n");

/***/ })

};
;