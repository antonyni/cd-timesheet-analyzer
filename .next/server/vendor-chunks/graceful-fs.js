/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graceful-fs";
exports.ids = ["vendor-chunks/graceful-fs"];
exports.modules = {

/***/ "(ssr)/./node_modules/graceful-fs/clone.js":
/*!*******************************************!*\
  !*** ./node_modules/graceful-fs/clone.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = clone;\nvar getPrototypeOf = Object.getPrototypeOf || function(obj) {\n    return obj.__proto__;\n};\nfunction clone(obj) {\n    if (obj === null || typeof obj !== \"object\") return obj;\n    if (obj instanceof Object) var copy = {\n        __proto__: getPrototypeOf(obj)\n    };\n    else var copy = Object.create(null);\n    Object.getOwnPropertyNames(obj).forEach(function(key) {\n        Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));\n    });\n    return copy;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhY2VmdWwtZnMvY2xvbmUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixJQUFJQyxpQkFBaUJDLE9BQU9ELGNBQWMsSUFBSSxTQUFVRSxHQUFHO0lBQ3pELE9BQU9BLElBQUlDLFNBQVM7QUFDdEI7QUFFQSxTQUFTSixNQUFPRyxHQUFHO0lBQ2pCLElBQUlBLFFBQVEsUUFBUSxPQUFPQSxRQUFRLFVBQ2pDLE9BQU9BO0lBRVQsSUFBSUEsZUFBZUQsUUFDakIsSUFBSUcsT0FBTztRQUFFRCxXQUFXSCxlQUFlRTtJQUFLO1NBRTVDLElBQUlFLE9BQU9ILE9BQU9JLE1BQU0sQ0FBQztJQUUzQkosT0FBT0ssbUJBQW1CLENBQUNKLEtBQUtLLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1FBQ25EUCxPQUFPUSxjQUFjLENBQUNMLE1BQU1JLEtBQUtQLE9BQU9TLHdCQUF3QixDQUFDUixLQUFLTTtJQUN4RTtJQUVBLE9BQU9KO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZC10aW1lc2hlZXQtYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvZ3JhY2VmdWwtZnMvY2xvbmUuanM/NjAwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVxuXG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqLl9fcHJvdG9fX1xufVxuXG5mdW5jdGlvbiBjbG9uZSAob2JqKSB7XG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpXG4gICAgcmV0dXJuIG9ialxuXG4gIGlmIChvYmogaW5zdGFuY2VvZiBPYmplY3QpXG4gICAgdmFyIGNvcHkgPSB7IF9fcHJvdG9fXzogZ2V0UHJvdG90eXBlT2Yob2JqKSB9XG4gIGVsc2VcbiAgICB2YXIgY29weSA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb3B5LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpKVxuICB9KVxuXG4gIHJldHVybiBjb3B5XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNsb25lIiwiZ2V0UHJvdG90eXBlT2YiLCJPYmplY3QiLCJvYmoiLCJfX3Byb3RvX18iLCJjb3B5IiwiY3JlYXRlIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZvckVhY2giLCJrZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graceful-fs/clone.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graceful-fs/graceful-fs.js":
/*!*************************************************!*\
  !*** ./node_modules/graceful-fs/graceful-fs.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\");\nvar polyfills = __webpack_require__(/*! ./polyfills.js */ \"(ssr)/./node_modules/graceful-fs/polyfills.js\");\nvar legacy = __webpack_require__(/*! ./legacy-streams.js */ \"(ssr)/./node_modules/graceful-fs/legacy-streams.js\");\nvar clone = __webpack_require__(/*! ./clone.js */ \"(ssr)/./node_modules/graceful-fs/clone.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\n/* istanbul ignore next - node 0.x polyfill */ var gracefulQueue;\nvar previousSymbol;\n/* istanbul ignore else - node 0.x polyfill */ if (typeof Symbol === \"function\" && typeof Symbol.for === \"function\") {\n    gracefulQueue = Symbol.for(\"graceful-fs.queue\");\n    // This is used in testing by future versions\n    previousSymbol = Symbol.for(\"graceful-fs.previous\");\n} else {\n    gracefulQueue = \"___graceful-fs.queue\";\n    previousSymbol = \"___graceful-fs.previous\";\n}\nfunction noop() {}\nfunction publishQueue(context, queue) {\n    Object.defineProperty(context, gracefulQueue, {\n        get: function() {\n            return queue;\n        }\n    });\n}\nvar debug = noop;\nif (util.debuglog) debug = util.debuglog(\"gfs4\");\nelse if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || \"\")) debug = function() {\n    var m = util.format.apply(util, arguments);\n    m = \"GFS4: \" + m.split(/\\n/).join(\"\\nGFS4: \");\n    console.error(m);\n};\n// Once time initialization\nif (!fs[gracefulQueue]) {\n    // This queue can be shared by multiple loaded instances\n    var queue = global[gracefulQueue] || [];\n    publishQueue(fs, queue);\n    // Patch fs.close/closeSync to shared queue version, because we need\n    // to retry() whenever a close happens *anywhere* in the program.\n    // This is essential when multiple graceful-fs instances are\n    // in play at the same time.\n    fs.close = function(fs$close) {\n        function close(fd, cb) {\n            return fs$close.call(fs, fd, function(err) {\n                // This function uses the graceful-fs shared queue\n                if (!err) {\n                    resetQueue();\n                }\n                if (typeof cb === \"function\") cb.apply(this, arguments);\n            });\n        }\n        Object.defineProperty(close, previousSymbol, {\n            value: fs$close\n        });\n        return close;\n    }(fs.close);\n    fs.closeSync = function(fs$closeSync) {\n        function closeSync(fd) {\n            // This function uses the graceful-fs shared queue\n            fs$closeSync.apply(fs, arguments);\n            resetQueue();\n        }\n        Object.defineProperty(closeSync, previousSymbol, {\n            value: fs$closeSync\n        });\n        return closeSync;\n    }(fs.closeSync);\n    if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || \"\")) {\n        process.on(\"exit\", function() {\n            debug(fs[gracefulQueue]);\n            (__webpack_require__(/*! assert */ \"assert\").equal)(fs[gracefulQueue].length, 0);\n        });\n    }\n}\nif (!global[gracefulQueue]) {\n    publishQueue(global, fs[gracefulQueue]);\n}\nmodule.exports = patch(clone(fs));\nif (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {\n    module.exports = patch(fs);\n    fs.__patched = true;\n}\nfunction patch(fs) {\n    // Everything that references the open() function needs to be in here\n    polyfills(fs);\n    fs.gracefulify = patch;\n    fs.createReadStream = createReadStream;\n    fs.createWriteStream = createWriteStream;\n    var fs$readFile = fs.readFile;\n    fs.readFile = readFile;\n    function readFile(path, options, cb) {\n        if (typeof options === \"function\") cb = options, options = null;\n        return go$readFile(path, options, cb);\n        function go$readFile(path, options, cb, startTime) {\n            return fs$readFile(path, options, function(err) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$readFile,\n                    [\n                        path,\n                        options,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    var fs$writeFile = fs.writeFile;\n    fs.writeFile = writeFile;\n    function writeFile(path, data, options, cb) {\n        if (typeof options === \"function\") cb = options, options = null;\n        return go$writeFile(path, data, options, cb);\n        function go$writeFile(path, data, options, cb, startTime) {\n            return fs$writeFile(path, data, options, function(err) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$writeFile,\n                    [\n                        path,\n                        data,\n                        options,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    var fs$appendFile = fs.appendFile;\n    if (fs$appendFile) fs.appendFile = appendFile;\n    function appendFile(path, data, options, cb) {\n        if (typeof options === \"function\") cb = options, options = null;\n        return go$appendFile(path, data, options, cb);\n        function go$appendFile(path, data, options, cb, startTime) {\n            return fs$appendFile(path, data, options, function(err) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$appendFile,\n                    [\n                        path,\n                        data,\n                        options,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    var fs$copyFile = fs.copyFile;\n    if (fs$copyFile) fs.copyFile = copyFile;\n    function copyFile(src, dest, flags, cb) {\n        if (typeof flags === \"function\") {\n            cb = flags;\n            flags = 0;\n        }\n        return go$copyFile(src, dest, flags, cb);\n        function go$copyFile(src, dest, flags, cb, startTime) {\n            return fs$copyFile(src, dest, flags, function(err) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$copyFile,\n                    [\n                        src,\n                        dest,\n                        flags,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    var fs$readdir = fs.readdir;\n    fs.readdir = readdir;\n    var noReaddirOptionVersions = /^v[0-5]\\./;\n    function readdir(path, options, cb) {\n        if (typeof options === \"function\") cb = options, options = null;\n        var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir(path, options, cb, startTime) {\n            return fs$readdir(path, fs$readdirCallback(path, options, cb, startTime));\n        } : function go$readdir(path, options, cb, startTime) {\n            return fs$readdir(path, options, fs$readdirCallback(path, options, cb, startTime));\n        };\n        return go$readdir(path, options, cb);\n        function fs$readdirCallback(path, options, cb, startTime) {\n            return function(err, files) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$readdir,\n                    [\n                        path,\n                        options,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (files && files.sort) files.sort();\n                    if (typeof cb === \"function\") cb.call(this, err, files);\n                }\n            };\n        }\n    }\n    if (process.version.substr(0, 4) === \"v0.8\") {\n        var legStreams = legacy(fs);\n        ReadStream = legStreams.ReadStream;\n        WriteStream = legStreams.WriteStream;\n    }\n    var fs$ReadStream = fs.ReadStream;\n    if (fs$ReadStream) {\n        ReadStream.prototype = Object.create(fs$ReadStream.prototype);\n        ReadStream.prototype.open = ReadStream$open;\n    }\n    var fs$WriteStream = fs.WriteStream;\n    if (fs$WriteStream) {\n        WriteStream.prototype = Object.create(fs$WriteStream.prototype);\n        WriteStream.prototype.open = WriteStream$open;\n    }\n    Object.defineProperty(fs, \"ReadStream\", {\n        get: function() {\n            return ReadStream;\n        },\n        set: function(val) {\n            ReadStream = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(fs, \"WriteStream\", {\n        get: function() {\n            return WriteStream;\n        },\n        set: function(val) {\n            WriteStream = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // legacy names\n    var FileReadStream = ReadStream;\n    Object.defineProperty(fs, \"FileReadStream\", {\n        get: function() {\n            return FileReadStream;\n        },\n        set: function(val) {\n            FileReadStream = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    var FileWriteStream = WriteStream;\n    Object.defineProperty(fs, \"FileWriteStream\", {\n        get: function() {\n            return FileWriteStream;\n        },\n        set: function(val) {\n            FileWriteStream = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    function ReadStream(path, options) {\n        if (this instanceof ReadStream) return fs$ReadStream.apply(this, arguments), this;\n        else return ReadStream.apply(Object.create(ReadStream.prototype), arguments);\n    }\n    function ReadStream$open() {\n        var that = this;\n        open(that.path, that.flags, that.mode, function(err, fd) {\n            if (err) {\n                if (that.autoClose) that.destroy();\n                that.emit(\"error\", err);\n            } else {\n                that.fd = fd;\n                that.emit(\"open\", fd);\n                that.read();\n            }\n        });\n    }\n    function WriteStream(path, options) {\n        if (this instanceof WriteStream) return fs$WriteStream.apply(this, arguments), this;\n        else return WriteStream.apply(Object.create(WriteStream.prototype), arguments);\n    }\n    function WriteStream$open() {\n        var that = this;\n        open(that.path, that.flags, that.mode, function(err, fd) {\n            if (err) {\n                that.destroy();\n                that.emit(\"error\", err);\n            } else {\n                that.fd = fd;\n                that.emit(\"open\", fd);\n            }\n        });\n    }\n    function createReadStream(path, options) {\n        return new fs.ReadStream(path, options);\n    }\n    function createWriteStream(path, options) {\n        return new fs.WriteStream(path, options);\n    }\n    var fs$open = fs.open;\n    fs.open = open;\n    function open(path, flags, mode, cb) {\n        if (typeof mode === \"function\") cb = mode, mode = null;\n        return go$open(path, flags, mode, cb);\n        function go$open(path, flags, mode, cb, startTime) {\n            return fs$open(path, flags, mode, function(err, fd) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$open,\n                    [\n                        path,\n                        flags,\n                        mode,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    return fs;\n}\nfunction enqueue(elem) {\n    debug(\"ENQUEUE\", elem[0].name, elem[1]);\n    fs[gracefulQueue].push(elem);\n    retry();\n}\n// keep track of the timeout between retry() calls\nvar retryTimer;\n// reset the startTime and lastTime to now\n// this resets the start of the 60 second overall timeout as well as the\n// delay between attempts so that we'll retry these jobs sooner\nfunction resetQueue() {\n    var now = Date.now();\n    for(var i = 0; i < fs[gracefulQueue].length; ++i){\n        // entries that are only a length of 2 are from an older version, don't\n        // bother modifying those since they'll be retried anyway.\n        if (fs[gracefulQueue][i].length > 2) {\n            fs[gracefulQueue][i][3] = now // startTime\n            ;\n            fs[gracefulQueue][i][4] = now // lastTime\n            ;\n        }\n    }\n    // call retry to make sure we're actively processing the queue\n    retry();\n}\nfunction retry() {\n    // clear the timer and remove it to help prevent unintended concurrency\n    clearTimeout(retryTimer);\n    retryTimer = undefined;\n    if (fs[gracefulQueue].length === 0) return;\n    var elem = fs[gracefulQueue].shift();\n    var fn = elem[0];\n    var args = elem[1];\n    // these items may be unset if they were added by an older graceful-fs\n    var err = elem[2];\n    var startTime = elem[3];\n    var lastTime = elem[4];\n    // if we don't have a startTime we have no way of knowing if we've waited\n    // long enough, so go ahead and retry this item now\n    if (startTime === undefined) {\n        debug(\"RETRY\", fn.name, args);\n        fn.apply(null, args);\n    } else if (Date.now() - startTime >= 60000) {\n        // it's been more than 60 seconds total, bail now\n        debug(\"TIMEOUT\", fn.name, args);\n        var cb = args.pop();\n        if (typeof cb === \"function\") cb.call(null, err);\n    } else {\n        // the amount of time between the last attempt and right now\n        var sinceAttempt = Date.now() - lastTime;\n        // the amount of time between when we first tried, and when we last tried\n        // rounded up to at least 1\n        var sinceStart = Math.max(lastTime - startTime, 1);\n        // backoff. wait longer than the total time we've been retrying, but only\n        // up to a maximum of 100ms\n        var desiredDelay = Math.min(sinceStart * 1.2, 100);\n        // it's been long enough since the last retry, do it again\n        if (sinceAttempt >= desiredDelay) {\n            debug(\"RETRY\", fn.name, args);\n            fn.apply(null, args.concat([\n                startTime\n            ]));\n        } else {\n            // if we can't do this job yet, push it to the end of the queue\n            // and let the next iteration check again\n            fs[gracefulQueue].push(elem);\n        }\n    }\n    // schedule our next run if one isn't already scheduled\n    if (retryTimer === undefined) {\n        retryTimer = setTimeout(retry, 0);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graceful-fs/graceful-fs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graceful-fs/legacy-streams.js":
/*!****************************************************!*\
  !*** ./node_modules/graceful-fs/legacy-streams.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nmodule.exports = legacy;\nfunction legacy(fs) {\n    return {\n        ReadStream: ReadStream,\n        WriteStream: WriteStream\n    };\n    function ReadStream(path, options) {\n        if (!(this instanceof ReadStream)) return new ReadStream(path, options);\n        Stream.call(this);\n        var self = this;\n        this.path = path;\n        this.fd = null;\n        this.readable = true;\n        this.paused = false;\n        this.flags = \"r\";\n        this.mode = 438; /*=0666*/ \n        this.bufferSize = 64 * 1024;\n        options = options || {};\n        // Mixin options into this\n        var keys = Object.keys(options);\n        for(var index = 0, length = keys.length; index < length; index++){\n            var key = keys[index];\n            this[key] = options[key];\n        }\n        if (this.encoding) this.setEncoding(this.encoding);\n        if (this.start !== undefined) {\n            if (\"number\" !== typeof this.start) {\n                throw TypeError(\"start must be a Number\");\n            }\n            if (this.end === undefined) {\n                this.end = Infinity;\n            } else if (\"number\" !== typeof this.end) {\n                throw TypeError(\"end must be a Number\");\n            }\n            if (this.start > this.end) {\n                throw new Error(\"start must be <= end\");\n            }\n            this.pos = this.start;\n        }\n        if (this.fd !== null) {\n            process.nextTick(function() {\n                self._read();\n            });\n            return;\n        }\n        fs.open(this.path, this.flags, this.mode, function(err, fd) {\n            if (err) {\n                self.emit(\"error\", err);\n                self.readable = false;\n                return;\n            }\n            self.fd = fd;\n            self.emit(\"open\", fd);\n            self._read();\n        });\n    }\n    function WriteStream(path, options) {\n        if (!(this instanceof WriteStream)) return new WriteStream(path, options);\n        Stream.call(this);\n        this.path = path;\n        this.fd = null;\n        this.writable = true;\n        this.flags = \"w\";\n        this.encoding = \"binary\";\n        this.mode = 438; /*=0666*/ \n        this.bytesWritten = 0;\n        options = options || {};\n        // Mixin options into this\n        var keys = Object.keys(options);\n        for(var index = 0, length = keys.length; index < length; index++){\n            var key = keys[index];\n            this[key] = options[key];\n        }\n        if (this.start !== undefined) {\n            if (\"number\" !== typeof this.start) {\n                throw TypeError(\"start must be a Number\");\n            }\n            if (this.start < 0) {\n                throw new Error(\"start must be >= zero\");\n            }\n            this.pos = this.start;\n        }\n        this.busy = false;\n        this._queue = [];\n        if (this.fd === null) {\n            this._open = fs.open;\n            this._queue.push([\n                this._open,\n                this.path,\n                this.flags,\n                this.mode,\n                undefined\n            ]);\n            this.flush();\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhY2VmdWwtZnMvbGVnYWN5LXN0cmVhbXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsU0FBU0Msb0RBQXdCO0FBRXJDQyxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLFNBQVNBLE9BQVFDLEVBQUU7SUFDakIsT0FBTztRQUNMQyxZQUFZQTtRQUNaQyxhQUFhQTtJQUNmO0lBRUEsU0FBU0QsV0FBWUUsSUFBSSxFQUFFQyxPQUFPO1FBQ2hDLElBQUksQ0FBRSxLQUFJLFlBQVlILFVBQVMsR0FBSSxPQUFPLElBQUlBLFdBQVdFLE1BQU1DO1FBRS9EVCxPQUFPVSxJQUFJLENBQUMsSUFBSTtRQUVoQixJQUFJQyxPQUFPLElBQUk7UUFFZixJQUFJLENBQUNILElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNJLEVBQUUsR0FBRztRQUNWLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0MsTUFBTSxHQUFHO1FBRWQsSUFBSSxDQUFDQyxLQUFLLEdBQUc7UUFDYixJQUFJLENBQUNDLElBQUksR0FBRyxLQUFLLE9BQU87UUFDeEIsSUFBSSxDQUFDQyxVQUFVLEdBQUcsS0FBSztRQUV2QlIsVUFBVUEsV0FBVyxDQUFDO1FBRXRCLDBCQUEwQjtRQUMxQixJQUFJUyxPQUFPQyxPQUFPRCxJQUFJLENBQUNUO1FBQ3ZCLElBQUssSUFBSVcsUUFBUSxHQUFHQyxTQUFTSCxLQUFLRyxNQUFNLEVBQUVELFFBQVFDLFFBQVFELFFBQVM7WUFDakUsSUFBSUUsTUFBTUosSUFBSSxDQUFDRSxNQUFNO1lBQ3JCLElBQUksQ0FBQ0UsSUFBSSxHQUFHYixPQUFPLENBQUNhLElBQUk7UUFDMUI7UUFFQSxJQUFJLElBQUksQ0FBQ0MsUUFBUSxFQUFFLElBQUksQ0FBQ0MsV0FBVyxDQUFDLElBQUksQ0FBQ0QsUUFBUTtRQUVqRCxJQUFJLElBQUksQ0FBQ0UsS0FBSyxLQUFLQyxXQUFXO1lBQzVCLElBQUksYUFBYSxPQUFPLElBQUksQ0FBQ0Qs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ZV9tb2R1bGVzL2dyYWNlZnVsLWZzL2xlZ2FjeS1zdHJlYW1zLmpzPzFlYTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLlN0cmVhbVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxlZ2FjeVxuXG5mdW5jdGlvbiBsZWdhY3kgKGZzKSB7XG4gIHJldHVybiB7XG4gICAgUmVhZFN0cmVhbTogUmVhZFN0cmVhbSxcbiAgICBXcml0ZVN0cmVhbTogV3JpdGVTdHJlYW1cbiAgfVxuXG4gIGZ1bmN0aW9uIFJlYWRTdHJlYW0gKHBhdGgsIG9wdGlvbnMpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZFN0cmVhbSkpIHJldHVybiBuZXcgUmVhZFN0cmVhbShwYXRoLCBvcHRpb25zKTtcblxuICAgIFN0cmVhbS5jYWxsKHRoaXMpO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICB0aGlzLmZkID0gbnVsbDtcbiAgICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5mbGFncyA9ICdyJztcbiAgICB0aGlzLm1vZGUgPSA0Mzg7IC8qPTA2NjYqL1xuICAgIHRoaXMuYnVmZmVyU2l6ZSA9IDY0ICogMTAyNDtcblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgLy8gTWl4aW4gb3B0aW9ucyBpbnRvIHRoaXNcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICAgIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpbmRleF07XG4gICAgICB0aGlzW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZW5jb2RpbmcpIHRoaXMuc2V0RW5jb2RpbmcodGhpcy5lbmNvZGluZyk7XG5cbiAgICBpZiAodGhpcy5zdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoJ251bWJlcicgIT09IHR5cGVvZiB0aGlzLnN0YXJ0KSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignc3RhcnQgbXVzdCBiZSBhIE51bWJlcicpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5lbmQgPSBJbmZpbml0eTtcbiAgICAgIH0gZWxzZSBpZiAoJ251bWJlcicgIT09IHR5cGVvZiB0aGlzLmVuZCkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ2VuZCBtdXN0IGJlIGEgTnVtYmVyJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnN0YXJ0ID4gdGhpcy5lbmQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdGFydCBtdXN0IGJlIDw9IGVuZCcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBvcyA9IHRoaXMuc3RhcnQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmQgIT09IG51bGwpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuX3JlYWQoKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZzLm9wZW4odGhpcy5wYXRoLCB0aGlzLmZsYWdzLCB0aGlzLm1vZGUsIGZ1bmN0aW9uIChlcnIsIGZkKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICBzZWxmLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2VsZi5mZCA9IGZkO1xuICAgICAgc2VsZi5lbWl0KCdvcGVuJywgZmQpO1xuICAgICAgc2VsZi5fcmVhZCgpO1xuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBXcml0ZVN0cmVhbSAocGF0aCwgb3B0aW9ucykge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBXcml0ZVN0cmVhbSkpIHJldHVybiBuZXcgV3JpdGVTdHJlYW0ocGF0aCwgb3B0aW9ucyk7XG5cbiAgICBTdHJlYW0uY2FsbCh0aGlzKTtcblxuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgdGhpcy5mZCA9IG51bGw7XG4gICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cbiAgICB0aGlzLmZsYWdzID0gJ3cnO1xuICAgIHRoaXMuZW5jb2RpbmcgPSAnYmluYXJ5JztcbiAgICB0aGlzLm1vZGUgPSA0Mzg7IC8qPTA2NjYqL1xuICAgIHRoaXMuYnl0ZXNXcml0dGVuID0gMDtcblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgLy8gTWl4aW4gb3B0aW9ucyBpbnRvIHRoaXNcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICAgIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpbmRleF07XG4gICAgICB0aGlzW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCdudW1iZXInICE9PSB0eXBlb2YgdGhpcy5zdGFydCkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ3N0YXJ0IG11c3QgYmUgYSBOdW1iZXInKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0YXJ0IDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0YXJ0IG11c3QgYmUgPj0gemVybycpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBvcyA9IHRoaXMuc3RhcnQ7XG4gICAgfVxuXG4gICAgdGhpcy5idXN5ID0gZmFsc2U7XG4gICAgdGhpcy5fcXVldWUgPSBbXTtcblxuICAgIGlmICh0aGlzLmZkID09PSBudWxsKSB7XG4gICAgICB0aGlzLl9vcGVuID0gZnMub3BlbjtcbiAgICAgIHRoaXMuX3F1ZXVlLnB1c2goW3RoaXMuX29wZW4sIHRoaXMucGF0aCwgdGhpcy5mbGFncywgdGhpcy5tb2RlLCB1bmRlZmluZWRdKTtcbiAgICAgIHRoaXMuZmx1c2goKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJTdHJlYW0iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImxlZ2FjeSIsImZzIiwiUmVhZFN0cmVhbSIsIldyaXRlU3RyZWFtIiwicGF0aCIsIm9wdGlvbnMiLCJjYWxsIiwic2VsZiIsImZkIiwicmVhZGFibGUiLCJwYXVzZWQiLCJmbGFncyIsIm1vZGUiLCJidWZmZXJTaXplIiwia2V5cyIsIk9iamVjdCIsImluZGV4IiwibGVuZ3RoIiwia2V5IiwiZW5jb2RpbmciLCJzZXRFbmNvZGluZyIsInN0YXJ0IiwidW5kZWZpbmVkIiwiVHlwZUVycm9yIiwiZW5kIiwiSW5maW5pdHkiLCJFcnJvciIsInBvcyIsInByb2Nlc3MiLCJuZXh0VGljayIsIl9yZWFkIiwib3BlbiIsImVyciIsImVtaXQiLCJ3cml0YWJsZSIsImJ5dGVzV3JpdHRlbiIsImJ1c3kiLCJfcXVldWUiLCJfb3BlbiIsInB1c2giLCJmbHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graceful-fs/legacy-streams.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graceful-fs/polyfills.js":
/*!***********************************************!*\
  !*** ./node_modules/graceful-fs/polyfills.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var constants = __webpack_require__(/*! constants */ \"constants\");\nvar origCwd = process.cwd;\nvar cwd = null;\nvar platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;\nprocess.cwd = function() {\n    if (!cwd) cwd = origCwd.call(process);\n    return cwd;\n};\ntry {\n    process.cwd();\n} catch (er) {}\n// This check is needed until node.js 12 is required\nif (typeof process.chdir === \"function\") {\n    var chdir = process.chdir;\n    process.chdir = function(d) {\n        cwd = null;\n        chdir.call(process, d);\n    };\n    if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);\n}\nmodule.exports = patch;\nfunction patch(fs) {\n    // (re-)implement some things that are known busted or missing.\n    // lchmod, broken prior to 0.6.2\n    // back-port the fix here.\n    if (constants.hasOwnProperty(\"O_SYMLINK\") && process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)) {\n        patchLchmod(fs);\n    }\n    // lutimes implementation, or no-op\n    if (!fs.lutimes) {\n        patchLutimes(fs);\n    }\n    // https://github.com/isaacs/node-graceful-fs/issues/4\n    // Chown should not fail on einval or eperm if non-root.\n    // It should not fail on enosys ever, as this just indicates\n    // that a fs doesn't support the intended operation.\n    fs.chown = chownFix(fs.chown);\n    fs.fchown = chownFix(fs.fchown);\n    fs.lchown = chownFix(fs.lchown);\n    fs.chmod = chmodFix(fs.chmod);\n    fs.fchmod = chmodFix(fs.fchmod);\n    fs.lchmod = chmodFix(fs.lchmod);\n    fs.chownSync = chownFixSync(fs.chownSync);\n    fs.fchownSync = chownFixSync(fs.fchownSync);\n    fs.lchownSync = chownFixSync(fs.lchownSync);\n    fs.chmodSync = chmodFixSync(fs.chmodSync);\n    fs.fchmodSync = chmodFixSync(fs.fchmodSync);\n    fs.lchmodSync = chmodFixSync(fs.lchmodSync);\n    fs.stat = statFix(fs.stat);\n    fs.fstat = statFix(fs.fstat);\n    fs.lstat = statFix(fs.lstat);\n    fs.statSync = statFixSync(fs.statSync);\n    fs.fstatSync = statFixSync(fs.fstatSync);\n    fs.lstatSync = statFixSync(fs.lstatSync);\n    // if lchmod/lchown do not exist, then make them no-ops\n    if (fs.chmod && !fs.lchmod) {\n        fs.lchmod = function(path, mode, cb) {\n            if (cb) process.nextTick(cb);\n        };\n        fs.lchmodSync = function() {};\n    }\n    if (fs.chown && !fs.lchown) {\n        fs.lchown = function(path, uid, gid, cb) {\n            if (cb) process.nextTick(cb);\n        };\n        fs.lchownSync = function() {};\n    }\n    // on Windows, A/V software can lock the directory, causing this\n    // to fail with an EACCES or EPERM if the directory contains newly\n    // created files.  Try again on failure, for up to 60 seconds.\n    // Set the timeout this long because some Windows Anti-Virus, such as Parity\n    // bit9, may lock files for up to a minute, causing npm package install\n    // failures. Also, take care to yield the scheduler. Windows scheduling gives\n    // CPU to a busy looping process, which can cause the program causing the lock\n    // contention to be starved of CPU by node, so the contention doesn't resolve.\n    if (platform === \"win32\") {\n        fs.rename = typeof fs.rename !== \"function\" ? fs.rename : function(fs$rename) {\n            function rename(from, to, cb) {\n                var start = Date.now();\n                var backoff = 0;\n                fs$rename(from, to, function CB(er) {\n                    if (er && (er.code === \"EACCES\" || er.code === \"EPERM\" || er.code === \"EBUSY\") && Date.now() - start < 60000) {\n                        setTimeout(function() {\n                            fs.stat(to, function(stater, st) {\n                                if (stater && stater.code === \"ENOENT\") fs$rename(from, to, CB);\n                                else cb(er);\n                            });\n                        }, backoff);\n                        if (backoff < 100) backoff += 10;\n                        return;\n                    }\n                    if (cb) cb(er);\n                });\n            }\n            if (Object.setPrototypeOf) Object.setPrototypeOf(rename, fs$rename);\n            return rename;\n        }(fs.rename);\n    }\n    // if read() returns EAGAIN, then just try it again.\n    fs.read = typeof fs.read !== \"function\" ? fs.read : function(fs$read) {\n        function read(fd, buffer, offset, length, position, callback_) {\n            var callback;\n            if (callback_ && typeof callback_ === \"function\") {\n                var eagCounter = 0;\n                callback = function(er, _, __) {\n                    if (er && er.code === \"EAGAIN\" && eagCounter < 10) {\n                        eagCounter++;\n                        return fs$read.call(fs, fd, buffer, offset, length, position, callback);\n                    }\n                    callback_.apply(this, arguments);\n                };\n            }\n            return fs$read.call(fs, fd, buffer, offset, length, position, callback);\n        }\n        // This ensures `util.promisify` works as it does for native `fs.read`.\n        if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read);\n        return read;\n    }(fs.read);\n    fs.readSync = typeof fs.readSync !== \"function\" ? fs.readSync : function(fs$readSync) {\n        return function(fd, buffer, offset, length, position) {\n            var eagCounter = 0;\n            while(true){\n                try {\n                    return fs$readSync.call(fs, fd, buffer, offset, length, position);\n                } catch (er) {\n                    if (er.code === \"EAGAIN\" && eagCounter < 10) {\n                        eagCounter++;\n                        continue;\n                    }\n                    throw er;\n                }\n            }\n        };\n    }(fs.readSync);\n    function patchLchmod(fs) {\n        fs.lchmod = function(path, mode, callback) {\n            fs.open(path, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {\n                if (err) {\n                    if (callback) callback(err);\n                    return;\n                }\n                // prefer to return the chmod error, if one occurs,\n                // but still try to close, and report closing errors if they occur.\n                fs.fchmod(fd, mode, function(err) {\n                    fs.close(fd, function(err2) {\n                        if (callback) callback(err || err2);\n                    });\n                });\n            });\n        };\n        fs.lchmodSync = function(path, mode) {\n            var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);\n            // prefer to return the chmod error, if one occurs,\n            // but still try to close, and report closing errors if they occur.\n            var threw = true;\n            var ret;\n            try {\n                ret = fs.fchmodSync(fd, mode);\n                threw = false;\n            } finally{\n                if (threw) {\n                    try {\n                        fs.closeSync(fd);\n                    } catch (er) {}\n                } else {\n                    fs.closeSync(fd);\n                }\n            }\n            return ret;\n        };\n    }\n    function patchLutimes(fs) {\n        if (constants.hasOwnProperty(\"O_SYMLINK\") && fs.futimes) {\n            fs.lutimes = function(path, at, mt, cb) {\n                fs.open(path, constants.O_SYMLINK, function(er, fd) {\n                    if (er) {\n                        if (cb) cb(er);\n                        return;\n                    }\n                    fs.futimes(fd, at, mt, function(er) {\n                        fs.close(fd, function(er2) {\n                            if (cb) cb(er || er2);\n                        });\n                    });\n                });\n            };\n            fs.lutimesSync = function(path, at, mt) {\n                var fd = fs.openSync(path, constants.O_SYMLINK);\n                var ret;\n                var threw = true;\n                try {\n                    ret = fs.futimesSync(fd, at, mt);\n                    threw = false;\n                } finally{\n                    if (threw) {\n                        try {\n                            fs.closeSync(fd);\n                        } catch (er) {}\n                    } else {\n                        fs.closeSync(fd);\n                    }\n                }\n                return ret;\n            };\n        } else if (fs.futimes) {\n            fs.lutimes = function(_a, _b, _c, cb) {\n                if (cb) process.nextTick(cb);\n            };\n            fs.lutimesSync = function() {};\n        }\n    }\n    function chmodFix(orig) {\n        if (!orig) return orig;\n        return function(target, mode, cb) {\n            return orig.call(fs, target, mode, function(er) {\n                if (chownErOk(er)) er = null;\n                if (cb) cb.apply(this, arguments);\n            });\n        };\n    }\n    function chmodFixSync(orig) {\n        if (!orig) return orig;\n        return function(target, mode) {\n            try {\n                return orig.call(fs, target, mode);\n            } catch (er) {\n                if (!chownErOk(er)) throw er;\n            }\n        };\n    }\n    function chownFix(orig) {\n        if (!orig) return orig;\n        return function(target, uid, gid, cb) {\n            return orig.call(fs, target, uid, gid, function(er) {\n                if (chownErOk(er)) er = null;\n                if (cb) cb.apply(this, arguments);\n            });\n        };\n    }\n    function chownFixSync(orig) {\n        if (!orig) return orig;\n        return function(target, uid, gid) {\n            try {\n                return orig.call(fs, target, uid, gid);\n            } catch (er) {\n                if (!chownErOk(er)) throw er;\n            }\n        };\n    }\n    function statFix(orig) {\n        if (!orig) return orig;\n        // Older versions of Node erroneously returned signed integers for\n        // uid + gid.\n        return function(target, options, cb) {\n            if (typeof options === \"function\") {\n                cb = options;\n                options = null;\n            }\n            function callback(er, stats) {\n                if (stats) {\n                    if (stats.uid < 0) stats.uid += 0x100000000;\n                    if (stats.gid < 0) stats.gid += 0x100000000;\n                }\n                if (cb) cb.apply(this, arguments);\n            }\n            return options ? orig.call(fs, target, options, callback) : orig.call(fs, target, callback);\n        };\n    }\n    function statFixSync(orig) {\n        if (!orig) return orig;\n        // Older versions of Node erroneously returned signed integers for\n        // uid + gid.\n        return function(target, options) {\n            var stats = options ? orig.call(fs, target, options) : orig.call(fs, target);\n            if (stats) {\n                if (stats.uid < 0) stats.uid += 0x100000000;\n                if (stats.gid < 0) stats.gid += 0x100000000;\n            }\n            return stats;\n        };\n    }\n    // ENOSYS means that the fs doesn't support the op. Just ignore\n    // that, because it doesn't matter.\n    //\n    // if there's no getuid, or if getuid() is something other\n    // than 0, and the error is EINVAL or EPERM, then just ignore\n    // it.\n    //\n    // This specific case is a silent failure in cp, install, tar,\n    // and most other unix tools that manage permissions.\n    //\n    // When running as root, or if other types of errors are\n    // encountered, then it's strict.\n    function chownErOk(er) {\n        if (!er) return true;\n        if (er.code === \"ENOSYS\") return true;\n        var nonroot = !process.getuid || process.getuid() !== 0;\n        if (nonroot) {\n            if (er.code === \"EINVAL\" || er.code === \"EPERM\") return true;\n        }\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhY2VmdWwtZnMvcG9seWZpbGxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDO0FBRXhCLElBQUlDLFVBQVVDLFFBQVFDLEdBQUc7QUFDekIsSUFBSUEsTUFBTTtBQUVWLElBQUlDLFdBQVdGLFFBQVFHLEdBQUcsQ0FBQ0Msb0JBQW9CLElBQUlKLFFBQVFFLFFBQVE7QUFFbkVGLFFBQVFDLEdBQUcsR0FBRztJQUNaLElBQUksQ0FBQ0EsS0FDSEEsTUFBTUYsUUFBUU0sSUFBSSxDQUFDTDtJQUNyQixPQUFPQztBQUNUO0FBQ0EsSUFBSTtJQUNGRCxRQUFRQyxHQUFHO0FBQ2IsRUFBRSxPQUFPSyxJQUFJLENBQUM7QUFFZCxvREFBb0Q7QUFDcEQsSUFBSSxPQUFPTixRQUFRTyxLQUFLLEtBQUssWUFBWTtJQUN2QyxJQUFJQSxRQUFRUCxRQUFRTyxLQUFLO0lBQ3pCUCxRQUFRTyxLQUFLLEdBQUcsU0FBVUMsQ0FBQztRQUN6QlAsTUFBTTtRQUNOTSxNQUFNRixJQUFJLENBQUNMLFNBQVNRO0lBQ3RCO0lBQ0EsSUFBSUMsT0FBT0MsY0FBYyxFQUFFRCxPQUFPQyxjQUFjLENBQUNWLFFBQVFPLEtBQUssRUFBRUE7QUFDbEU7QUFFQUksT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxNQUFPQyxFQUFFO0lBQ2hCLCtEQUErRDtJQUUvRCxnQ0FBZ0M7SUFDaEMsMEJBQTBCO0lBQzFCLElBQUlqQixVQUFVa0IsY0FBYyxDQUFDLGdCQUN6QmYsUUFBUWdCLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLDJCQUEyQjtRQUNuREMsWUFBWUo7SUFDZDtJQUVBLG1DQUFtQztJQUNuQyxJQUFJLENBQUNBLEdBQUdLLE9BQU8sRUFBRTtRQUNmQyxhQUFhTjtJQUNmO0lBRUEsc0RBQXNEO0lBQ3RELHdEQUF3RDtJQUN4RCw0REFBNEQ7SUFDNUQsb0RBQW9EO0lBRXBEQSxHQUFHTyxLQUFLLEdBQUdDLFNBQVNSLEdB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QjtJQUNGO0lBRUEsU0FBUzlCLFlBQWF5RCxJQUFJO1FBQ3hCLElBQUksQ0FBQ0EsTUFBTSxPQUFPQTtRQUNsQixrRUFBa0U7UUFDbEUsYUFBYTtRQUNiLE9BQU8sU0FBVUMsTUFBTSxFQUFFRSxPQUFPO1lBQzlCLElBQUlDLFFBQVFELFVBQVVILEtBQUs5RixJQUFJLENBQUNTLElBQUlzRixRQUFRRSxXQUN4Q0gsS0FBSzlGLElBQUksQ0FBQ1MsSUFBSXNGO1lBQ2xCLElBQUlHLE9BQU87Z0JBQ1QsSUFBSUEsTUFBTXRELEdBQUcsR0FBRyxHQUFHc0QsTUFBTXRELEdBQUcsSUFBSTtnQkFDaEMsSUFBSXNELE1BQU1yRCxHQUFHLEdBQUcsR0FBR3FELE1BQU1yRCxHQUFHLElBQUk7WUFDbEM7WUFDQSxPQUFPcUQ7UUFDVDtJQUNGO0lBRUEsK0RBQStEO0lBQy9ELG1DQUFtQztJQUNuQyxFQUFFO0lBQ0YsMERBQTBEO0lBQzFELDZEQUE2RDtJQUM3RCxNQUFNO0lBQ04sRUFBRTtJQUNGLDhEQUE4RDtJQUM5RCxxREFBcUQ7SUFDckQsRUFBRTtJQUNGLHdEQUF3RDtJQUN4RCxpQ0FBaUM7SUFDakMsU0FBU0YsVUFBVy9GLEVBQUU7UUFDcEIsSUFBSSxDQUFDQSxJQUNILE9BQU87UUFFVCxJQUFJQSxHQUFHc0QsSUFBSSxLQUFLLFVBQ2QsT0FBTztRQUVULElBQUk0QyxVQUFVLENBQUN4RyxRQUFReUcsTUFBTSxJQUFJekcsUUFBUXlHLE1BQU0sT0FBTztRQUN0RCxJQUFJRCxTQUFTO1lBQ1gsSUFBSWxHLEdBQUdzRCxJQUFJLEtBQUssWUFBWXRELEdBQUdzRCxJQUFJLEtBQUssU0FDdEMsT0FBTztRQUNYO1FBRUEsT0FBTztJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZC10aW1lc2hlZXQtYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvZ3JhY2VmdWwtZnMvcG9seWZpbGxzLmpzP2NkYzkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbnN0YW50cyA9IHJlcXVpcmUoJ2NvbnN0YW50cycpXG5cbnZhciBvcmlnQ3dkID0gcHJvY2Vzcy5jd2RcbnZhciBjd2QgPSBudWxsXG5cbnZhciBwbGF0Zm9ybSA9IHByb2Nlc3MuZW52LkdSQUNFRlVMX0ZTX1BMQVRGT1JNIHx8IHByb2Nlc3MucGxhdGZvcm1cblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCFjd2QpXG4gICAgY3dkID0gb3JpZ0N3ZC5jYWxsKHByb2Nlc3MpXG4gIHJldHVybiBjd2Rcbn1cbnRyeSB7XG4gIHByb2Nlc3MuY3dkKClcbn0gY2F0Y2ggKGVyKSB7fVxuXG4vLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB1bnRpbCBub2RlLmpzIDEyIGlzIHJlcXVpcmVkXG5pZiAodHlwZW9mIHByb2Nlc3MuY2hkaXIgPT09ICdmdW5jdGlvbicpIHtcbiAgdmFyIGNoZGlyID0gcHJvY2Vzcy5jaGRpclxuICBwcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGQpIHtcbiAgICBjd2QgPSBudWxsXG4gICAgY2hkaXIuY2FsbChwcm9jZXNzLCBkKVxuICB9XG4gIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIE9iamVjdC5zZXRQcm90b3R5cGVPZihwcm9jZXNzLmNoZGlyLCBjaGRpcilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaFxuXG5mdW5jdGlvbiBwYXRjaCAoZnMpIHtcbiAgLy8gKHJlLSlpbXBsZW1lbnQgc29tZSB0aGluZ3MgdGhhdCBhcmUga25vd24gYnVzdGVkIG9yIG1pc3NpbmcuXG5cbiAgLy8gbGNobW9kLCBicm9rZW4gcHJpb3IgdG8gMC42LjJcbiAgLy8gYmFjay1wb3J0IHRoZSBmaXggaGVyZS5cbiAgaWYgKGNvbnN0YW50cy5oYXNPd25Qcm9wZXJ0eSgnT19TWU1MSU5LJykgJiZcbiAgICAgIHByb2Nlc3MudmVyc2lvbi5tYXRjaCgvXnYwXFwuNlxcLlswLTJdfF52MFxcLjVcXC4vKSkge1xuICAgIHBhdGNoTGNobW9kKGZzKVxuICB9XG5cbiAgLy8gbHV0aW1lcyBpbXBsZW1lbnRhdGlvbiwgb3Igbm8tb3BcbiAgaWYgKCFmcy5sdXRpbWVzKSB7XG4gICAgcGF0Y2hMdXRpbWVzKGZzKVxuICB9XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2lzYWFjcy9ub2RlLWdyYWNlZnVsLWZzL2lzc3Vlcy80XG4gIC8vIENob3duIHNob3VsZCBub3QgZmFpbCBvbiBlaW52YWwgb3IgZXBlcm0gaWYgbm9uLXJvb3QuXG4gIC8vIEl0IHNob3VsZCBub3QgZmFpbCBvbiBlbm9zeXMgZXZlciwgYXMgdGhpcyBqdXN0IGluZGljYXRlc1xuICAvLyB0aGF0IGEgZnMgZG9lc24ndCBzdXBwb3J0IHRoZSBpbnRlbmRlZCBvcGVyYXRpb24uXG5cbiAgZnMuY2hvd24gPSBjaG93bkZpeChmcy5jaG93bilcbiAgZnMuZmNob3duID0gY2hvd25GaXgoZnMuZmNob3duKVxuICBmcy5sY2hvd24gPSBjaG93bkZpeChmcy5sY2hvd24pXG5cbiAgZnMuY2htb2QgPSBjaG1vZEZpeChmcy5jaG1vZClcbiAgZnMuZmNobW9kID0gY2htb2RGaXgoZnMuZmNobW9kKVxuICBmcy5sY2htb2QgPSBjaG1vZEZpeChmcy5sY2htb2QpXG5cbiAgZnMuY2hvd25TeW5jID0gY2hvd25GaXhTeW5jKGZzLmNob3duU3luYylcbiAgZnMuZmNob3duU3luYyA9IGNob3duRml4U3luYyhmcy5mY2hvd25TeW5jKVxuICBmcy5sY2hvd25TeW5jID0gY2hvd25GaXhTeW5jKGZzLmxjaG93blN5bmMpXG5cbiAgZnMuY2htb2RTeW5jID0gY2htb2RGaXhTeW5jKGZzLmNobW9kU3luYylcbiAgZnMuZmNobW9kU3luYyA9IGNobW9kRml4U3luYyhmcy5mY2htb2RTeW5jKVxuICBmcy5sY2htb2RTeW5jID0gY2htb2RGaXhTeW5jKGZzLmxjaG1vZFN5bmMpXG5cbiAgZnMuc3RhdCA9IHN0YXRGaXgoZnMuc3RhdClcbiAgZnMuZnN0YXQgPSBzdGF0Rml4KGZzLmZzdGF0KVxuICBmcy5sc3RhdCA9IHN0YXRGaXgoZnMubHN0YXQpXG5cbiAgZnMuc3RhdFN5bmMgPSBzdGF0Rml4U3luYyhmcy5zdGF0U3luYylcbiAgZnMuZnN0YXRTeW5jID0gc3RhdEZpeFN5bmMoZnMuZnN0YXRTeW5jKVxuICBmcy5sc3RhdFN5bmMgPSBzdGF0Rml4U3luYyhmcy5sc3RhdFN5bmMpXG5cbiAgLy8gaWYgbGNobW9kL2xjaG93biBkbyBub3QgZXhpc3QsIHRoZW4gbWFrZSB0aGVtIG5vLW9wc1xuICBpZiAoZnMuY2htb2QgJiYgIWZzLmxjaG1vZCkge1xuICAgIGZzLmxjaG1vZCA9IGZ1bmN0aW9uIChwYXRoLCBtb2RlLCBjYikge1xuICAgICAgaWYgKGNiKSBwcm9jZXNzLm5leHRUaWNrKGNiKVxuICAgIH1cbiAgICBmcy5sY2htb2RTeW5jID0gZnVuY3Rpb24gKCkge31cbiAgfVxuICBpZiAoZnMuY2hvd24gJiYgIWZzLmxjaG93bikge1xuICAgIGZzLmxjaG93biA9IGZ1bmN0aW9uIChwYXRoLCB1aWQsIGdpZCwgY2IpIHtcbiAgICAgIGlmIChjYikgcHJvY2Vzcy5uZXh0VGljayhjYilcbiAgICB9XG4gICAgZnMubGNob3duU3luYyA9IGZ1bmN0aW9uICgpIHt9XG4gIH1cblxuICAvLyBvbiBXaW5kb3dzLCBBL1Ygc29mdHdhcmUgY2FuIGxvY2sgdGhlIGRpcmVjdG9yeSwgY2F1c2luZyB0aGlzXG4gIC8vIHRvIGZhaWwgd2l0aCBhbiBFQUNDRVMgb3IgRVBFUk0gaWYgdGhlIGRpcmVjdG9yeSBjb250YWlucyBuZXdseVxuICAvLyBjcmVhdGVkIGZpbGVzLiAgVHJ5IGFnYWluIG9uIGZhaWx1cmUsIGZvciB1cCB0byA2MCBzZWNvbmRzLlxuXG4gIC8vIFNldCB0aGUgdGltZW91dCB0aGlzIGxvbmcgYmVjYXVzZSBzb21lIFdpbmRvd3MgQW50aS1WaXJ1cywgc3VjaCBhcyBQYXJpdHlcbiAgLy8gYml0OSwgbWF5IGxvY2sgZmlsZXMgZm9yIHVwIHRvIGEgbWludXRlLCBjYXVzaW5nIG5wbSBwYWNrYWdlIGluc3RhbGxcbiAgLy8gZmFpbHVyZXMuIEFsc28sIHRha2UgY2FyZSB0byB5aWVsZCB0aGUgc2NoZWR1bGVyLiBXaW5kb3dzIHNjaGVkdWxpbmcgZ2l2ZXNcbiAgLy8gQ1BVIHRvIGEgYnVzeSBsb29waW5nIHByb2Nlc3MsIHdoaWNoIGNhbiBjYXVzZSB0aGUgcHJvZ3JhbSBjYXVzaW5nIHRoZSBsb2NrXG4gIC8vIGNvbnRlbnRpb24gdG8gYmUgc3RhcnZlZCBvZiBDUFUgYnkgbm9kZSwgc28gdGhlIGNvbnRlbnRpb24gZG9lc24ndCByZXNvbHZlLlxuICBpZiAocGxhdGZvcm0gPT09IFwid2luMzJcIikge1xuICAgIGZzLnJlbmFtZSA9IHR5cGVvZiBmcy5yZW5hbWUgIT09ICdmdW5jdGlvbicgPyBmcy5yZW5hbWVcbiAgICA6IChmdW5jdGlvbiAoZnMkcmVuYW1lKSB7XG4gICAgICBmdW5jdGlvbiByZW5hbWUgKGZyb20sIHRvLCBjYikge1xuICAgICAgICB2YXIgc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgICAgIHZhciBiYWNrb2ZmID0gMDtcbiAgICAgICAgZnMkcmVuYW1lKGZyb20sIHRvLCBmdW5jdGlvbiBDQiAoZXIpIHtcbiAgICAgICAgICBpZiAoZXJcbiAgICAgICAgICAgICAgJiYgKGVyLmNvZGUgPT09IFwiRUFDQ0VTXCIgfHwgZXIuY29kZSA9PT0gXCJFUEVSTVwiIHx8IGVyLmNvZGUgPT09IFwiRUJVU1lcIilcbiAgICAgICAgICAgICAgJiYgRGF0ZS5ub3coKSAtIHN0YXJ0IDwgNjAwMDApIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGZzLnN0YXQodG8sIGZ1bmN0aW9uIChzdGF0ZXIsIHN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlciAmJiBzdGF0ZXIuY29kZSA9PT0gXCJFTk9FTlRcIilcbiAgICAgICAgICAgICAgICAgIGZzJHJlbmFtZShmcm9tLCB0bywgQ0IpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgIGNiKGVyKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSwgYmFja29mZilcbiAgICAgICAgICAgIGlmIChiYWNrb2ZmIDwgMTAwKVxuICAgICAgICAgICAgICBiYWNrb2ZmICs9IDEwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2IpIGNiKGVyKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikgT2JqZWN0LnNldFByb3RvdHlwZU9mKHJlbmFtZSwgZnMkcmVuYW1lKVxuICAgICAgcmV0dXJuIHJlbmFtZVxuICAgIH0pKGZzLnJlbmFtZSlcbiAgfVxuXG4gIC8vIGlmIHJlYWQoKSByZXR1cm5zIEVBR0FJTiwgdGhlbiBqdXN0IHRyeSBpdCBhZ2Fpbi5cbiAgZnMucmVhZCA9IHR5cGVvZiBmcy5yZWFkICE9PSAnZnVuY3Rpb24nID8gZnMucmVhZFxuICA6IChmdW5jdGlvbiAoZnMkcmVhZCkge1xuICAgIGZ1bmN0aW9uIHJlYWQgKGZkLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbiwgY2FsbGJhY2tfKSB7XG4gICAgICB2YXIgY2FsbGJhY2tcbiAgICAgIGlmIChjYWxsYmFja18gJiYgdHlwZW9mIGNhbGxiYWNrXyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgZWFnQ291bnRlciA9IDBcbiAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiAoZXIsIF8sIF9fKSB7XG4gICAgICAgICAgaWYgKGVyICYmIGVyLmNvZGUgPT09ICdFQUdBSU4nICYmIGVhZ0NvdW50ZXIgPCAxMCkge1xuICAgICAgICAgICAgZWFnQ291bnRlciArK1xuICAgICAgICAgICAgcmV0dXJuIGZzJHJlYWQuY2FsbChmcywgZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYWxsYmFjaylcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FsbGJhY2tfLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZzJHJlYWQuY2FsbChmcywgZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYWxsYmFjaylcbiAgICB9XG5cbiAgICAvLyBUaGlzIGVuc3VyZXMgYHV0aWwucHJvbWlzaWZ5YCB3b3JrcyBhcyBpdCBkb2VzIGZvciBuYXRpdmUgYGZzLnJlYWRgLlxuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIE9iamVjdC5zZXRQcm90b3R5cGVPZihyZWFkLCBmcyRyZWFkKVxuICAgIHJldHVybiByZWFkXG4gIH0pKGZzLnJlYWQpXG5cbiAgZnMucmVhZFN5bmMgPSB0eXBlb2YgZnMucmVhZFN5bmMgIT09ICdmdW5jdGlvbicgPyBmcy5yZWFkU3luY1xuICA6IChmdW5jdGlvbiAoZnMkcmVhZFN5bmMpIHsgcmV0dXJuIGZ1bmN0aW9uIChmZCwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pIHtcbiAgICB2YXIgZWFnQ291bnRlciA9IDBcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGZzJHJlYWRTeW5jLmNhbGwoZnMsIGZkLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbilcbiAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgIGlmIChlci5jb2RlID09PSAnRUFHQUlOJyAmJiBlYWdDb3VudGVyIDwgMTApIHtcbiAgICAgICAgICBlYWdDb3VudGVyICsrXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlclxuICAgICAgfVxuICAgIH1cbiAgfX0pKGZzLnJlYWRTeW5jKVxuXG4gIGZ1bmN0aW9uIHBhdGNoTGNobW9kIChmcykge1xuICAgIGZzLmxjaG1vZCA9IGZ1bmN0aW9uIChwYXRoLCBtb2RlLCBjYWxsYmFjaykge1xuICAgICAgZnMub3BlbiggcGF0aFxuICAgICAgICAgICAgICwgY29uc3RhbnRzLk9fV1JPTkxZIHwgY29uc3RhbnRzLk9fU1lNTElOS1xuICAgICAgICAgICAgICwgbW9kZVxuICAgICAgICAgICAgICwgZnVuY3Rpb24gKGVyciwgZmQpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIC8vIHByZWZlciB0byByZXR1cm4gdGhlIGNobW9kIGVycm9yLCBpZiBvbmUgb2NjdXJzLFxuICAgICAgICAvLyBidXQgc3RpbGwgdHJ5IHRvIGNsb3NlLCBhbmQgcmVwb3J0IGNsb3NpbmcgZXJyb3JzIGlmIHRoZXkgb2NjdXIuXG4gICAgICAgIGZzLmZjaG1vZChmZCwgbW9kZSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGZzLmNsb3NlKGZkLCBmdW5jdGlvbihlcnIyKSB7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGVyciB8fCBlcnIyKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZzLmxjaG1vZFN5bmMgPSBmdW5jdGlvbiAocGF0aCwgbW9kZSkge1xuICAgICAgdmFyIGZkID0gZnMub3BlblN5bmMocGF0aCwgY29uc3RhbnRzLk9fV1JPTkxZIHwgY29uc3RhbnRzLk9fU1lNTElOSywgbW9kZSlcblxuICAgICAgLy8gcHJlZmVyIHRvIHJldHVybiB0aGUgY2htb2QgZXJyb3IsIGlmIG9uZSBvY2N1cnMsXG4gICAgICAvLyBidXQgc3RpbGwgdHJ5IHRvIGNsb3NlLCBhbmQgcmVwb3J0IGNsb3NpbmcgZXJyb3JzIGlmIHRoZXkgb2NjdXIuXG4gICAgICB2YXIgdGhyZXcgPSB0cnVlXG4gICAgICB2YXIgcmV0XG4gICAgICB0cnkge1xuICAgICAgICByZXQgPSBmcy5mY2htb2RTeW5jKGZkLCBtb2RlKVxuICAgICAgICB0aHJldyA9IGZhbHNlXG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAodGhyZXcpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZnMuY2xvc2VTeW5jKGZkKVxuICAgICAgICAgIH0gY2F0Y2ggKGVyKSB7fVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZzLmNsb3NlU3luYyhmZClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJldFxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdGNoTHV0aW1lcyAoZnMpIHtcbiAgICBpZiAoY29uc3RhbnRzLmhhc093blByb3BlcnR5KFwiT19TWU1MSU5LXCIpICYmIGZzLmZ1dGltZXMpIHtcbiAgICAgIGZzLmx1dGltZXMgPSBmdW5jdGlvbiAocGF0aCwgYXQsIG10LCBjYikge1xuICAgICAgICBmcy5vcGVuKHBhdGgsIGNvbnN0YW50cy5PX1NZTUxJTkssIGZ1bmN0aW9uIChlciwgZmQpIHtcbiAgICAgICAgICBpZiAoZXIpIHtcbiAgICAgICAgICAgIGlmIChjYikgY2IoZXIpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgZnMuZnV0aW1lcyhmZCwgYXQsIG10LCBmdW5jdGlvbiAoZXIpIHtcbiAgICAgICAgICAgIGZzLmNsb3NlKGZkLCBmdW5jdGlvbiAoZXIyKSB7XG4gICAgICAgICAgICAgIGlmIChjYikgY2IoZXIgfHwgZXIyKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBmcy5sdXRpbWVzU3luYyA9IGZ1bmN0aW9uIChwYXRoLCBhdCwgbXQpIHtcbiAgICAgICAgdmFyIGZkID0gZnMub3BlblN5bmMocGF0aCwgY29uc3RhbnRzLk9fU1lNTElOSylcbiAgICAgICAgdmFyIHJldFxuICAgICAgICB2YXIgdGhyZXcgPSB0cnVlXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0ID0gZnMuZnV0aW1lc1N5bmMoZmQsIGF0LCBtdClcbiAgICAgICAgICB0aHJldyA9IGZhbHNlXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKHRocmV3KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmcy5jbG9zZVN5bmMoZmQpXG4gICAgICAgICAgICB9IGNhdGNoIChlcikge31cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnMuY2xvc2VTeW5jKGZkKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKGZzLmZ1dGltZXMpIHtcbiAgICAgIGZzLmx1dGltZXMgPSBmdW5jdGlvbiAoX2EsIF9iLCBfYywgY2IpIHsgaWYgKGNiKSBwcm9jZXNzLm5leHRUaWNrKGNiKSB9XG4gICAgICBmcy5sdXRpbWVzU3luYyA9IGZ1bmN0aW9uICgpIHt9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2htb2RGaXggKG9yaWcpIHtcbiAgICBpZiAoIW9yaWcpIHJldHVybiBvcmlnXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIG1vZGUsIGNiKSB7XG4gICAgICByZXR1cm4gb3JpZy5jYWxsKGZzLCB0YXJnZXQsIG1vZGUsIGZ1bmN0aW9uIChlcikge1xuICAgICAgICBpZiAoY2hvd25Fck9rKGVyKSkgZXIgPSBudWxsXG4gICAgICAgIGlmIChjYikgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaG1vZEZpeFN5bmMgKG9yaWcpIHtcbiAgICBpZiAoIW9yaWcpIHJldHVybiBvcmlnXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIG1vZGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBvcmlnLmNhbGwoZnMsIHRhcmdldCwgbW9kZSlcbiAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgIGlmICghY2hvd25Fck9rKGVyKSkgdGhyb3cgZXJcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGNob3duRml4IChvcmlnKSB7XG4gICAgaWYgKCFvcmlnKSByZXR1cm4gb3JpZ1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCB1aWQsIGdpZCwgY2IpIHtcbiAgICAgIHJldHVybiBvcmlnLmNhbGwoZnMsIHRhcmdldCwgdWlkLCBnaWQsIGZ1bmN0aW9uIChlcikge1xuICAgICAgICBpZiAoY2hvd25Fck9rKGVyKSkgZXIgPSBudWxsXG4gICAgICAgIGlmIChjYikgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaG93bkZpeFN5bmMgKG9yaWcpIHtcbiAgICBpZiAoIW9yaWcpIHJldHVybiBvcmlnXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHVpZCwgZ2lkKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gb3JpZy5jYWxsKGZzLCB0YXJnZXQsIHVpZCwgZ2lkKVxuICAgICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgICAgaWYgKCFjaG93bkVyT2soZXIpKSB0aHJvdyBlclxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXRGaXggKG9yaWcpIHtcbiAgICBpZiAoIW9yaWcpIHJldHVybiBvcmlnXG4gICAgLy8gT2xkZXIgdmVyc2lvbnMgb2YgTm9kZSBlcnJvbmVvdXNseSByZXR1cm5lZCBzaWduZWQgaW50ZWdlcnMgZm9yXG4gICAgLy8gdWlkICsgZ2lkLlxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zLCBjYikge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNiID0gb3B0aW9uc1xuICAgICAgICBvcHRpb25zID0gbnVsbFxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gY2FsbGJhY2sgKGVyLCBzdGF0cykge1xuICAgICAgICBpZiAoc3RhdHMpIHtcbiAgICAgICAgICBpZiAoc3RhdHMudWlkIDwgMCkgc3RhdHMudWlkICs9IDB4MTAwMDAwMDAwXG4gICAgICAgICAgaWYgKHN0YXRzLmdpZCA8IDApIHN0YXRzLmdpZCArPSAweDEwMDAwMDAwMFxuICAgICAgICB9XG4gICAgICAgIGlmIChjYikgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9wdGlvbnMgPyBvcmlnLmNhbGwoZnMsIHRhcmdldCwgb3B0aW9ucywgY2FsbGJhY2spXG4gICAgICAgIDogb3JpZy5jYWxsKGZzLCB0YXJnZXQsIGNhbGxiYWNrKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXRGaXhTeW5jIChvcmlnKSB7XG4gICAgaWYgKCFvcmlnKSByZXR1cm4gb3JpZ1xuICAgIC8vIE9sZGVyIHZlcnNpb25zIG9mIE5vZGUgZXJyb25lb3VzbHkgcmV0dXJuZWQgc2lnbmVkIGludGVnZXJzIGZvclxuICAgIC8vIHVpZCArIGdpZC5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgdmFyIHN0YXRzID0gb3B0aW9ucyA/IG9yaWcuY2FsbChmcywgdGFyZ2V0LCBvcHRpb25zKVxuICAgICAgICA6IG9yaWcuY2FsbChmcywgdGFyZ2V0KVxuICAgICAgaWYgKHN0YXRzKSB7XG4gICAgICAgIGlmIChzdGF0cy51aWQgPCAwKSBzdGF0cy51aWQgKz0gMHgxMDAwMDAwMDBcbiAgICAgICAgaWYgKHN0YXRzLmdpZCA8IDApIHN0YXRzLmdpZCArPSAweDEwMDAwMDAwMFxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEVOT1NZUyBtZWFucyB0aGF0IHRoZSBmcyBkb2Vzbid0IHN1cHBvcnQgdGhlIG9wLiBKdXN0IGlnbm9yZVxuICAvLyB0aGF0LCBiZWNhdXNlIGl0IGRvZXNuJ3QgbWF0dGVyLlxuICAvL1xuICAvLyBpZiB0aGVyZSdzIG5vIGdldHVpZCwgb3IgaWYgZ2V0dWlkKCkgaXMgc29tZXRoaW5nIG90aGVyXG4gIC8vIHRoYW4gMCwgYW5kIHRoZSBlcnJvciBpcyBFSU5WQUwgb3IgRVBFUk0sIHRoZW4ganVzdCBpZ25vcmVcbiAgLy8gaXQuXG4gIC8vXG4gIC8vIFRoaXMgc3BlY2lmaWMgY2FzZSBpcyBhIHNpbGVudCBmYWlsdXJlIGluIGNwLCBpbnN0YWxsLCB0YXIsXG4gIC8vIGFuZCBtb3N0IG90aGVyIHVuaXggdG9vbHMgdGhhdCBtYW5hZ2UgcGVybWlzc2lvbnMuXG4gIC8vXG4gIC8vIFdoZW4gcnVubmluZyBhcyByb290LCBvciBpZiBvdGhlciB0eXBlcyBvZiBlcnJvcnMgYXJlXG4gIC8vIGVuY291bnRlcmVkLCB0aGVuIGl0J3Mgc3RyaWN0LlxuICBmdW5jdGlvbiBjaG93bkVyT2sgKGVyKSB7XG4gICAgaWYgKCFlcilcbiAgICAgIHJldHVybiB0cnVlXG5cbiAgICBpZiAoZXIuY29kZSA9PT0gXCJFTk9TWVNcIilcbiAgICAgIHJldHVybiB0cnVlXG5cbiAgICB2YXIgbm9ucm9vdCA9ICFwcm9jZXNzLmdldHVpZCB8fCBwcm9jZXNzLmdldHVpZCgpICE9PSAwXG4gICAgaWYgKG5vbnJvb3QpIHtcbiAgICAgIGlmIChlci5jb2RlID09PSBcIkVJTlZBTFwiIHx8IGVyLmNvZGUgPT09IFwiRVBFUk1cIilcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJvcmlnQ3dkIiwicHJvY2VzcyIsImN3ZCIsInBsYXRmb3JtIiwiZW52IiwiR1JBQ0VGVUxfRlNfUExBVEZPUk0iLCJjYWxsIiwiZXIiLCJjaGRpciIsImQiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXRjaCIsImZzIiwiaGFzT3duUHJvcGVydHkiLCJ2ZXJzaW9uIiwibWF0Y2giLCJwYXRjaExjaG1vZCIsImx1dGltZXMiLCJwYXRjaEx1dGltZXMiLCJjaG93biIsImNob3duRml4IiwiZmNob3duIiwibGNob3duIiwiY2htb2QiLCJjaG1vZEZpeCIsImZjaG1vZCIsImxjaG1vZCIsImNob3duU3luYyIsImNob3duRml4U3luYyIsImZjaG93blN5bmMiLCJsY2hvd25TeW5jIiwiY2htb2RTeW5jIiwiY2htb2RGaXhTeW5jIiwiZmNobW9kU3luYyIsImxjaG1vZFN5bmMiLCJzdGF0Iiwic3RhdEZpeCIsImZzdGF0IiwibHN0YXQiLCJzdGF0U3luYyIsInN0YXRGaXhTeW5jIiwiZnN0YXRTeW5jIiwibHN0YXRTeW5jIiwicGF0aCIsIm1vZGUiLCJjYiIsIm5leHRUaWNrIiwidWlkIiwiZ2lkIiwicmVuYW1lIiwiZnMkcmVuYW1lIiwiZnJvbSIsInRvIiwic3RhcnQiLCJEYXRlIiwibm93IiwiYmFja29mZiIsIkNCIiwiY29kZSIsInNldFRpbWVvdXQiLCJzdGF0ZXIiLCJzdCIsInJlYWQiLCJmcyRyZWFkIiwiZmQiLCJidWZmZXIiLCJvZmZzZXQiLCJsZW5ndGgiLCJwb3NpdGlvbiIsImNhbGxiYWNrXyIsImNhbGxiYWNrIiwiZWFnQ291bnRlciIsIl8iLCJfXyIsImFwcGx5IiwiYXJndW1lbnRzIiwicmVhZFN5bmMiLCJmcyRyZWFkU3luYyIsIm9wZW4iLCJPX1dST05MWSIsIk9fU1lNTElOSyIsImVyciIsImNsb3NlIiwiZXJyMiIsIm9wZW5TeW5jIiwidGhyZXciLCJyZXQiLCJjbG9zZVN5bmMiLCJmdXRpbWVzIiwiYXQiLCJtdCIsImVyMiIsImx1dGltZXNTeW5jIiwiZnV0aW1lc1N5bmMiLCJfYSIsIl9iIiwiX2MiLCJvcmlnIiwidGFyZ2V0IiwiY2hvd25Fck9rIiwib3B0aW9ucyIsInN0YXRzIiwibm9ucm9vdCIsImdldHVpZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graceful-fs/polyfills.js\n");

/***/ })

};
;