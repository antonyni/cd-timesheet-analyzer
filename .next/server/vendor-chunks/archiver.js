/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/archiver";
exports.ids = ["vendor-chunks/archiver"];
exports.modules = {

/***/ "(ssr)/./node_modules/archiver/index.js":
/*!****************************************!*\
  !*** ./node_modules/archiver/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Archiver Vending\n *\n * @ignore\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */ var Archiver = __webpack_require__(/*! ./lib/core */ \"(ssr)/./node_modules/archiver/lib/core.js\");\nvar formats = {};\n/**\n * Dispenses a new Archiver instance.\n *\n * @constructor\n * @param  {String} format The archive format to use.\n * @param  {Object} options See [Archiver]{@link Archiver}\n * @return {Archiver}\n */ var vending = function(format, options) {\n    return vending.create(format, options);\n};\n/**\n * Creates a new Archiver instance.\n *\n * @param  {String} format The archive format to use.\n * @param  {Object} options See [Archiver]{@link Archiver}\n * @return {Archiver}\n */ vending.create = function(format, options) {\n    if (formats[format]) {\n        var instance = new Archiver(format, options);\n        instance.setFormat(format);\n        instance.setModule(new formats[format](options));\n        return instance;\n    } else {\n        throw new Error(\"create(\" + format + \"): format not registered\");\n    }\n};\n/**\n * Registers a format for use with archiver.\n *\n * @param  {String} format The name of the format.\n * @param  {Function} module The function for archiver to interact with.\n * @return void\n */ vending.registerFormat = function(format, module1) {\n    if (formats[format]) {\n        throw new Error(\"register(\" + format + \"): format already registered\");\n    }\n    if (typeof module1 !== \"function\") {\n        throw new Error(\"register(\" + format + \"): format module invalid\");\n    }\n    if (typeof module1.prototype.append !== \"function\" || typeof module1.prototype.finalize !== \"function\") {\n        throw new Error(\"register(\" + format + \"): format module missing methods\");\n    }\n    formats[format] = module1;\n};\n/**\n * Check if the format is already registered.\n * \n * @param {String} format the name of the format.\n * @return boolean\n */ vending.isRegisteredFormat = function(format) {\n    if (formats[format]) {\n        return true;\n    }\n    return false;\n};\nvending.registerFormat(\"zip\", __webpack_require__(/*! ./lib/plugins/zip */ \"(ssr)/./node_modules/archiver/lib/plugins/zip.js\"));\nvending.registerFormat(\"tar\", __webpack_require__(/*! ./lib/plugins/tar */ \"(ssr)/./node_modules/archiver/lib/plugins/tar.js\"));\nvending.registerFormat(\"json\", __webpack_require__(/*! ./lib/plugins/json */ \"(ssr)/./node_modules/archiver/lib/plugins/json.js\"));\nmodule.exports = vending;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DLEdBQ0QsSUFBSUEsV0FBV0MsbUJBQU9BLENBQUM7QUFFdkIsSUFBSUMsVUFBVSxDQUFDO0FBRWY7Ozs7Ozs7Q0FPQyxHQUNELElBQUlDLFVBQVUsU0FBU0MsTUFBTSxFQUFFQyxPQUFPO0lBQ3BDLE9BQU9GLFFBQVFHLE1BQU0sQ0FBQ0YsUUFBUUM7QUFDaEM7QUFFQTs7Ozs7O0NBTUMsR0FDREYsUUFBUUcsTUFBTSxHQUFHLFNBQVNGLE1BQU0sRUFBRUMsT0FBTztJQUN2QyxJQUFJSCxPQUFPLENBQUNFLE9BQU8sRUFBRTtRQUNuQixJQUFJRyxXQUFXLElBQUlQLFNBQVNJLFFBQVFDO1FBQ3BDRSxTQUFTQyxTQUFTLENBQUNKO1FBQ25CRyxTQUFTRSxTQUFTLENBQUMsSUFBSVAsT0FBTyxDQUFDRSxPQUFPLENBQUNDO1FBRXZDLE9BQU9FO0lBQ1QsT0FBTztRQUNMLE1BQU0sSUFBSUcsTUFBTSxZQUFZTixTQUFTO0lBQ3ZDO0FBQ0Y7QUFFQTs7Ozs7O0NBTUMsR0FDREQsUUFBUVEsY0FBYyxHQUFHLFNBQVNQLE1BQU0sRUFBRVEsT0FBTTtJQUM5QyxJQUFJVixPQUFPLENBQUNFLE9BQU8sRUFBRTtRQUNuQixNQUFNLElBQUlNLE1BQU0sY0FBY04sU0FBUztJQUN6QztJQUVBLElBQUksT0FBT1EsWUFBVyxZQUFZO1FBQ2hDLE1BQU0sSUFBSUYsTUFBTSxjQUFjTixTQUFTO0lBQ3pDO0lBRUEsSUFBSSxPQUFPUSxRQUFPQyxTQUFTLENBQUNDLE1BQU0sS0FBSyxjQUFjLE9BQU9GLFFBQU9DLFNBQVMsQ0FBQ0UsUUFBUSxLQUFLLFlBQVk7UUFDcEcsTUFBTSxJQUFJTCxNQUFNLGNBQWNOLFNBQVM7SUFDekM7SUFFQUYsT0FBTyxDQUFDRSxPQUFPLEdBQUdRO0FBQ3BCO0FBRUE7Ozs7O0NBS0MsR0FDRFQsUUFBUWEsa0JBQWtCLEdBQUcsU0FBVVosTUFBTTtJQUMzQyxJQUFJRixPQUFPLENBQUNFLE9BQU8sRUFBRTtRQUNuQixPQUFPO0lBQ1Q7SUFFQSxPQUFPO0FBQ1Q7QUFFQUQsUUFBUVEsY0FBYyxDQUFDLE9BQU9WLG1CQUFPQSxDQUFDO0FBQ3RDRSxRQUFRUSxjQUFjLENBQUMsT0FBT1YsbUJBQU9BLENBQUM7QUFDdENFLFFBQVFRLGNBQWMsQ0FBQyxRQUFRVixtQkFBT0EsQ0FBQztBQUV2Q1csT0FBT0ssT0FBTyxHQUFHZCIsInNvdXJjZXMiOlsid2VicGFjazovL2NkLXRpbWVzaGVldC1hbmFseXplci8uL25vZGVfbW9kdWxlcy9hcmNoaXZlci9pbmRleC5qcz8wYzk4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQXJjaGl2ZXIgVmVuZGluZ1xuICpcbiAqIEBpZ25vcmVcbiAqIEBsaWNlbnNlIFtNSVRde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9hcmNoaXZlcmpzL25vZGUtYXJjaGl2ZXIvYmxvYi9tYXN0ZXIvTElDRU5TRX1cbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTItMjAxNCBDaHJpcyBUYWxraW5ndG9uLCBjb250cmlidXRvcnMuXG4gKi9cbnZhciBBcmNoaXZlciA9IHJlcXVpcmUoJy4vbGliL2NvcmUnKTtcblxudmFyIGZvcm1hdHMgPSB7fTtcblxuLyoqXG4gKiBEaXNwZW5zZXMgYSBuZXcgQXJjaGl2ZXIgaW5zdGFuY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGZvcm1hdCBUaGUgYXJjaGl2ZSBmb3JtYXQgdG8gdXNlLlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zIFNlZSBbQXJjaGl2ZXJde0BsaW5rIEFyY2hpdmVyfVxuICogQHJldHVybiB7QXJjaGl2ZXJ9XG4gKi9cbnZhciB2ZW5kaW5nID0gZnVuY3Rpb24oZm9ybWF0LCBvcHRpb25zKSB7XG4gIHJldHVybiB2ZW5kaW5nLmNyZWF0ZShmb3JtYXQsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IEFyY2hpdmVyIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gZm9ybWF0IFRoZSBhcmNoaXZlIGZvcm1hdCB0byB1c2UuXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMgU2VlIFtBcmNoaXZlcl17QGxpbmsgQXJjaGl2ZXJ9XG4gKiBAcmV0dXJuIHtBcmNoaXZlcn1cbiAqL1xudmVuZGluZy5jcmVhdGUgPSBmdW5jdGlvbihmb3JtYXQsIG9wdGlvbnMpIHtcbiAgaWYgKGZvcm1hdHNbZm9ybWF0XSkge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBBcmNoaXZlcihmb3JtYXQsIG9wdGlvbnMpO1xuICAgIGluc3RhbmNlLnNldEZvcm1hdChmb3JtYXQpO1xuICAgIGluc3RhbmNlLnNldE1vZHVsZShuZXcgZm9ybWF0c1tmb3JtYXRdKG9wdGlvbnMpKTtcblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZSgnICsgZm9ybWF0ICsgJyk6IGZvcm1hdCBub3QgcmVnaXN0ZXJlZCcpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlZ2lzdGVycyBhIGZvcm1hdCBmb3IgdXNlIHdpdGggYXJjaGl2ZXIuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBmb3JtYXQgVGhlIG5hbWUgb2YgdGhlIGZvcm1hdC5cbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBtb2R1bGUgVGhlIGZ1bmN0aW9uIGZvciBhcmNoaXZlciB0byBpbnRlcmFjdCB3aXRoLlxuICogQHJldHVybiB2b2lkXG4gKi9cbnZlbmRpbmcucmVnaXN0ZXJGb3JtYXQgPSBmdW5jdGlvbihmb3JtYXQsIG1vZHVsZSkge1xuICBpZiAoZm9ybWF0c1tmb3JtYXRdKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdyZWdpc3RlcignICsgZm9ybWF0ICsgJyk6IGZvcm1hdCBhbHJlYWR5IHJlZ2lzdGVyZWQnKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgbW9kdWxlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdyZWdpc3RlcignICsgZm9ybWF0ICsgJyk6IGZvcm1hdCBtb2R1bGUgaW52YWxpZCcpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUucHJvdG90eXBlLmFwcGVuZCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgbW9kdWxlLnByb3RvdHlwZS5maW5hbGl6ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcigncmVnaXN0ZXIoJyArIGZvcm1hdCArICcpOiBmb3JtYXQgbW9kdWxlIG1pc3NpbmcgbWV0aG9kcycpO1xuICB9XG5cbiAgZm9ybWF0c1tmb3JtYXRdID0gbW9kdWxlO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZm9ybWF0IGlzIGFscmVhZHkgcmVnaXN0ZXJlZC5cbiAqIFxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCB0aGUgbmFtZSBvZiB0aGUgZm9ybWF0LlxuICogQHJldHVybiBib29sZWFuXG4gKi9cbnZlbmRpbmcuaXNSZWdpc3RlcmVkRm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuICBpZiAoZm9ybWF0c1tmb3JtYXRdKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbnZlbmRpbmcucmVnaXN0ZXJGb3JtYXQoJ3ppcCcsIHJlcXVpcmUoJy4vbGliL3BsdWdpbnMvemlwJykpO1xudmVuZGluZy5yZWdpc3RlckZvcm1hdCgndGFyJywgcmVxdWlyZSgnLi9saWIvcGx1Z2lucy90YXInKSk7XG52ZW5kaW5nLnJlZ2lzdGVyRm9ybWF0KCdqc29uJywgcmVxdWlyZSgnLi9saWIvcGx1Z2lucy9qc29uJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHZlbmRpbmc7Il0sIm5hbWVzIjpbIkFyY2hpdmVyIiwicmVxdWlyZSIsImZvcm1hdHMiLCJ2ZW5kaW5nIiwiZm9ybWF0Iiwib3B0aW9ucyIsImNyZWF0ZSIsImluc3RhbmNlIiwic2V0Rm9ybWF0Iiwic2V0TW9kdWxlIiwiRXJyb3IiLCJyZWdpc3RlckZvcm1hdCIsIm1vZHVsZSIsInByb3RvdHlwZSIsImFwcGVuZCIsImZpbmFsaXplIiwiaXNSZWdpc3RlcmVkRm9ybWF0IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/lib/core.js":
/*!*******************************************!*\
  !*** ./node_modules/archiver/lib/core.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Archiver Core\n *\n * @ignore\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */ var fs = __webpack_require__(/*! fs */ \"fs\");\nvar glob = __webpack_require__(/*! readdir-glob */ \"(ssr)/./node_modules/readdir-glob/index.js\");\nvar async = __webpack_require__(/*! async */ \"(ssr)/./node_modules/async/dist/async.mjs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar util = __webpack_require__(/*! archiver-utils */ \"(ssr)/./node_modules/archiver-utils/index.js\");\nvar inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nvar ArchiverError = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/archiver/lib/error.js\");\nvar Transform = (__webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\").Transform);\nvar win32 = process.platform === \"win32\";\n/**\n * @constructor\n * @param {String} format The archive format to use.\n * @param {(CoreOptions|TransformOptions)} options See also {@link ZipOptions} and {@link TarOptions}.\n */ var Archiver = function(format, options) {\n    if (!(this instanceof Archiver)) {\n        return new Archiver(format, options);\n    }\n    if (typeof format !== \"string\") {\n        options = format;\n        format = \"zip\";\n    }\n    options = this.options = util.defaults(options, {\n        highWaterMark: 1024 * 1024,\n        statConcurrency: 4\n    });\n    Transform.call(this, options);\n    this._format = false;\n    this._module = false;\n    this._pending = 0;\n    this._pointer = 0;\n    this._entriesCount = 0;\n    this._entriesProcessedCount = 0;\n    this._fsEntriesTotalBytes = 0;\n    this._fsEntriesProcessedBytes = 0;\n    this._queue = async.queue(this._onQueueTask.bind(this), 1);\n    this._queue.drain(this._onQueueDrain.bind(this));\n    this._statQueue = async.queue(this._onStatQueueTask.bind(this), options.statConcurrency);\n    this._statQueue.drain(this._onQueueDrain.bind(this));\n    this._state = {\n        aborted: false,\n        finalize: false,\n        finalizing: false,\n        finalized: false,\n        modulePiped: false\n    };\n    this._streams = [];\n};\ninherits(Archiver, Transform);\n/**\n * Internal logic for `abort`.\n *\n * @private\n * @return void\n */ Archiver.prototype._abort = function() {\n    this._state.aborted = true;\n    this._queue.kill();\n    this._statQueue.kill();\n    if (this._queue.idle()) {\n        this._shutdown();\n    }\n};\n/**\n * Internal helper for appending files.\n *\n * @private\n * @param  {String} filepath The source filepath.\n * @param  {EntryData} data The entry data.\n * @return void\n */ Archiver.prototype._append = function(filepath, data) {\n    data = data || {};\n    var task = {\n        source: null,\n        filepath: filepath\n    };\n    if (!data.name) {\n        data.name = filepath;\n    }\n    data.sourcePath = filepath;\n    task.data = data;\n    this._entriesCount++;\n    if (data.stats && data.stats instanceof fs.Stats) {\n        task = this._updateQueueTaskWithStats(task, data.stats);\n        if (task) {\n            if (data.stats.size) {\n                this._fsEntriesTotalBytes += data.stats.size;\n            }\n            this._queue.push(task);\n        }\n    } else {\n        this._statQueue.push(task);\n    }\n};\n/**\n * Internal logic for `finalize`.\n *\n * @private\n * @return void\n */ Archiver.prototype._finalize = function() {\n    if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n        return;\n    }\n    this._state.finalizing = true;\n    this._moduleFinalize();\n    this._state.finalizing = false;\n    this._state.finalized = true;\n};\n/**\n * Checks the various state variables to determine if we can `finalize`.\n *\n * @private\n * @return {Boolean}\n */ Archiver.prototype._maybeFinalize = function() {\n    if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n        return false;\n    }\n    if (this._state.finalize && this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {\n        this._finalize();\n        return true;\n    }\n    return false;\n};\n/**\n * Appends an entry to the module.\n *\n * @private\n * @fires  Archiver#entry\n * @param  {(Buffer|Stream)} source\n * @param  {EntryData} data\n * @param  {Function} callback\n * @return void\n */ Archiver.prototype._moduleAppend = function(source, data, callback) {\n    if (this._state.aborted) {\n        callback();\n        return;\n    }\n    this._module.append(source, data, (function(err) {\n        this._task = null;\n        if (this._state.aborted) {\n            this._shutdown();\n            return;\n        }\n        if (err) {\n            this.emit(\"error\", err);\n            setImmediate(callback);\n            return;\n        }\n        /**\n     * Fires when the entry's input has been processed and appended to the archive.\n     *\n     * @event Archiver#entry\n     * @type {EntryData}\n     */ this.emit(\"entry\", data);\n        this._entriesProcessedCount++;\n        if (data.stats && data.stats.size) {\n            this._fsEntriesProcessedBytes += data.stats.size;\n        }\n        /**\n     * @event Archiver#progress\n     * @type {ProgressData}\n     */ this.emit(\"progress\", {\n            entries: {\n                total: this._entriesCount,\n                processed: this._entriesProcessedCount\n            },\n            fs: {\n                totalBytes: this._fsEntriesTotalBytes,\n                processedBytes: this._fsEntriesProcessedBytes\n            }\n        });\n        setImmediate(callback);\n    }).bind(this));\n};\n/**\n * Finalizes the module.\n *\n * @private\n * @return void\n */ Archiver.prototype._moduleFinalize = function() {\n    if (typeof this._module.finalize === \"function\") {\n        this._module.finalize();\n    } else if (typeof this._module.end === \"function\") {\n        this._module.end();\n    } else {\n        this.emit(\"error\", new ArchiverError(\"NOENDMETHOD\"));\n    }\n};\n/**\n * Pipes the module to our internal stream with error bubbling.\n *\n * @private\n * @return void\n */ Archiver.prototype._modulePipe = function() {\n    this._module.on(\"error\", this._onModuleError.bind(this));\n    this._module.pipe(this);\n    this._state.modulePiped = true;\n};\n/**\n * Determines if the current module supports a defined feature.\n *\n * @private\n * @param  {String} key\n * @return {Boolean}\n */ Archiver.prototype._moduleSupports = function(key) {\n    if (!this._module.supports || !this._module.supports[key]) {\n        return false;\n    }\n    return this._module.supports[key];\n};\n/**\n * Unpipes the module from our internal stream.\n *\n * @private\n * @return void\n */ Archiver.prototype._moduleUnpipe = function() {\n    this._module.unpipe(this);\n    this._state.modulePiped = false;\n};\n/**\n * Normalizes entry data with fallbacks for key properties.\n *\n * @private\n * @param  {Object} data\n * @param  {fs.Stats} stats\n * @return {Object}\n */ Archiver.prototype._normalizeEntryData = function(data, stats) {\n    data = util.defaults(data, {\n        type: \"file\",\n        name: null,\n        date: null,\n        mode: null,\n        prefix: null,\n        sourcePath: null,\n        stats: false\n    });\n    if (stats && data.stats === false) {\n        data.stats = stats;\n    }\n    var isDir = data.type === \"directory\";\n    if (data.name) {\n        if (typeof data.prefix === \"string\" && \"\" !== data.prefix) {\n            data.name = data.prefix + \"/\" + data.name;\n            data.prefix = null;\n        }\n        data.name = util.sanitizePath(data.name);\n        if (data.type !== \"symlink\" && data.name.slice(-1) === \"/\") {\n            isDir = true;\n            data.type = \"directory\";\n        } else if (isDir) {\n            data.name += \"/\";\n        }\n    }\n    // 511 === 0777; 493 === 0755; 438 === 0666; 420 === 0644\n    if (typeof data.mode === \"number\") {\n        if (win32) {\n            data.mode &= 511;\n        } else {\n            data.mode &= 4095;\n        }\n    } else if (data.stats && data.mode === null) {\n        if (win32) {\n            data.mode = data.stats.mode & 511;\n        } else {\n            data.mode = data.stats.mode & 4095;\n        }\n        // stat isn't reliable on windows; force 0755 for dir\n        if (win32 && isDir) {\n            data.mode = 493;\n        }\n    } else if (data.mode === null) {\n        data.mode = isDir ? 493 : 420;\n    }\n    if (data.stats && data.date === null) {\n        data.date = data.stats.mtime;\n    } else {\n        data.date = util.dateify(data.date);\n    }\n    return data;\n};\n/**\n * Error listener that re-emits error on to our internal stream.\n *\n * @private\n * @param  {Error} err\n * @return void\n */ Archiver.prototype._onModuleError = function(err) {\n    /**\n   * @event Archiver#error\n   * @type {ErrorData}\n   */ this.emit(\"error\", err);\n};\n/**\n * Checks the various state variables after queue has drained to determine if\n * we need to `finalize`.\n *\n * @private\n * @return void\n */ Archiver.prototype._onQueueDrain = function() {\n    if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n        return;\n    }\n    if (this._state.finalize && this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {\n        this._finalize();\n    }\n};\n/**\n * Appends each queue task to the module.\n *\n * @private\n * @param  {Object} task\n * @param  {Function} callback\n * @return void\n */ Archiver.prototype._onQueueTask = function(task, callback) {\n    var fullCallback = ()=>{\n        if (task.data.callback) {\n            task.data.callback();\n        }\n        callback();\n    };\n    if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n        fullCallback();\n        return;\n    }\n    this._task = task;\n    this._moduleAppend(task.source, task.data, fullCallback);\n};\n/**\n * Performs a file stat and reinjects the task back into the queue.\n *\n * @private\n * @param  {Object} task\n * @param  {Function} callback\n * @return void\n */ Archiver.prototype._onStatQueueTask = function(task, callback) {\n    if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n        callback();\n        return;\n    }\n    fs.lstat(task.filepath, (function(err, stats) {\n        if (this._state.aborted) {\n            setImmediate(callback);\n            return;\n        }\n        if (err) {\n            this._entriesCount--;\n            /**\n       * @event Archiver#warning\n       * @type {ErrorData}\n       */ this.emit(\"warning\", err);\n            setImmediate(callback);\n            return;\n        }\n        task = this._updateQueueTaskWithStats(task, stats);\n        if (task) {\n            if (stats.size) {\n                this._fsEntriesTotalBytes += stats.size;\n            }\n            this._queue.push(task);\n        }\n        setImmediate(callback);\n    }).bind(this));\n};\n/**\n * Unpipes the module and ends our internal stream.\n *\n * @private\n * @return void\n */ Archiver.prototype._shutdown = function() {\n    this._moduleUnpipe();\n    this.end();\n};\n/**\n * Tracks the bytes emitted by our internal stream.\n *\n * @private\n * @param  {Buffer} chunk\n * @param  {String} encoding\n * @param  {Function} callback\n * @return void\n */ Archiver.prototype._transform = function(chunk, encoding, callback) {\n    if (chunk) {\n        this._pointer += chunk.length;\n    }\n    callback(null, chunk);\n};\n/**\n * Updates and normalizes a queue task using stats data.\n *\n * @private\n * @param  {Object} task\n * @param  {fs.Stats} stats\n * @return {Object}\n */ Archiver.prototype._updateQueueTaskWithStats = function(task, stats) {\n    if (stats.isFile()) {\n        task.data.type = \"file\";\n        task.data.sourceType = \"stream\";\n        task.source = util.lazyReadStream(task.filepath);\n    } else if (stats.isDirectory() && this._moduleSupports(\"directory\")) {\n        task.data.name = util.trailingSlashIt(task.data.name);\n        task.data.type = \"directory\";\n        task.data.sourcePath = util.trailingSlashIt(task.filepath);\n        task.data.sourceType = \"buffer\";\n        task.source = Buffer.concat([]);\n    } else if (stats.isSymbolicLink() && this._moduleSupports(\"symlink\")) {\n        var linkPath = fs.readlinkSync(task.filepath);\n        var dirName = path.dirname(task.filepath);\n        task.data.type = \"symlink\";\n        task.data.linkname = path.relative(dirName, path.resolve(dirName, linkPath));\n        task.data.sourceType = \"buffer\";\n        task.source = Buffer.concat([]);\n    } else {\n        if (stats.isDirectory()) {\n            this.emit(\"warning\", new ArchiverError(\"DIRECTORYNOTSUPPORTED\", task.data));\n        } else if (stats.isSymbolicLink()) {\n            this.emit(\"warning\", new ArchiverError(\"SYMLINKNOTSUPPORTED\", task.data));\n        } else {\n            this.emit(\"warning\", new ArchiverError(\"ENTRYNOTSUPPORTED\", task.data));\n        }\n        return null;\n    }\n    task.data = this._normalizeEntryData(task.data, stats);\n    return task;\n};\n/**\n * Aborts the archiving process, taking a best-effort approach, by:\n *\n * - removing any pending queue tasks\n * - allowing any active queue workers to finish\n * - detaching internal module pipes\n * - ending both sides of the Transform stream\n *\n * It will NOT drain any remaining sources.\n *\n * @return {this}\n */ Archiver.prototype.abort = function() {\n    if (this._state.aborted || this._state.finalized) {\n        return this;\n    }\n    this._abort();\n    return this;\n};\n/**\n * Appends an input source (text string, buffer, or stream) to the instance.\n *\n * When the instance has received, processed, and emitted the input, the `entry`\n * event is fired.\n *\n * @fires  Archiver#entry\n * @param  {(Buffer|Stream|String)} source The input source.\n * @param  {EntryData} data See also {@link ZipEntryData} and {@link TarEntryData}.\n * @return {this}\n */ Archiver.prototype.append = function(source, data) {\n    if (this._state.finalize || this._state.aborted) {\n        this.emit(\"error\", new ArchiverError(\"QUEUECLOSED\"));\n        return this;\n    }\n    data = this._normalizeEntryData(data);\n    if (typeof data.name !== \"string\" || data.name.length === 0) {\n        this.emit(\"error\", new ArchiverError(\"ENTRYNAMEREQUIRED\"));\n        return this;\n    }\n    if (data.type === \"directory\" && !this._moduleSupports(\"directory\")) {\n        this.emit(\"error\", new ArchiverError(\"DIRECTORYNOTSUPPORTED\", {\n            name: data.name\n        }));\n        return this;\n    }\n    source = util.normalizeInputSource(source);\n    if (Buffer.isBuffer(source)) {\n        data.sourceType = \"buffer\";\n    } else if (util.isStream(source)) {\n        data.sourceType = \"stream\";\n    } else {\n        this.emit(\"error\", new ArchiverError(\"INPUTSTEAMBUFFERREQUIRED\", {\n            name: data.name\n        }));\n        return this;\n    }\n    this._entriesCount++;\n    this._queue.push({\n        data: data,\n        source: source\n    });\n    return this;\n};\n/**\n * Appends a directory and its files, recursively, given its dirpath.\n *\n * @param  {String} dirpath The source directory path.\n * @param  {String} destpath The destination path within the archive.\n * @param  {(EntryData|Function)} data See also [ZipEntryData]{@link ZipEntryData} and\n * [TarEntryData]{@link TarEntryData}.\n * @return {this}\n */ Archiver.prototype.directory = function(dirpath, destpath, data) {\n    if (this._state.finalize || this._state.aborted) {\n        this.emit(\"error\", new ArchiverError(\"QUEUECLOSED\"));\n        return this;\n    }\n    if (typeof dirpath !== \"string\" || dirpath.length === 0) {\n        this.emit(\"error\", new ArchiverError(\"DIRECTORYDIRPATHREQUIRED\"));\n        return this;\n    }\n    this._pending++;\n    if (destpath === false) {\n        destpath = \"\";\n    } else if (typeof destpath !== \"string\") {\n        destpath = dirpath;\n    }\n    var dataFunction = false;\n    if (typeof data === \"function\") {\n        dataFunction = data;\n        data = {};\n    } else if (typeof data !== \"object\") {\n        data = {};\n    }\n    var globOptions = {\n        stat: true,\n        dot: true\n    };\n    function onGlobEnd() {\n        this._pending--;\n        this._maybeFinalize();\n    }\n    function onGlobError(err) {\n        this.emit(\"error\", err);\n    }\n    function onGlobMatch(match) {\n        globber.pause();\n        var ignoreMatch = false;\n        var entryData = Object.assign({}, data);\n        entryData.name = match.relative;\n        entryData.prefix = destpath;\n        entryData.stats = match.stat;\n        entryData.callback = globber.resume.bind(globber);\n        try {\n            if (dataFunction) {\n                entryData = dataFunction(entryData);\n                if (entryData === false) {\n                    ignoreMatch = true;\n                } else if (typeof entryData !== \"object\") {\n                    throw new ArchiverError(\"DIRECTORYFUNCTIONINVALIDDATA\", {\n                        dirpath: dirpath\n                    });\n                }\n            }\n        } catch (e) {\n            this.emit(\"error\", e);\n            return;\n        }\n        if (ignoreMatch) {\n            globber.resume();\n            return;\n        }\n        this._append(match.absolute, entryData);\n    }\n    var globber = glob(dirpath, globOptions);\n    globber.on(\"error\", onGlobError.bind(this));\n    globber.on(\"match\", onGlobMatch.bind(this));\n    globber.on(\"end\", onGlobEnd.bind(this));\n    return this;\n};\n/**\n * Appends a file given its filepath using a\n * [lazystream]{@link https://github.com/jpommerening/node-lazystream} wrapper to\n * prevent issues with open file limits.\n *\n * When the instance has received, processed, and emitted the file, the `entry`\n * event is fired.\n *\n * @param  {String} filepath The source filepath.\n * @param  {EntryData} data See also [ZipEntryData]{@link ZipEntryData} and\n * [TarEntryData]{@link TarEntryData}.\n * @return {this}\n */ Archiver.prototype.file = function(filepath, data) {\n    if (this._state.finalize || this._state.aborted) {\n        this.emit(\"error\", new ArchiverError(\"QUEUECLOSED\"));\n        return this;\n    }\n    if (typeof filepath !== \"string\" || filepath.length === 0) {\n        this.emit(\"error\", new ArchiverError(\"FILEFILEPATHREQUIRED\"));\n        return this;\n    }\n    this._append(filepath, data);\n    return this;\n};\n/**\n * Appends multiple files that match a glob pattern.\n *\n * @param  {String} pattern The [glob pattern]{@link https://github.com/isaacs/minimatch} to match.\n * @param  {Object} options See [node-readdir-glob]{@link https://github.com/yqnn/node-readdir-glob#options}.\n * @param  {EntryData} data See also [ZipEntryData]{@link ZipEntryData} and\n * [TarEntryData]{@link TarEntryData}.\n * @return {this}\n */ Archiver.prototype.glob = function(pattern, options, data) {\n    this._pending++;\n    options = util.defaults(options, {\n        stat: true,\n        pattern: pattern\n    });\n    function onGlobEnd() {\n        this._pending--;\n        this._maybeFinalize();\n    }\n    function onGlobError(err) {\n        this.emit(\"error\", err);\n    }\n    function onGlobMatch(match) {\n        globber.pause();\n        var entryData = Object.assign({}, data);\n        entryData.callback = globber.resume.bind(globber);\n        entryData.stats = match.stat;\n        entryData.name = match.relative;\n        this._append(match.absolute, entryData);\n    }\n    var globber = glob(options.cwd || \".\", options);\n    globber.on(\"error\", onGlobError.bind(this));\n    globber.on(\"match\", onGlobMatch.bind(this));\n    globber.on(\"end\", onGlobEnd.bind(this));\n    return this;\n};\n/**\n * Finalizes the instance and prevents further appending to the archive\n * structure (queue will continue til drained).\n *\n * The `end`, `close` or `finish` events on the destination stream may fire\n * right after calling this method so you should set listeners beforehand to\n * properly detect stream completion.\n *\n * @return {Promise}\n */ Archiver.prototype.finalize = function() {\n    if (this._state.aborted) {\n        var abortedError = new ArchiverError(\"ABORTED\");\n        this.emit(\"error\", abortedError);\n        return Promise.reject(abortedError);\n    }\n    if (this._state.finalize) {\n        var finalizingError = new ArchiverError(\"FINALIZING\");\n        this.emit(\"error\", finalizingError);\n        return Promise.reject(finalizingError);\n    }\n    this._state.finalize = true;\n    if (this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {\n        this._finalize();\n    }\n    var self = this;\n    return new Promise(function(resolve, reject) {\n        var errored;\n        self._module.on(\"end\", function() {\n            if (!errored) {\n                resolve();\n            }\n        });\n        self._module.on(\"error\", function(err) {\n            errored = true;\n            reject(err);\n        });\n    });\n};\n/**\n * Sets the module format name used for archiving.\n *\n * @param {String} format The name of the format.\n * @return {this}\n */ Archiver.prototype.setFormat = function(format) {\n    if (this._format) {\n        this.emit(\"error\", new ArchiverError(\"FORMATSET\"));\n        return this;\n    }\n    this._format = format;\n    return this;\n};\n/**\n * Sets the module used for archiving.\n *\n * @param {Function} module The function for archiver to interact with.\n * @return {this}\n */ Archiver.prototype.setModule = function(module1) {\n    if (this._state.aborted) {\n        this.emit(\"error\", new ArchiverError(\"ABORTED\"));\n        return this;\n    }\n    if (this._state.module) {\n        this.emit(\"error\", new ArchiverError(\"MODULESET\"));\n        return this;\n    }\n    this._module = module1;\n    this._modulePipe();\n    return this;\n};\n/**\n * Appends a symlink to the instance.\n *\n * This does NOT interact with filesystem and is used for programmatically creating symlinks.\n *\n * @param  {String} filepath The symlink path (within archive).\n * @param  {String} target The target path (within archive).\n * @param  {Number} mode Sets the entry permissions.\n * @return {this}\n */ Archiver.prototype.symlink = function(filepath, target, mode) {\n    if (this._state.finalize || this._state.aborted) {\n        this.emit(\"error\", new ArchiverError(\"QUEUECLOSED\"));\n        return this;\n    }\n    if (typeof filepath !== \"string\" || filepath.length === 0) {\n        this.emit(\"error\", new ArchiverError(\"SYMLINKFILEPATHREQUIRED\"));\n        return this;\n    }\n    if (typeof target !== \"string\" || target.length === 0) {\n        this.emit(\"error\", new ArchiverError(\"SYMLINKTARGETREQUIRED\", {\n            filepath: filepath\n        }));\n        return this;\n    }\n    if (!this._moduleSupports(\"symlink\")) {\n        this.emit(\"error\", new ArchiverError(\"SYMLINKNOTSUPPORTED\", {\n            filepath: filepath\n        }));\n        return this;\n    }\n    var data = {};\n    data.type = \"symlink\";\n    data.name = filepath.replace(/\\\\/g, \"/\");\n    data.linkname = target.replace(/\\\\/g, \"/\");\n    data.sourceType = \"buffer\";\n    if (typeof mode === \"number\") {\n        data.mode = mode;\n    }\n    this._entriesCount++;\n    this._queue.push({\n        data: data,\n        source: Buffer.concat([])\n    });\n    return this;\n};\n/**\n * Returns the current length (in bytes) that has been emitted.\n *\n * @return {Number}\n */ Archiver.prototype.pointer = function() {\n    return this._pointer;\n};\n/**\n * Middleware-like helper that has yet to be fully implemented.\n *\n * @private\n * @param  {Function} plugin\n * @return {this}\n */ Archiver.prototype.use = function(plugin) {\n    this._streams.push(plugin);\n    return this;\n};\nmodule.exports = Archiver; /**\n * @typedef {Object} CoreOptions\n * @global\n * @property {Number} [statConcurrency=4] Sets the number of workers used to\n * process the internal fs stat queue.\n */  /**\n * @typedef {Object} TransformOptions\n * @property {Boolean} [allowHalfOpen=true] If set to false, then the stream\n * will automatically end the readable side when the writable side ends and vice\n * versa.\n * @property {Boolean} [readableObjectMode=false] Sets objectMode for readable\n * side of the stream. Has no effect if objectMode is true.\n * @property {Boolean} [writableObjectMode=false] Sets objectMode for writable\n * side of the stream. Has no effect if objectMode is true.\n * @property {Boolean} [decodeStrings=true] Whether or not to decode strings\n * into Buffers before passing them to _write(). `Writable`\n * @property {String} [encoding=NULL] If specified, then buffers will be decoded\n * to strings using the specified encoding. `Readable`\n * @property {Number} [highWaterMark=16kb] The maximum number of bytes to store\n * in the internal buffer before ceasing to read from the underlying resource.\n * `Readable` `Writable`\n * @property {Boolean} [objectMode=false] Whether this stream should behave as a\n * stream of objects. Meaning that stream.read(n) returns a single value instead\n * of a Buffer of size n. `Readable` `Writable`\n */  /**\n * @typedef {Object} EntryData\n * @property {String} name Sets the entry name including internal path.\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\n * when working with methods like `directory` or `glob`.\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\n * for reduction of fs stat calls when stat data is already known.\n */  /**\n * @typedef {Object} ErrorData\n * @property {String} message The message of the error.\n * @property {String} code The error code assigned to this error.\n * @property {String} data Additional data provided for reporting or debugging (where available).\n */  /**\n * @typedef {Object} ProgressData\n * @property {Object} entries\n * @property {Number} entries.total Number of entries that have been appended.\n * @property {Number} entries.processed Number of entries that have been processed.\n * @property {Object} fs\n * @property {Number} fs.totalBytes Number of bytes that have been appended. Calculated asynchronously and might not be accurate: it growth while entries are added. (based on fs.Stats)\n * @property {Number} fs.processedBytes Number of bytes that have been processed. (based on fs.Stats)\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/lib/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/lib/error.js":
/*!********************************************!*\
  !*** ./node_modules/archiver/lib/error.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * Archiver Core\n *\n * @ignore\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */ var util = __webpack_require__(/*! util */ \"util\");\nconst ERROR_CODES = {\n    \"ABORTED\": \"archive was aborted\",\n    \"DIRECTORYDIRPATHREQUIRED\": \"diretory dirpath argument must be a non-empty string value\",\n    \"DIRECTORYFUNCTIONINVALIDDATA\": \"invalid data returned by directory custom data function\",\n    \"ENTRYNAMEREQUIRED\": \"entry name must be a non-empty string value\",\n    \"FILEFILEPATHREQUIRED\": \"file filepath argument must be a non-empty string value\",\n    \"FINALIZING\": \"archive already finalizing\",\n    \"QUEUECLOSED\": \"queue closed\",\n    \"NOENDMETHOD\": \"no suitable finalize/end method defined by module\",\n    \"DIRECTORYNOTSUPPORTED\": \"support for directory entries not defined by module\",\n    \"FORMATSET\": \"archive format already set\",\n    \"INPUTSTEAMBUFFERREQUIRED\": \"input source must be valid Stream or Buffer instance\",\n    \"MODULESET\": \"module already set\",\n    \"SYMLINKNOTSUPPORTED\": \"support for symlink entries not defined by module\",\n    \"SYMLINKFILEPATHREQUIRED\": \"symlink filepath argument must be a non-empty string value\",\n    \"SYMLINKTARGETREQUIRED\": \"symlink target argument must be a non-empty string value\",\n    \"ENTRYNOTSUPPORTED\": \"entry not supported\"\n};\nfunction ArchiverError(code, data) {\n    Error.captureStackTrace(this, this.constructor);\n    //this.name = this.constructor.name;\n    this.message = ERROR_CODES[code] || code;\n    this.code = code;\n    this.data = data;\n}\nutil.inherits(ArchiverError, Error);\nexports = module.exports = ArchiverError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbGliL2Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQyxHQUVELElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLE1BQU1DLGNBQWM7SUFDbEIsV0FBVztJQUNYLDRCQUE0QjtJQUM1QixnQ0FBZ0M7SUFDaEMscUJBQXFCO0lBQ3JCLHdCQUF3QjtJQUN4QixjQUFjO0lBQ2QsZUFBZTtJQUNmLGVBQWU7SUFDZix5QkFBeUI7SUFDekIsYUFBYTtJQUNiLDRCQUE0QjtJQUM1QixhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLDJCQUEyQjtJQUMzQix5QkFBeUI7SUFDekIscUJBQXFCO0FBQ3ZCO0FBRUEsU0FBU0MsY0FBY0MsSUFBSSxFQUFFQyxJQUFJO0lBQy9CQyxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDQyxXQUFXO0lBQzlDLG9DQUFvQztJQUNwQyxJQUFJLENBQUNDLE9BQU8sR0FBR1AsV0FBVyxDQUFDRSxLQUFLLElBQUlBO0lBQ3BDLElBQUksQ0FBQ0EsSUFBSSxHQUFHQTtJQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtBQUNkO0FBRUFMLEtBQUtVLFFBQVEsQ0FBQ1AsZUFBZUc7QUFFN0JLLFVBQVVDLE9BQU9ELE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZC10aW1lc2hlZXQtYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbGliL2Vycm9yLmpzPzRjZjciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBcmNoaXZlciBDb3JlXG4gKlxuICogQGlnbm9yZVxuICogQGxpY2Vuc2UgW01JVF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FyY2hpdmVyanMvbm9kZS1hcmNoaXZlci9ibG9iL21hc3Rlci9MSUNFTlNFfVxuICogQGNvcHlyaWdodCAoYykgMjAxMi0yMDE0IENocmlzIFRhbGtpbmd0b24sIGNvbnRyaWJ1dG9ycy5cbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuY29uc3QgRVJST1JfQ09ERVMgPSB7XG4gICdBQk9SVEVEJzogJ2FyY2hpdmUgd2FzIGFib3J0ZWQnLFxuICAnRElSRUNUT1JZRElSUEFUSFJFUVVJUkVEJzogJ2RpcmV0b3J5IGRpcnBhdGggYXJndW1lbnQgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcgdmFsdWUnLFxuICAnRElSRUNUT1JZRlVOQ1RJT05JTlZBTElEREFUQSc6ICdpbnZhbGlkIGRhdGEgcmV0dXJuZWQgYnkgZGlyZWN0b3J5IGN1c3RvbSBkYXRhIGZ1bmN0aW9uJyxcbiAgJ0VOVFJZTkFNRVJFUVVJUkVEJzogJ2VudHJ5IG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcgdmFsdWUnLFxuICAnRklMRUZJTEVQQVRIUkVRVUlSRUQnOiAnZmlsZSBmaWxlcGF0aCBhcmd1bWVudCBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZyB2YWx1ZScsXG4gICdGSU5BTElaSU5HJzogJ2FyY2hpdmUgYWxyZWFkeSBmaW5hbGl6aW5nJyxcbiAgJ1FVRVVFQ0xPU0VEJzogJ3F1ZXVlIGNsb3NlZCcsXG4gICdOT0VORE1FVEhPRCc6ICdubyBzdWl0YWJsZSBmaW5hbGl6ZS9lbmQgbWV0aG9kIGRlZmluZWQgYnkgbW9kdWxlJyxcbiAgJ0RJUkVDVE9SWU5PVFNVUFBPUlRFRCc6ICdzdXBwb3J0IGZvciBkaXJlY3RvcnkgZW50cmllcyBub3QgZGVmaW5lZCBieSBtb2R1bGUnLFxuICAnRk9STUFUU0VUJzogJ2FyY2hpdmUgZm9ybWF0IGFscmVhZHkgc2V0JyxcbiAgJ0lOUFVUU1RFQU1CVUZGRVJSRVFVSVJFRCc6ICdpbnB1dCBzb3VyY2UgbXVzdCBiZSB2YWxpZCBTdHJlYW0gb3IgQnVmZmVyIGluc3RhbmNlJyxcbiAgJ01PRFVMRVNFVCc6ICdtb2R1bGUgYWxyZWFkeSBzZXQnLFxuICAnU1lNTElOS05PVFNVUFBPUlRFRCc6ICdzdXBwb3J0IGZvciBzeW1saW5rIGVudHJpZXMgbm90IGRlZmluZWQgYnkgbW9kdWxlJyxcbiAgJ1NZTUxJTktGSUxFUEFUSFJFUVVJUkVEJzogJ3N5bWxpbmsgZmlsZXBhdGggYXJndW1lbnQgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcgdmFsdWUnLFxuICAnU1lNTElOS1RBUkdFVFJFUVVJUkVEJzogJ3N5bWxpbmsgdGFyZ2V0IGFyZ3VtZW50IG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nIHZhbHVlJyxcbiAgJ0VOVFJZTk9UU1VQUE9SVEVEJzogJ2VudHJ5IG5vdCBzdXBwb3J0ZWQnXG59O1xuXG5mdW5jdGlvbiBBcmNoaXZlckVycm9yKGNvZGUsIGRhdGEpIHtcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIC8vdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICB0aGlzLm1lc3NhZ2UgPSBFUlJPUl9DT0RFU1tjb2RlXSB8fCBjb2RlO1xuICB0aGlzLmNvZGUgPSBjb2RlO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xufVxuXG51dGlsLmluaGVyaXRzKEFyY2hpdmVyRXJyb3IsIEVycm9yKTtcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gQXJjaGl2ZXJFcnJvcjsiXSwibmFtZXMiOlsidXRpbCIsInJlcXVpcmUiLCJFUlJPUl9DT0RFUyIsIkFyY2hpdmVyRXJyb3IiLCJjb2RlIiwiZGF0YSIsIkVycm9yIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJpbmhlcml0cyIsImV4cG9ydHMiLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/lib/plugins/json.js":
/*!***************************************************!*\
  !*** ./node_modules/archiver/lib/plugins/json.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * JSON Format Plugin\n *\n * @module plugins/json\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */ var inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nvar Transform = (__webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\").Transform);\nvar crc32 = __webpack_require__(/*! buffer-crc32 */ \"(ssr)/./node_modules/buffer-crc32/index.js\");\nvar util = __webpack_require__(/*! archiver-utils */ \"(ssr)/./node_modules/archiver-utils/index.js\");\n/**\n * @constructor\n * @param {(JsonOptions|TransformOptions)} options\n */ var Json = function(options) {\n    if (!(this instanceof Json)) {\n        return new Json(options);\n    }\n    options = this.options = util.defaults(options, {});\n    Transform.call(this, options);\n    this.supports = {\n        directory: true,\n        symlink: true\n    };\n    this.files = [];\n};\ninherits(Json, Transform);\n/**\n * [_transform description]\n *\n * @private\n * @param  {Buffer}   chunk\n * @param  {String}   encoding\n * @param  {Function} callback\n * @return void\n */ Json.prototype._transform = function(chunk, encoding, callback) {\n    callback(null, chunk);\n};\n/**\n * [_writeStringified description]\n *\n * @private\n * @return void\n */ Json.prototype._writeStringified = function() {\n    var fileString = JSON.stringify(this.files);\n    this.write(fileString);\n};\n/**\n * [append description]\n *\n * @param  {(Buffer|Stream)}   source\n * @param  {EntryData}   data\n * @param  {Function} callback\n * @return void\n */ Json.prototype.append = function(source, data, callback) {\n    var self = this;\n    data.crc32 = 0;\n    function onend(err, sourceBuffer) {\n        if (err) {\n            callback(err);\n            return;\n        }\n        data.size = sourceBuffer.length || 0;\n        data.crc32 = crc32.unsigned(sourceBuffer);\n        self.files.push(data);\n        callback(null, data);\n    }\n    if (data.sourceType === \"buffer\") {\n        onend(null, source);\n    } else if (data.sourceType === \"stream\") {\n        util.collectStream(source, onend);\n    }\n};\n/**\n * [finalize description]\n *\n * @return void\n */ Json.prototype.finalize = function() {\n    this._writeStringified();\n    this.end();\n};\nmodule.exports = Json; /**\n * @typedef {Object} JsonOptions\n * @global\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbGliL3BsdWdpbnMvanNvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0NBTUMsR0FDRCxJQUFJQSxXQUFXQyxrREFBd0I7QUFDdkMsSUFBSUMsWUFBWUQsMEdBQW9DO0FBRXBELElBQUlFLFFBQVFGLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlHLE9BQU9ILG1CQUFPQSxDQUFDO0FBRW5COzs7Q0FHQyxHQUNELElBQUlJLE9BQU8sU0FBU0MsT0FBTztJQUN6QixJQUFJLENBQUUsS0FBSSxZQUFZRCxJQUFHLEdBQUk7UUFDM0IsT0FBTyxJQUFJQSxLQUFLQztJQUNsQjtJQUVBQSxVQUFVLElBQUksQ0FBQ0EsT0FBTyxHQUFHRixLQUFLRyxRQUFRLENBQUNELFNBQVMsQ0FBQztJQUVqREosVUFBVU0sSUFBSSxDQUFDLElBQUksRUFBRUY7SUFFckIsSUFBSSxDQUFDRyxRQUFRLEdBQUc7UUFDZEMsV0FBVztRQUNYQyxTQUFTO0lBQ1g7SUFFQSxJQUFJLENBQUNDLEtBQUssR0FBRyxFQUFFO0FBQ2pCO0FBRUFaLFNBQVNLLE1BQU1IO0FBRWY7Ozs7Ozs7O0NBUUMsR0FDREcsS0FBS1EsU0FBUyxDQUFDQyxVQUFVLEdBQUcsU0FBU0MsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLFFBQVE7SUFDNURBLFNBQVMsTUFBTUY7QUFDakI7QUFFQTs7Ozs7Q0FLQyxHQUNEVixLQUFLUSxTQUFTLENBQUNLLGlCQUFpQixHQUFHO0lBQ2pDLElBQUlDLGFBQWFDLEtBQUtDLFNBQVMsQ0FBQyxJQUFJLENBQUNULEtBQUs7SUFDMUMsSUFBSSxDQUFDVSxLQUFLLENBQUNIO0FBQ2I7QUFFQTs7Ozs7OztDQU9DLEdBQ0RkLEtBQUtRLFNBQVMsQ0FBQ1UsTUFBTSxHQUFHLFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFUixRQUFRO0lBQ3JELElBQUlTLE9BQU8sSUFBSTtJQUVmRCxLQUFLdEIsS0FBSyxHQUFHO0lBRWIsU0FBU3dCLE1BQU1DLEdBQUcsRUFBRUMsWUFBWTtRQUM5QixJQUFJRCxLQUFLO1lBQ1BYLFNBQVNXO1lBQ1Q7UUFDRjtRQUVBSCxLQUFLSyxJQUFJLEdBQUdELGFBQWFFLE1BQU0sSUFBSTtRQUNuQ04sS0FBS3RCLEtBQUssR0FBR0EsTUFBTTZCLFFBQVEsQ0FBQ0g7UUFFNUJILEtBQUtkLEtBQUssQ0FBQ3FCLElBQUksQ0FBQ1I7UUFFaEJSLFNBQVMsTUFBTVE7SUFDakI7SUFFQSxJQUFJQSxLQUFLUyxVQUFVLEtBQUssVUFBVTtRQUNoQ1AsTUFBTSxNQUFNSDtJQUNkLE9BQU8sSUFBSUMsS0FBS1MsVUFBVSxLQUFLLFVBQVU7UUFDdkM5QixLQUFLK0IsYUFBYSxDQUFDWCxRQUFRRztJQUM3QjtBQUNGO0FBRUE7Ozs7Q0FJQyxHQUNEdEIsS0FBS1EsU0FBUyxDQUFDdUIsUUFBUSxHQUFHO0lBQ3hCLElBQUksQ0FBQ2xCLGlCQUFpQjtJQUN0QixJQUFJLENBQUNtQixHQUFHO0FBQ1Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHbEMsTUFFakI7OztDQUdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2QtdGltZXNoZWV0LWFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL2FyY2hpdmVyL2xpYi9wbHVnaW5zL2pzb24uanM/ZDdiZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEpTT04gRm9ybWF0IFBsdWdpblxuICpcbiAqIEBtb2R1bGUgcGx1Z2lucy9qc29uXG4gKiBAbGljZW5zZSBbTUlUXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vYXJjaGl2ZXJqcy9ub2RlLWFyY2hpdmVyL2Jsb2IvbWFzdGVyL0xJQ0VOU0V9XG4gKiBAY29weXJpZ2h0IChjKSAyMDEyLTIwMTQgQ2hyaXMgVGFsa2luZ3RvbiwgY29udHJpYnV0b3JzLlxuICovXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHM7XG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJykuVHJhbnNmb3JtO1xuXG52YXIgY3JjMzIgPSByZXF1aXJlKCdidWZmZXItY3JjMzInKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnYXJjaGl2ZXItdXRpbHMnKTtcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7KEpzb25PcHRpb25zfFRyYW5zZm9ybU9wdGlvbnMpfSBvcHRpb25zXG4gKi9cbnZhciBKc29uID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSnNvbikpIHtcbiAgICByZXR1cm4gbmV3IEpzb24ob3B0aW9ucyk7XG4gIH1cblxuICBvcHRpb25zID0gdGhpcy5vcHRpb25zID0gdXRpbC5kZWZhdWx0cyhvcHRpb25zLCB7fSk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5zdXBwb3J0cyA9IHtcbiAgICBkaXJlY3Rvcnk6IHRydWUsXG4gICAgc3ltbGluazogdHJ1ZVxuICB9O1xuXG4gIHRoaXMuZmlsZXMgPSBbXTtcbn07XG5cbmluaGVyaXRzKEpzb24sIFRyYW5zZm9ybSk7XG5cbi8qKlxuICogW190cmFuc2Zvcm0gZGVzY3JpcHRpb25dXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAge0J1ZmZlcn0gICBjaHVua1xuICogQHBhcmFtICB7U3RyaW5nfSAgIGVuY29kaW5nXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4gdm9pZFxuICovXG5Kc29uLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayhudWxsLCBjaHVuayk7XG59O1xuXG4vKipcbiAqIFtfd3JpdGVTdHJpbmdpZmllZCBkZXNjcmlwdGlvbl1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybiB2b2lkXG4gKi9cbkpzb24ucHJvdG90eXBlLl93cml0ZVN0cmluZ2lmaWVkID0gZnVuY3Rpb24oKSB7XG4gIHZhciBmaWxlU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkodGhpcy5maWxlcyk7XG4gIHRoaXMud3JpdGUoZmlsZVN0cmluZyk7XG59O1xuXG4vKipcbiAqIFthcHBlbmQgZGVzY3JpcHRpb25dXG4gKlxuICogQHBhcmFtICB7KEJ1ZmZlcnxTdHJlYW0pfSAgIHNvdXJjZVxuICogQHBhcmFtICB7RW50cnlEYXRhfSAgIGRhdGFcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB2b2lkXG4gKi9cbkpzb24ucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKHNvdXJjZSwgZGF0YSwgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGRhdGEuY3JjMzIgPSAwO1xuXG4gIGZ1bmN0aW9uIG9uZW5kKGVyciwgc291cmNlQnVmZmVyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkYXRhLnNpemUgPSBzb3VyY2VCdWZmZXIubGVuZ3RoIHx8IDA7XG4gICAgZGF0YS5jcmMzMiA9IGNyYzMyLnVuc2lnbmVkKHNvdXJjZUJ1ZmZlcik7XG5cbiAgICBzZWxmLmZpbGVzLnB1c2goZGF0YSk7XG5cbiAgICBjYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgfVxuXG4gIGlmIChkYXRhLnNvdXJjZVR5cGUgPT09ICdidWZmZXInKSB7XG4gICAgb25lbmQobnVsbCwgc291cmNlKTtcbiAgfSBlbHNlIGlmIChkYXRhLnNvdXJjZVR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgdXRpbC5jb2xsZWN0U3RyZWFtKHNvdXJjZSwgb25lbmQpO1xuICB9XG59O1xuXG4vKipcbiAqIFtmaW5hbGl6ZSBkZXNjcmlwdGlvbl1cbiAqXG4gKiBAcmV0dXJuIHZvaWRcbiAqL1xuSnNvbi5wcm90b3R5cGUuZmluYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fd3JpdGVTdHJpbmdpZmllZCgpO1xuICB0aGlzLmVuZCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBKc29uO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEpzb25PcHRpb25zXG4gKiBAZ2xvYmFsXG4gKi9cbiJdLCJuYW1lcyI6WyJpbmhlcml0cyIsInJlcXVpcmUiLCJUcmFuc2Zvcm0iLCJjcmMzMiIsInV0aWwiLCJKc29uIiwib3B0aW9ucyIsImRlZmF1bHRzIiwiY2FsbCIsInN1cHBvcnRzIiwiZGlyZWN0b3J5Iiwic3ltbGluayIsImZpbGVzIiwicHJvdG90eXBlIiwiX3RyYW5zZm9ybSIsImNodW5rIiwiZW5jb2RpbmciLCJjYWxsYmFjayIsIl93cml0ZVN0cmluZ2lmaWVkIiwiZmlsZVN0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ3cml0ZSIsImFwcGVuZCIsInNvdXJjZSIsImRhdGEiLCJzZWxmIiwib25lbmQiLCJlcnIiLCJzb3VyY2VCdWZmZXIiLCJzaXplIiwibGVuZ3RoIiwidW5zaWduZWQiLCJwdXNoIiwic291cmNlVHlwZSIsImNvbGxlY3RTdHJlYW0iLCJmaW5hbGl6ZSIsImVuZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/lib/plugins/json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/lib/plugins/tar.js":
/*!**************************************************!*\
  !*** ./node_modules/archiver/lib/plugins/tar.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * TAR Format Plugin\n *\n * @module plugins/tar\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */ var zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar engine = __webpack_require__(/*! tar-stream */ \"(ssr)/./node_modules/tar-stream/index.js\");\nvar util = __webpack_require__(/*! archiver-utils */ \"(ssr)/./node_modules/archiver-utils/index.js\");\n/**\n * @constructor\n * @param {TarOptions} options\n */ var Tar = function(options) {\n    if (!(this instanceof Tar)) {\n        return new Tar(options);\n    }\n    options = this.options = util.defaults(options, {\n        gzip: false\n    });\n    if (typeof options.gzipOptions !== \"object\") {\n        options.gzipOptions = {};\n    }\n    this.supports = {\n        directory: true,\n        symlink: true\n    };\n    this.engine = engine.pack(options);\n    this.compressor = false;\n    if (options.gzip) {\n        this.compressor = zlib.createGzip(options.gzipOptions);\n        this.compressor.on(\"error\", this._onCompressorError.bind(this));\n    }\n};\n/**\n * [_onCompressorError description]\n *\n * @private\n * @param  {Error} err\n * @return void\n */ Tar.prototype._onCompressorError = function(err) {\n    this.engine.emit(\"error\", err);\n};\n/**\n * [append description]\n *\n * @param  {(Buffer|Stream)} source\n * @param  {TarEntryData} data\n * @param  {Function} callback\n * @return void\n */ Tar.prototype.append = function(source, data, callback) {\n    var self = this;\n    data.mtime = data.date;\n    function append(err, sourceBuffer) {\n        if (err) {\n            callback(err);\n            return;\n        }\n        self.engine.entry(data, sourceBuffer, function(err) {\n            callback(err, data);\n        });\n    }\n    if (data.sourceType === \"buffer\") {\n        append(null, source);\n    } else if (data.sourceType === \"stream\" && data.stats) {\n        data.size = data.stats.size;\n        var entry = self.engine.entry(data, function(err) {\n            callback(err, data);\n        });\n        source.pipe(entry);\n    } else if (data.sourceType === \"stream\") {\n        util.collectStream(source, append);\n    }\n};\n/**\n * [finalize description]\n *\n * @return void\n */ Tar.prototype.finalize = function() {\n    this.engine.finalize();\n};\n/**\n * [on description]\n *\n * @return this.engine\n */ Tar.prototype.on = function() {\n    return this.engine.on.apply(this.engine, arguments);\n};\n/**\n * [pipe description]\n *\n * @param  {String} destination\n * @param  {Object} options\n * @return this.engine\n */ Tar.prototype.pipe = function(destination, options) {\n    if (this.compressor) {\n        return this.engine.pipe.apply(this.engine, [\n            this.compressor\n        ]).pipe(destination, options);\n    } else {\n        return this.engine.pipe.apply(this.engine, arguments);\n    }\n};\n/**\n * [unpipe description]\n *\n * @return this.engine\n */ Tar.prototype.unpipe = function() {\n    if (this.compressor) {\n        return this.compressor.unpipe.apply(this.compressor, arguments);\n    } else {\n        return this.engine.unpipe.apply(this.engine, arguments);\n    }\n};\nmodule.exports = Tar; /**\n * @typedef {Object} TarOptions\n * @global\n * @property {Boolean} [gzip=false] Compress the tar archive using gzip.\n * @property {Object} [gzipOptions] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n * to control compression.\n * @property {*} [*] See [tar-stream]{@link https://github.com/mafintosh/tar-stream} documentation for additional properties.\n */  /**\n * @typedef {Object} TarEntryData\n * @global\n * @property {String} name Sets the entry name including internal path.\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\n * when working with methods like `directory` or `glob`.\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\n * for reduction of fs stat calls when stat data is already known.\n */  /**\n * TarStream Module\n * @external TarStream\n * @see {@link https://github.com/mafintosh/tar-stream}\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/lib/plugins/tar.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/archiver/lib/plugins/zip.js":
/*!**************************************************!*\
  !*** ./node_modules/archiver/lib/plugins/zip.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * ZIP Format Plugin\n *\n * @module plugins/zip\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\n */ var engine = __webpack_require__(/*! zip-stream */ \"(ssr)/./node_modules/zip-stream/index.js\");\nvar util = __webpack_require__(/*! archiver-utils */ \"(ssr)/./node_modules/archiver-utils/index.js\");\n/**\n * @constructor\n * @param {ZipOptions} [options]\n * @param {String} [options.comment] Sets the zip archive comment.\n * @param {Boolean} [options.forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\n * @param {Boolean} [options.forceZip64=false] Forces the archive to contain ZIP64 headers.\n * @param {Boolean} [options.namePrependSlash=false] Prepends a forward slash to archive file paths.\n * @param {Boolean} [options.store=false] Sets the compression method to STORE.\n * @param {Object} [options.zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n */ var Zip = function(options) {\n    if (!(this instanceof Zip)) {\n        return new Zip(options);\n    }\n    options = this.options = util.defaults(options, {\n        comment: \"\",\n        forceUTC: false,\n        namePrependSlash: false,\n        store: false\n    });\n    this.supports = {\n        directory: true,\n        symlink: true\n    };\n    this.engine = new engine(options);\n};\n/**\n * @param  {(Buffer|Stream)} source\n * @param  {ZipEntryData} data\n * @param  {String} data.name Sets the entry name including internal path.\n * @param  {(String|Date)} [data.date=NOW()] Sets the entry date.\n * @param  {Number} [data.mode=D:0755/F:0644] Sets the entry permissions.\n * @param  {String} [data.prefix] Sets a path prefix for the entry name. Useful\n * when working with methods like `directory` or `glob`.\n * @param  {fs.Stats} [data.stats] Sets the fs stat data for this entry allowing\n * for reduction of fs stat calls when stat data is already known.\n * @param  {Boolean} [data.store=ZipOptions.store] Sets the compression method to STORE.\n * @param  {Function} callback\n * @return void\n */ Zip.prototype.append = function(source, data, callback) {\n    this.engine.entry(source, data, callback);\n};\n/**\n * @return void\n */ Zip.prototype.finalize = function() {\n    this.engine.finalize();\n};\n/**\n * @return this.engine\n */ Zip.prototype.on = function() {\n    return this.engine.on.apply(this.engine, arguments);\n};\n/**\n * @return this.engine\n */ Zip.prototype.pipe = function() {\n    return this.engine.pipe.apply(this.engine, arguments);\n};\n/**\n * @return this.engine\n */ Zip.prototype.unpipe = function() {\n    return this.engine.unpipe.apply(this.engine, arguments);\n};\nmodule.exports = Zip; /**\n * @typedef {Object} ZipOptions\n * @global\n * @property {String} [comment] Sets the zip archive comment.\n * @property {Boolean} [forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\n * @property {Boolean} [forceZip64=false] Forces the archive to contain ZIP64 headers.\n * @prpperty {Boolean} [namePrependSlash=false] Prepends a forward slash to archive file paths.\n * @property {Boolean} [store=false] Sets the compression method to STORE.\n * @property {Object} [zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n * to control compression.\n * @property {*} [*] See [zip-stream]{@link https://archiverjs.com/zip-stream/ZipStream.html} documentation for current list of properties.\n */  /**\n * @typedef {Object} ZipEntryData\n * @global\n * @property {String} name Sets the entry name including internal path.\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\n * @property {Boolean} [namePrependSlash=ZipOptions.namePrependSlash] Prepends a forward slash to archive file paths.\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\n * when working with methods like `directory` or `glob`.\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\n * for reduction of fs stat calls when stat data is already known.\n * @property {Boolean} [store=ZipOptions.store] Sets the compression method to STORE.\n */  /**\n * ZipStream Module\n * @external ZipStream\n * @see {@link https://www.archiverjs.com/zip-stream/ZipStream.html}\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJjaGl2ZXIvbGliL3BsdWdpbnMvemlwLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQyxHQUNELElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0FBRW5COzs7Ozs7Ozs7Q0FTQyxHQUNELElBQUlFLE1BQU0sU0FBU0MsT0FBTztJQUN4QixJQUFJLENBQUUsS0FBSSxZQUFZRCxHQUFFLEdBQUk7UUFDMUIsT0FBTyxJQUFJQSxJQUFJQztJQUNqQjtJQUVBQSxVQUFVLElBQUksQ0FBQ0EsT0FBTyxHQUFHRixLQUFLRyxRQUFRLENBQUNELFNBQVM7UUFDOUNFLFNBQVM7UUFDVEMsVUFBVTtRQUNWQyxrQkFBa0I7UUFDbEJDLE9BQU87SUFDVDtJQUVBLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1FBQ2RDLFdBQVc7UUFDWEMsU0FBUztJQUNYO0lBRUEsSUFBSSxDQUFDWixNQUFNLEdBQUcsSUFBSUEsT0FBT0k7QUFDM0I7QUFFQTs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ0RELElBQUlVLFNBQVMsQ0FBQ0MsTUFBTSxHQUFHLFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQ3BELElBQUksQ0FBQ2pCLE1BQU0sQ0FBQ2tCLEtBQUssQ0FBQ0gsUUFBUUMsTUFBTUM7QUFDbEM7QUFFQTs7Q0FFQyxHQUNEZCxJQUFJVSxTQUFTLENBQUNNLFFBQVEsR0FBRztJQUN2QixJQUFJLENBQUNuQixNQUFNLENBQUNtQixRQUFRO0FBQ3RCO0FBRUE7O0NBRUMsR0FDRGhCLElBQUlVLFNBQVMsQ0FBQ08sRUFBRSxHQUFHO0lBQ2pCLE9BQU8sSUFBSSxDQUFDcEIsTUFBTSxDQUFDb0IsRUFBRSxDQUFDQyxLQUFLLENBQUMsSUFBSSxDQUFDckIsTUFBTSxFQUFFc0I7QUFDM0M7QUFFQTs7Q0FFQyxHQUNEbkIsSUFBSVUsU0FBUyxDQUFDVSxJQUFJLEdBQUc7SUFDbkIsT0FBTyxJQUFJLENBQUN2QixNQUFNLENBQUN1QixJQUFJLENBQUNGLEtBQUssQ0FBQyxJQUFJLENBQUNyQixNQUFNLEVBQUVzQjtBQUM3QztBQUVBOztDQUVDLEdBQ0RuQixJQUFJVSxTQUFTLENBQUNXLE1BQU0sR0FBRztJQUNyQixPQUFPLElBQUksQ0FBQ3hCLE1BQU0sQ0FBQ3dCLE1BQU0sQ0FBQ0gsS0FBSyxDQUFDLElBQUksQ0FBQ3JCLE1BQU0sRUFBRXNCO0FBQy9DO0FBRUFHLE9BQU9DLE9BQU8sR0FBR3ZCLEtBRWpCOzs7Ozs7Ozs7OztDQVdDLElBRUQ7Ozs7Ozs7Ozs7OztDQVlDLElBRUQ7Ozs7Q0FJQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NkLXRpbWVzaGVldC1hbmFseXplci8uL25vZGVfbW9kdWxlcy9hcmNoaXZlci9saWIvcGx1Z2lucy96aXAuanM/M2QyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFpJUCBGb3JtYXQgUGx1Z2luXG4gKlxuICogQG1vZHVsZSBwbHVnaW5zL3ppcFxuICogQGxpY2Vuc2UgW01JVF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FyY2hpdmVyanMvbm9kZS1hcmNoaXZlci9ibG9iL21hc3Rlci9MSUNFTlNFfVxuICogQGNvcHlyaWdodCAoYykgMjAxMi0yMDE0IENocmlzIFRhbGtpbmd0b24sIGNvbnRyaWJ1dG9ycy5cbiAqL1xudmFyIGVuZ2luZSA9IHJlcXVpcmUoJ3ppcC1zdHJlYW0nKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnYXJjaGl2ZXItdXRpbHMnKTtcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7WmlwT3B0aW9uc30gW29wdGlvbnNdXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuY29tbWVudF0gU2V0cyB0aGUgemlwIGFyY2hpdmUgY29tbWVudC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZm9yY2VMb2NhbFRpbWU9ZmFsc2VdIEZvcmNlcyB0aGUgYXJjaGl2ZSB0byBjb250YWluIGxvY2FsIGZpbGUgdGltZXMgaW5zdGVhZCBvZiBVVEMuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmZvcmNlWmlwNjQ9ZmFsc2VdIEZvcmNlcyB0aGUgYXJjaGl2ZSB0byBjb250YWluIFpJUDY0IGhlYWRlcnMuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm5hbWVQcmVwZW5kU2xhc2g9ZmFsc2VdIFByZXBlbmRzIGEgZm9yd2FyZCBzbGFzaCB0byBhcmNoaXZlIGZpbGUgcGF0aHMuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnN0b3JlPWZhbHNlXSBTZXRzIHRoZSBjb21wcmVzc2lvbiBtZXRob2QgdG8gU1RPUkUuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuemxpYl0gUGFzc2VkIHRvIFt6bGliXXtAbGluayBodHRwczovL25vZGVqcy5vcmcvYXBpL3psaWIuaHRtbCN6bGliX2NsYXNzX29wdGlvbnN9XG4gKi9cbnZhciBaaXAgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBaaXApKSB7XG4gICAgcmV0dXJuIG5ldyBaaXAob3B0aW9ucyk7XG4gIH1cblxuICBvcHRpb25zID0gdGhpcy5vcHRpb25zID0gdXRpbC5kZWZhdWx0cyhvcHRpb25zLCB7XG4gICAgY29tbWVudDogJycsXG4gICAgZm9yY2VVVEM6IGZhbHNlLFxuICAgIG5hbWVQcmVwZW5kU2xhc2g6IGZhbHNlLFxuICAgIHN0b3JlOiBmYWxzZVxuICB9KTtcblxuICB0aGlzLnN1cHBvcnRzID0ge1xuICAgIGRpcmVjdG9yeTogdHJ1ZSxcbiAgICBzeW1saW5rOiB0cnVlXG4gIH07XG5cbiAgdGhpcy5lbmdpbmUgPSBuZXcgZW5naW5lKG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0gIHsoQnVmZmVyfFN0cmVhbSl9IHNvdXJjZVxuICogQHBhcmFtICB7WmlwRW50cnlEYXRhfSBkYXRhXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGRhdGEubmFtZSBTZXRzIHRoZSBlbnRyeSBuYW1lIGluY2x1ZGluZyBpbnRlcm5hbCBwYXRoLlxuICogQHBhcmFtICB7KFN0cmluZ3xEYXRlKX0gW2RhdGEuZGF0ZT1OT1coKV0gU2V0cyB0aGUgZW50cnkgZGF0ZS5cbiAqIEBwYXJhbSAge051bWJlcn0gW2RhdGEubW9kZT1EOjA3NTUvRjowNjQ0XSBTZXRzIHRoZSBlbnRyeSBwZXJtaXNzaW9ucy5cbiAqIEBwYXJhbSAge1N0cmluZ30gW2RhdGEucHJlZml4XSBTZXRzIGEgcGF0aCBwcmVmaXggZm9yIHRoZSBlbnRyeSBuYW1lLiBVc2VmdWxcbiAqIHdoZW4gd29ya2luZyB3aXRoIG1ldGhvZHMgbGlrZSBgZGlyZWN0b3J5YCBvciBgZ2xvYmAuXG4gKiBAcGFyYW0gIHtmcy5TdGF0c30gW2RhdGEuc3RhdHNdIFNldHMgdGhlIGZzIHN0YXQgZGF0YSBmb3IgdGhpcyBlbnRyeSBhbGxvd2luZ1xuICogZm9yIHJlZHVjdGlvbiBvZiBmcyBzdGF0IGNhbGxzIHdoZW4gc3RhdCBkYXRhIGlzIGFscmVhZHkga25vd24uXG4gKiBAcGFyYW0gIHtCb29sZWFufSBbZGF0YS5zdG9yZT1aaXBPcHRpb25zLnN0b3JlXSBTZXRzIHRoZSBjb21wcmVzc2lvbiBtZXRob2QgdG8gU1RPUkUuXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4gdm9pZFxuICovXG5aaXAucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKHNvdXJjZSwgZGF0YSwgY2FsbGJhY2spIHtcbiAgdGhpcy5lbmdpbmUuZW50cnkoc291cmNlLCBkYXRhLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIEByZXR1cm4gdm9pZFxuICovXG5aaXAucHJvdG90eXBlLmZpbmFsaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZW5naW5lLmZpbmFsaXplKCk7XG59O1xuXG4vKipcbiAqIEByZXR1cm4gdGhpcy5lbmdpbmVcbiAqL1xuWmlwLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lbmdpbmUub24uYXBwbHkodGhpcy5lbmdpbmUsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIEByZXR1cm4gdGhpcy5lbmdpbmVcbiAqL1xuWmlwLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVuZ2luZS5waXBlLmFwcGx5KHRoaXMuZW5naW5lLCBhcmd1bWVudHMpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHRoaXMuZW5naW5lXG4gKi9cblppcC5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVuZ2luZS51bnBpcGUuYXBwbHkodGhpcy5lbmdpbmUsIGFyZ3VtZW50cyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFppcDtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBaaXBPcHRpb25zXG4gKiBAZ2xvYmFsXG4gKiBAcHJvcGVydHkge1N0cmluZ30gW2NvbW1lbnRdIFNldHMgdGhlIHppcCBhcmNoaXZlIGNvbW1lbnQuXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IFtmb3JjZUxvY2FsVGltZT1mYWxzZV0gRm9yY2VzIHRoZSBhcmNoaXZlIHRvIGNvbnRhaW4gbG9jYWwgZmlsZSB0aW1lcyBpbnN0ZWFkIG9mIFVUQy5cbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2ZvcmNlWmlwNjQ9ZmFsc2VdIEZvcmNlcyB0aGUgYXJjaGl2ZSB0byBjb250YWluIFpJUDY0IGhlYWRlcnMuXG4gKiBAcHJwcGVydHkge0Jvb2xlYW59IFtuYW1lUHJlcGVuZFNsYXNoPWZhbHNlXSBQcmVwZW5kcyBhIGZvcndhcmQgc2xhc2ggdG8gYXJjaGl2ZSBmaWxlIHBhdGhzLlxuICogQHByb3BlcnR5IHtCb29sZWFufSBbc3RvcmU9ZmFsc2VdIFNldHMgdGhlIGNvbXByZXNzaW9uIG1ldGhvZCB0byBTVE9SRS5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbemxpYl0gUGFzc2VkIHRvIFt6bGliXXtAbGluayBodHRwczovL25vZGVqcy5vcmcvYXBpL3psaWIuaHRtbCN6bGliX2NsYXNzX29wdGlvbnN9XG4gKiB0byBjb250cm9sIGNvbXByZXNzaW9uLlxuICogQHByb3BlcnR5IHsqfSBbKl0gU2VlIFt6aXAtc3RyZWFtXXtAbGluayBodHRwczovL2FyY2hpdmVyanMuY29tL3ppcC1zdHJlYW0vWmlwU3RyZWFtLmh0bWx9IGRvY3VtZW50YXRpb24gZm9yIGN1cnJlbnQgbGlzdCBvZiBwcm9wZXJ0aWVzLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gWmlwRW50cnlEYXRhXG4gKiBAZ2xvYmFsXG4gKiBAcHJvcGVydHkge1N0cmluZ30gbmFtZSBTZXRzIHRoZSBlbnRyeSBuYW1lIGluY2x1ZGluZyBpbnRlcm5hbCBwYXRoLlxuICogQHByb3BlcnR5IHsoU3RyaW5nfERhdGUpfSBbZGF0ZT1OT1coKV0gU2V0cyB0aGUgZW50cnkgZGF0ZS5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbW9kZT1EOjA3NTUvRjowNjQ0XSBTZXRzIHRoZSBlbnRyeSBwZXJtaXNzaW9ucy5cbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW25hbWVQcmVwZW5kU2xhc2g9WmlwT3B0aW9ucy5uYW1lUHJlcGVuZFNsYXNoXSBQcmVwZW5kcyBhIGZvcndhcmQgc2xhc2ggdG8gYXJjaGl2ZSBmaWxlIHBhdGhzLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IFtwcmVmaXhdIFNldHMgYSBwYXRoIHByZWZpeCBmb3IgdGhlIGVudHJ5IG5hbWUuIFVzZWZ1bFxuICogd2hlbiB3b3JraW5nIHdpdGggbWV0aG9kcyBsaWtlIGBkaXJlY3RvcnlgIG9yIGBnbG9iYC5cbiAqIEBwcm9wZXJ0eSB7ZnMuU3RhdHN9IFtzdGF0c10gU2V0cyB0aGUgZnMgc3RhdCBkYXRhIGZvciB0aGlzIGVudHJ5IGFsbG93aW5nXG4gKiBmb3IgcmVkdWN0aW9uIG9mIGZzIHN0YXQgY2FsbHMgd2hlbiBzdGF0IGRhdGEgaXMgYWxyZWFkeSBrbm93bi5cbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW3N0b3JlPVppcE9wdGlvbnMuc3RvcmVdIFNldHMgdGhlIGNvbXByZXNzaW9uIG1ldGhvZCB0byBTVE9SRS5cbiAqL1xuXG4vKipcbiAqIFppcFN0cmVhbSBNb2R1bGVcbiAqIEBleHRlcm5hbCBaaXBTdHJlYW1cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vd3d3LmFyY2hpdmVyanMuY29tL3ppcC1zdHJlYW0vWmlwU3RyZWFtLmh0bWx9XG4gKi9cbiJdLCJuYW1lcyI6WyJlbmdpbmUiLCJyZXF1aXJlIiwidXRpbCIsIlppcCIsIm9wdGlvbnMiLCJkZWZhdWx0cyIsImNvbW1lbnQiLCJmb3JjZVVUQyIsIm5hbWVQcmVwZW5kU2xhc2giLCJzdG9yZSIsInN1cHBvcnRzIiwiZGlyZWN0b3J5Iiwic3ltbGluayIsInByb3RvdHlwZSIsImFwcGVuZCIsInNvdXJjZSIsImRhdGEiLCJjYWxsYmFjayIsImVudHJ5IiwiZmluYWxpemUiLCJvbiIsImFwcGx5IiwiYXJndW1lbnRzIiwicGlwZSIsInVucGlwZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/archiver/lib/plugins/zip.js\n");

/***/ })

};
;