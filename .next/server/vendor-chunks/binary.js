/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/binary";
exports.ids = ["vendor-chunks/binary"];
exports.modules = {

/***/ "(ssr)/./node_modules/binary/index.js":
/*!**************************************!*\
  !*** ./node_modules/binary/index.js ***!
  \**************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var Chainsaw = __webpack_require__(/*! chainsaw */ \"(ssr)/./node_modules/chainsaw/index.js\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar Buffers = __webpack_require__(/*! buffers */ \"(ssr)/./node_modules/buffers/index.js\");\nvar Vars = __webpack_require__(/*! ./lib/vars.js */ \"(ssr)/./node_modules/binary/lib/vars.js\");\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nexports = module.exports = function(bufOrEm, eventName) {\n    if (Buffer.isBuffer(bufOrEm)) {\n        return exports.parse(bufOrEm);\n    }\n    var s = exports.stream();\n    if (bufOrEm && bufOrEm.pipe) {\n        bufOrEm.pipe(s);\n    } else if (bufOrEm) {\n        bufOrEm.on(eventName || \"data\", function(buf) {\n            s.write(buf);\n        });\n        bufOrEm.on(\"end\", function() {\n            s.end();\n        });\n    }\n    return s;\n};\nexports.stream = function(input) {\n    if (input) return exports.apply(null, arguments);\n    var pending = null;\n    function getBytes(bytes, cb, skip) {\n        pending = {\n            bytes: bytes,\n            skip: skip,\n            cb: function(buf) {\n                pending = null;\n                cb(buf);\n            }\n        };\n        dispatch();\n    }\n    var offset = null;\n    function dispatch() {\n        if (!pending) {\n            if (caughtEnd) done = true;\n            return;\n        }\n        if (typeof pending === \"function\") {\n            pending();\n        } else {\n            var bytes = offset + pending.bytes;\n            if (buffers.length >= bytes) {\n                var buf;\n                if (offset == null) {\n                    buf = buffers.splice(0, bytes);\n                    if (!pending.skip) {\n                        buf = buf.slice();\n                    }\n                } else {\n                    if (!pending.skip) {\n                        buf = buffers.slice(offset, bytes);\n                    }\n                    offset = bytes;\n                }\n                if (pending.skip) {\n                    pending.cb();\n                } else {\n                    pending.cb(buf);\n                }\n            }\n        }\n    }\n    function builder(saw) {\n        function next() {\n            if (!done) saw.next();\n        }\n        var self = words(function(bytes, cb) {\n            return function(name) {\n                getBytes(bytes, function(buf) {\n                    vars.set(name, cb(buf));\n                    next();\n                });\n            };\n        });\n        self.tap = function(cb) {\n            saw.nest(cb, vars.store);\n        };\n        self.into = function(key, cb) {\n            if (!vars.get(key)) vars.set(key, {});\n            var parent = vars;\n            vars = Vars(parent.get(key));\n            saw.nest(function() {\n                cb.apply(this, arguments);\n                this.tap(function() {\n                    vars = parent;\n                });\n            }, vars.store);\n        };\n        self.flush = function() {\n            vars.store = {};\n            next();\n        };\n        self.loop = function(cb) {\n            var end = false;\n            saw.nest(false, function loop() {\n                this.vars = vars.store;\n                cb.call(this, function() {\n                    end = true;\n                    next();\n                }, vars.store);\n                this.tap((function() {\n                    if (end) saw.next();\n                    else loop.call(this);\n                }).bind(this));\n            }, vars.store);\n        };\n        self.buffer = function(name, bytes) {\n            if (typeof bytes === \"string\") {\n                bytes = vars.get(bytes);\n            }\n            getBytes(bytes, function(buf) {\n                vars.set(name, buf);\n                next();\n            });\n        };\n        self.skip = function(bytes) {\n            if (typeof bytes === \"string\") {\n                bytes = vars.get(bytes);\n            }\n            getBytes(bytes, function() {\n                next();\n            });\n        };\n        self.scan = function find(name, search) {\n            if (typeof search === \"string\") {\n                search = new Buffer(search);\n            } else if (!Buffer.isBuffer(search)) {\n                throw new Error(\"search must be a Buffer or a string\");\n            }\n            var taken = 0;\n            pending = function() {\n                var pos = buffers.indexOf(search, offset + taken);\n                var i = pos - offset - taken;\n                if (pos !== -1) {\n                    pending = null;\n                    if (offset != null) {\n                        vars.set(name, buffers.slice(offset, offset + taken + i));\n                        offset += taken + i + search.length;\n                    } else {\n                        vars.set(name, buffers.slice(0, taken + i));\n                        buffers.splice(0, taken + i + search.length);\n                    }\n                    next();\n                    dispatch();\n                } else {\n                    i = Math.max(buffers.length - search.length - offset - taken, 0);\n                }\n                taken += i;\n            };\n            dispatch();\n        };\n        self.peek = function(cb) {\n            offset = 0;\n            saw.nest(function() {\n                cb.call(this, vars.store);\n                this.tap(function() {\n                    offset = null;\n                });\n            });\n        };\n        return self;\n    }\n    ;\n    var stream = Chainsaw.light(builder);\n    stream.writable = true;\n    var buffers = Buffers();\n    stream.write = function(buf) {\n        buffers.push(buf);\n        dispatch();\n    };\n    var vars = Vars();\n    var done = false, caughtEnd = false;\n    stream.end = function() {\n        caughtEnd = true;\n    };\n    stream.pipe = Stream.prototype.pipe;\n    Object.getOwnPropertyNames(EventEmitter.prototype).forEach(function(name) {\n        stream[name] = EventEmitter.prototype[name];\n    });\n    return stream;\n};\nexports.parse = function parse(buffer) {\n    var self = words(function(bytes, cb) {\n        return function(name) {\n            if (offset + bytes <= buffer.length) {\n                var buf = buffer.slice(offset, offset + bytes);\n                offset += bytes;\n                vars.set(name, cb(buf));\n            } else {\n                vars.set(name, null);\n            }\n            return self;\n        };\n    });\n    var offset = 0;\n    var vars = Vars();\n    self.vars = vars.store;\n    self.tap = function(cb) {\n        cb.call(self, vars.store);\n        return self;\n    };\n    self.into = function(key, cb) {\n        if (!vars.get(key)) {\n            vars.set(key, {});\n        }\n        var parent = vars;\n        vars = Vars(parent.get(key));\n        cb.call(self, vars.store);\n        vars = parent;\n        return self;\n    };\n    self.loop = function(cb) {\n        var end = false;\n        var ender = function() {\n            end = true;\n        };\n        while(end === false){\n            cb.call(self, ender, vars.store);\n        }\n        return self;\n    };\n    self.buffer = function(name, size) {\n        if (typeof size === \"string\") {\n            size = vars.get(size);\n        }\n        var buf = buffer.slice(offset, Math.min(buffer.length, offset + size));\n        offset += size;\n        vars.set(name, buf);\n        return self;\n    };\n    self.skip = function(bytes) {\n        if (typeof bytes === \"string\") {\n            bytes = vars.get(bytes);\n        }\n        offset += bytes;\n        return self;\n    };\n    self.scan = function(name, search) {\n        if (typeof search === \"string\") {\n            search = new Buffer(search);\n        } else if (!Buffer.isBuffer(search)) {\n            throw new Error(\"search must be a Buffer or a string\");\n        }\n        vars.set(name, null);\n        // simple but slow string search\n        for(var i = 0; i + offset <= buffer.length - search.length + 1; i++){\n            for(var j = 0; j < search.length && buffer[offset + i + j] === search[j]; j++);\n            if (j === search.length) break;\n        }\n        vars.set(name, buffer.slice(offset, offset + i));\n        offset += i + search.length;\n        return self;\n    };\n    self.peek = function(cb) {\n        var was = offset;\n        cb.call(self, vars.store);\n        offset = was;\n        return self;\n    };\n    self.flush = function() {\n        vars.store = {};\n        return self;\n    };\n    self.eof = function() {\n        return offset >= buffer.length;\n    };\n    return self;\n};\n// convert byte strings to unsigned little endian numbers\nfunction decodeLEu(bytes) {\n    var acc = 0;\n    for(var i = 0; i < bytes.length; i++){\n        acc += Math.pow(256, i) * bytes[i];\n    }\n    return acc;\n}\n// convert byte strings to unsigned big endian numbers\nfunction decodeBEu(bytes) {\n    var acc = 0;\n    for(var i = 0; i < bytes.length; i++){\n        acc += Math.pow(256, bytes.length - i - 1) * bytes[i];\n    }\n    return acc;\n}\n// convert byte strings to signed big endian numbers\nfunction decodeBEs(bytes) {\n    var val = decodeBEu(bytes);\n    if ((bytes[0] & 0x80) == 0x80) {\n        val -= Math.pow(256, bytes.length);\n    }\n    return val;\n}\n// convert byte strings to signed little endian numbers\nfunction decodeLEs(bytes) {\n    var val = decodeLEu(bytes);\n    if ((bytes[bytes.length - 1] & 0x80) == 0x80) {\n        val -= Math.pow(256, bytes.length);\n    }\n    return val;\n}\nfunction words(decode) {\n    var self = {};\n    [\n        1,\n        2,\n        4,\n        8\n    ].forEach(function(bytes) {\n        var bits = bytes * 8;\n        self[\"word\" + bits + \"le\"] = self[\"word\" + bits + \"lu\"] = decode(bytes, decodeLEu);\n        self[\"word\" + bits + \"ls\"] = decode(bytes, decodeLEs);\n        self[\"word\" + bits + \"be\"] = self[\"word\" + bits + \"bu\"] = decode(bytes, decodeBEu);\n        self[\"word\" + bits + \"bs\"] = decode(bytes, decodeBEs);\n    });\n    // word8be(n) == word8le(n) for all n\n    self.word8 = self.word8u = self.word8be;\n    self.word8s = self.word8bs;\n    return self;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/binary/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/binary/lib/vars.js":
/*!*****************************************!*\
  !*** ./node_modules/binary/lib/vars.js ***!
  \*****************************************/
/***/ ((module) => {

eval("module.exports = function(store) {\n    function getset(name, value) {\n        var node = vars.store;\n        var keys = name.split(\".\");\n        keys.slice(0, -1).forEach(function(k) {\n            if (node[k] === undefined) node[k] = {};\n            node = node[k];\n        });\n        var key = keys[keys.length - 1];\n        if (arguments.length == 1) {\n            return node[key];\n        } else {\n            return node[key] = value;\n        }\n    }\n    var vars = {\n        get: function(name) {\n            return getset(name);\n        },\n        set: function(name, value) {\n            return getset(name, value);\n        },\n        store: store || {}\n    };\n    return vars;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZC10aW1lc2hlZXQtYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvYmluYXJ5L2xpYi92YXJzLmpzPzQyZTkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICBmdW5jdGlvbiBnZXRzZXQgKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciBub2RlID0gdmFycy5zdG9yZTtcbiAgICAgICAgdmFyIGtleXMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgICAgIGtleXMuc2xpY2UoMCwtMSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgaWYgKG5vZGVba10gPT09IHVuZGVmaW5lZCkgbm9kZVtrXSA9IHt9O1xuICAgICAgICAgICAgbm9kZSA9IG5vZGVba11cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2tleXMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgdmFyIHZhcnMgPSB7XG4gICAgICAgIGdldCA6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0c2V0KG5hbWUpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgOiBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRzZXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBzdG9yZSA6IHN0b3JlIHx8IHt9LFxuICAgIH07XG4gICAgcmV0dXJuIHZhcnM7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzdG9yZSIsImdldHNldCIsIm5hbWUiLCJ2YWx1ZSIsIm5vZGUiLCJ2YXJzIiwia2V5cyIsInNwbGl0Iiwic2xpY2UiLCJmb3JFYWNoIiwiayIsInVuZGVmaW5lZCIsImtleSIsImxlbmd0aCIsImFyZ3VtZW50cyIsImdldCIsInNldCJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQU8sR0FBRyxTQUFVQyxLQUFLO0lBQzVCLFNBQVNDLE9BQVFDLElBQUksRUFBRUMsS0FBSztRQUN4QixJQUFJQyxPQUFPQyxLQUFLTCxLQUFLO1FBQ3JCLElBQUlNLE9BQU9KLEtBQUtLLEtBQUssQ0FBQztRQUN0QkQsS0FBS0UsS0FBSyxDQUFDLEdBQUUsQ0FBQyxHQUFHQyxPQUFPLENBQUMsU0FBVUMsQ0FBQztZQUNoQyxJQUFJTixJQUFJLENBQUNNLEVBQUUsS0FBS0MsV0FBV1AsSUFBSSxDQUFDTSxFQUFFLEdBQUcsQ0FBQztZQUN0Q04sT0FBT0EsSUFBSSxDQUFDTSxFQUFFO1FBQ2xCO1FBQ0EsSUFBSUUsTUFBTU4sSUFBSSxDQUFDQSxLQUFLTyxNQUFNLEdBQUcsRUFBRTtRQUMvQixJQUFJQyxVQUFVRCxNQUFNLElBQUksR0FBRztZQUN2QixPQUFPVCxJQUFJLENBQUNRLElBQUk7UUFDcEIsT0FDSztZQUNELE9BQU9SLElBQUksQ0FBQ1EsSUFBSSxHQUFHVDtRQUN2QjtJQUNKO0lBRUEsSUFBSUUsT0FBTztRQUNQVSxLQUFNLFNBQVViLElBQUk7WUFDaEIsT0FBT0QsT0FBT0M7UUFDbEI7UUFDQWMsS0FBTSxTQUFVZCxJQUFJLEVBQUVDLEtBQUs7WUFDdkIsT0FBT0YsT0FBT0MsTUFBTUM7UUFDeEI7UUFDQUgsT0FBUUEsU0FBUyxDQUFDO0lBQ3RCO0lBQ0EsT0FBT0s7QUFDWCIsImZpbGUiOiIoc3NyKS8uL25vZGVfbW9kdWxlcy9iaW5hcnkvbGliL3ZhcnMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/binary/lib/vars.js\n");

/***/ })

};
;