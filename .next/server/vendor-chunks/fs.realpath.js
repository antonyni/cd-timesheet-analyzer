/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fs.realpath";
exports.ids = ["vendor-chunks/fs.realpath"];
exports.modules = {

/***/ "(ssr)/./node_modules/fs.realpath/index.js":
/*!*******************************************!*\
  !*** ./node_modules/fs.realpath/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = realpath;\nrealpath.realpath = realpath;\nrealpath.sync = realpathSync;\nrealpath.realpathSync = realpathSync;\nrealpath.monkeypatch = monkeypatch;\nrealpath.unmonkeypatch = unmonkeypatch;\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar origRealpath = fs.realpath;\nvar origRealpathSync = fs.realpathSync;\nvar version = process.version;\nvar ok = /^v[0-5]\\./.test(version);\nvar old = __webpack_require__(/*! ./old.js */ \"(ssr)/./node_modules/fs.realpath/old.js\");\nfunction newError(er) {\n    return er && er.syscall === \"realpath\" && (er.code === \"ELOOP\" || er.code === \"ENOMEM\" || er.code === \"ENAMETOOLONG\");\n}\nfunction realpath(p, cache, cb) {\n    if (ok) {\n        return origRealpath(p, cache, cb);\n    }\n    if (typeof cache === \"function\") {\n        cb = cache;\n        cache = null;\n    }\n    origRealpath(p, cache, function(er, result) {\n        if (newError(er)) {\n            old.realpath(p, cache, cb);\n        } else {\n            cb(er, result);\n        }\n    });\n}\nfunction realpathSync(p, cache) {\n    if (ok) {\n        return origRealpathSync(p, cache);\n    }\n    try {\n        return origRealpathSync(p, cache);\n    } catch (er) {\n        if (newError(er)) {\n            return old.realpathSync(p, cache);\n        } else {\n            throw er;\n        }\n    }\n}\nfunction monkeypatch() {\n    fs.realpath = realpath;\n    fs.realpathSync = realpathSync;\n}\nfunction unmonkeypatch() {\n    fs.realpath = origRealpath;\n    fs.realpathSync = origRealpathSync;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnMucmVhbHBhdGgvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFDakJBLFNBQVNBLFFBQVEsR0FBR0E7QUFDcEJBLFNBQVNDLElBQUksR0FBR0M7QUFDaEJGLFNBQVNFLFlBQVksR0FBR0E7QUFDeEJGLFNBQVNHLFdBQVcsR0FBR0E7QUFDdkJILFNBQVNJLGFBQWEsR0FBR0E7QUFFekIsSUFBSUMsS0FBS0MsbUJBQU9BLENBQUM7QUFDakIsSUFBSUMsZUFBZUYsR0FBR0wsUUFBUTtBQUM5QixJQUFJUSxtQkFBbUJILEdBQUdILFlBQVk7QUFFdEMsSUFBSU8sVUFBVUMsUUFBUUQsT0FBTztBQUM3QixJQUFJRSxLQUFLLFlBQVlDLElBQUksQ0FBQ0g7QUFDMUIsSUFBSUksTUFBTVAsbUJBQU9BLENBQUM7QUFFbEIsU0FBU1EsU0FBVUMsRUFBRTtJQUNuQixPQUFPQSxNQUFNQSxHQUFHQyxPQUFPLEtBQUssY0FDMUJELENBQUFBLEdBQUdFLElBQUksS0FBSyxXQUNaRixHQUFHRSxJQUFJLEtBQUssWUFDWkYsR0FBR0UsSUFBSSxLQUFLLGNBQWE7QUFFN0I7QUFFQSxTQUFTakIsU0FBVWtCLENBQUMsRUFBRUMsS0FBSyxFQUFFQyxFQUFFO0lBQzdCLElBQUlULElBQUk7UUFDTixPQUFPSixhQUFhVyxHQUFHQyxPQUFPQztJQUNoQztJQUVBLElBQUksT0FBT0QsVUFBVSxZQUFZO1FBQy9CQyxLQUFLRDtRQUNMQSxRQUFRO0lBQ1Y7SUFDQVosYUFBYVcsR0FBR0MsT0FBTyxTQUFVSixFQUFFLEVBQUVNLE1BQU07UUFDekMsSUFBSVAsU0FBU0MsS0FBSztZQUNoQkYsSUFBSWIsUUFBUSxDQUFDa0IsR0FBR0MsT0FBT0M7UUFDekIsT0FBTztZQUNMQSxHQUFHTCxJQUFJTTtRQUNUO0lBQ0Y7QUFDRjtBQUVBLFNBQVNuQixhQUFjZ0IsQ0FBQyxFQUFFQyxLQUFLO0lBQzdCLElBQUlSLElBQUk7UUFDTixPQUFPSCxpQkFBaUJVLEdBQUdDO0lBQzdCO0lBRUEsSUFBSTtRQUNGLE9BQU9YLGlCQUFpQlUsR0FBR0M7SUFDN0IsRUFBRSxPQUFPSixJQUFJO1FBQ1gsSUFBSUQsU0FBU0MsS0FBSztZQUNoQixPQUFPRixJQUFJWCxZQUFZLENBQUNnQixHQUFHQztRQUM3QixPQUFPO1lBQ0wsTUFBTUo7UUFDUjtJQUNGO0FBQ0Y7QUFFQSxTQUFTWjtJQUNQRSxHQUFHTCxRQUFRLEdBQUdBO0lBQ2RLLEdBQUdILFlBQVksR0FBR0E7QUFDcEI7QUFFQSxTQUFTRTtJQUNQQyxHQUFHTCxRQUFRLEdBQUdPO0lBQ2RGLEdBQUdILFlBQVksR0FBR007QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZC10aW1lc2hlZXQtYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvZnMucmVhbHBhdGgvaW5kZXguanM/MTZiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlYWxwYXRoXG5yZWFscGF0aC5yZWFscGF0aCA9IHJlYWxwYXRoXG5yZWFscGF0aC5zeW5jID0gcmVhbHBhdGhTeW5jXG5yZWFscGF0aC5yZWFscGF0aFN5bmMgPSByZWFscGF0aFN5bmNcbnJlYWxwYXRoLm1vbmtleXBhdGNoID0gbW9ua2V5cGF0Y2hcbnJlYWxwYXRoLnVubW9ua2V5cGF0Y2ggPSB1bm1vbmtleXBhdGNoXG5cbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJylcbnZhciBvcmlnUmVhbHBhdGggPSBmcy5yZWFscGF0aFxudmFyIG9yaWdSZWFscGF0aFN5bmMgPSBmcy5yZWFscGF0aFN5bmNcblxudmFyIHZlcnNpb24gPSBwcm9jZXNzLnZlcnNpb25cbnZhciBvayA9IC9edlswLTVdXFwuLy50ZXN0KHZlcnNpb24pXG52YXIgb2xkID0gcmVxdWlyZSgnLi9vbGQuanMnKVxuXG5mdW5jdGlvbiBuZXdFcnJvciAoZXIpIHtcbiAgcmV0dXJuIGVyICYmIGVyLnN5c2NhbGwgPT09ICdyZWFscGF0aCcgJiYgKFxuICAgIGVyLmNvZGUgPT09ICdFTE9PUCcgfHxcbiAgICBlci5jb2RlID09PSAnRU5PTUVNJyB8fFxuICAgIGVyLmNvZGUgPT09ICdFTkFNRVRPT0xPTkcnXG4gIClcbn1cblxuZnVuY3Rpb24gcmVhbHBhdGggKHAsIGNhY2hlLCBjYikge1xuICBpZiAob2spIHtcbiAgICByZXR1cm4gb3JpZ1JlYWxwYXRoKHAsIGNhY2hlLCBjYilcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2FjaGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGNhY2hlXG4gICAgY2FjaGUgPSBudWxsXG4gIH1cbiAgb3JpZ1JlYWxwYXRoKHAsIGNhY2hlLCBmdW5jdGlvbiAoZXIsIHJlc3VsdCkge1xuICAgIGlmIChuZXdFcnJvcihlcikpIHtcbiAgICAgIG9sZC5yZWFscGF0aChwLCBjYWNoZSwgY2IpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNiKGVyLCByZXN1bHQpXG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiByZWFscGF0aFN5bmMgKHAsIGNhY2hlKSB7XG4gIGlmIChvaykge1xuICAgIHJldHVybiBvcmlnUmVhbHBhdGhTeW5jKHAsIGNhY2hlKVxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gb3JpZ1JlYWxwYXRoU3luYyhwLCBjYWNoZSlcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICBpZiAobmV3RXJyb3IoZXIpKSB7XG4gICAgICByZXR1cm4gb2xkLnJlYWxwYXRoU3luYyhwLCBjYWNoZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbW9ua2V5cGF0Y2ggKCkge1xuICBmcy5yZWFscGF0aCA9IHJlYWxwYXRoXG4gIGZzLnJlYWxwYXRoU3luYyA9IHJlYWxwYXRoU3luY1xufVxuXG5mdW5jdGlvbiB1bm1vbmtleXBhdGNoICgpIHtcbiAgZnMucmVhbHBhdGggPSBvcmlnUmVhbHBhdGhcbiAgZnMucmVhbHBhdGhTeW5jID0gb3JpZ1JlYWxwYXRoU3luY1xufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZWFscGF0aCIsInN5bmMiLCJyZWFscGF0aFN5bmMiLCJtb25rZXlwYXRjaCIsInVubW9ua2V5cGF0Y2giLCJmcyIsInJlcXVpcmUiLCJvcmlnUmVhbHBhdGgiLCJvcmlnUmVhbHBhdGhTeW5jIiwidmVyc2lvbiIsInByb2Nlc3MiLCJvayIsInRlc3QiLCJvbGQiLCJuZXdFcnJvciIsImVyIiwic3lzY2FsbCIsImNvZGUiLCJwIiwiY2FjaGUiLCJjYiIsInJlc3VsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fs.realpath/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fs.realpath/old.js":
/*!*****************************************!*\
  !*** ./node_modules/fs.realpath/old.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar pathModule = __webpack_require__(/*! path */ \"path\");\nvar isWindows = process.platform === \"win32\";\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n// JavaScript implementation of realpath, ported from node pre-v6\nvar DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);\nfunction rethrow() {\n    // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and\n    // is fairly slow to generate.\n    var callback;\n    if (DEBUG) {\n        var backtrace = new Error;\n        callback = debugCallback;\n    } else callback = missingCallback;\n    return callback;\n    function debugCallback(err) {\n        if (err) {\n            backtrace.message = err.message;\n            err = backtrace;\n            missingCallback(err);\n        }\n    }\n    function missingCallback(err) {\n        if (err) {\n            if (process.throwDeprecation) throw err; // Forgot a callback but don't know where? Use NODE_DEBUG=fs\n            else if (!process.noDeprecation) {\n                var msg = \"fs: missing callback \" + (err.stack || err.message);\n                if (process.traceDeprecation) console.trace(msg);\n                else console.error(msg);\n            }\n        }\n    }\n}\nfunction maybeCallback(cb) {\n    return typeof cb === \"function\" ? cb : rethrow();\n}\nvar normalize = pathModule.normalize;\n// Regexp that finds the next partion of a (partial) path\n// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']\nif (isWindows) {\n    var nextPartRe = /(.*?)(?:[\\/\\\\]+|$)/g;\n} else {\n    var nextPartRe = /(.*?)(?:[\\/]+|$)/g;\n}\n// Regex to find the device root, including trailing slash. E.g. 'c:\\\\'.\nif (isWindows) {\n    var splitRootRe = /^(?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?[\\\\\\/]*/;\n} else {\n    var splitRootRe = /^[\\/]*/;\n}\nexports.realpathSync = function realpathSync(p, cache) {\n    // make p is absolute\n    p = pathModule.resolve(p);\n    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n        return cache[p];\n    }\n    var original = p, seenLinks = {}, knownHard = {};\n    // current character position in p\n    var pos;\n    // the partial path so far, including a trailing slash if any\n    var current;\n    // the partial path without a trailing slash (except when pointing at a root)\n    var base;\n    // the partial path scanned in the previous round, with slash\n    var previous;\n    start();\n    function start() {\n        // Skip over roots\n        var m = splitRootRe.exec(p);\n        pos = m[0].length;\n        current = m[0];\n        base = m[0];\n        previous = \"\";\n        // On windows, check that the root exists. On unix there is no need.\n        if (isWindows && !knownHard[base]) {\n            fs.lstatSync(base);\n            knownHard[base] = true;\n        }\n    }\n    // walk down the path, swapping out linked pathparts for their real\n    // values\n    // NB: p.length changes.\n    while(pos < p.length){\n        // find the next part\n        nextPartRe.lastIndex = pos;\n        var result = nextPartRe.exec(p);\n        previous = current;\n        current += result[0];\n        base = previous + result[1];\n        pos = nextPartRe.lastIndex;\n        // continue if not a symlink\n        if (knownHard[base] || cache && cache[base] === base) {\n            continue;\n        }\n        var resolvedLink;\n        if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n            // some known symbolic link.  no need to stat again.\n            resolvedLink = cache[base];\n        } else {\n            var stat = fs.lstatSync(base);\n            if (!stat.isSymbolicLink()) {\n                knownHard[base] = true;\n                if (cache) cache[base] = base;\n                continue;\n            }\n            // read the link if it wasn't read before\n            // dev/ino always return 0 on windows, so skip the check.\n            var linkTarget = null;\n            if (!isWindows) {\n                var id = stat.dev.toString(32) + \":\" + stat.ino.toString(32);\n                if (seenLinks.hasOwnProperty(id)) {\n                    linkTarget = seenLinks[id];\n                }\n            }\n            if (linkTarget === null) {\n                fs.statSync(base);\n                linkTarget = fs.readlinkSync(base);\n            }\n            resolvedLink = pathModule.resolve(previous, linkTarget);\n            // track this, if given a cache.\n            if (cache) cache[base] = resolvedLink;\n            if (!isWindows) seenLinks[id] = linkTarget;\n        }\n        // resolve the link, then start over\n        p = pathModule.resolve(resolvedLink, p.slice(pos));\n        start();\n    }\n    if (cache) cache[original] = p;\n    return p;\n};\nexports.realpath = function realpath(p, cache, cb) {\n    if (typeof cb !== \"function\") {\n        cb = maybeCallback(cache);\n        cache = null;\n    }\n    // make p is absolute\n    p = pathModule.resolve(p);\n    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n        return process.nextTick(cb.bind(null, null, cache[p]));\n    }\n    var original = p, seenLinks = {}, knownHard = {};\n    // current character position in p\n    var pos;\n    // the partial path so far, including a trailing slash if any\n    var current;\n    // the partial path without a trailing slash (except when pointing at a root)\n    var base;\n    // the partial path scanned in the previous round, with slash\n    var previous;\n    start();\n    function start() {\n        // Skip over roots\n        var m = splitRootRe.exec(p);\n        pos = m[0].length;\n        current = m[0];\n        base = m[0];\n        previous = \"\";\n        // On windows, check that the root exists. On unix there is no need.\n        if (isWindows && !knownHard[base]) {\n            fs.lstat(base, function(err) {\n                if (err) return cb(err);\n                knownHard[base] = true;\n                LOOP();\n            });\n        } else {\n            process.nextTick(LOOP);\n        }\n    }\n    // walk down the path, swapping out linked pathparts for their real\n    // values\n    function LOOP() {\n        // stop if scanned past end of path\n        if (pos >= p.length) {\n            if (cache) cache[original] = p;\n            return cb(null, p);\n        }\n        // find the next part\n        nextPartRe.lastIndex = pos;\n        var result = nextPartRe.exec(p);\n        previous = current;\n        current += result[0];\n        base = previous + result[1];\n        pos = nextPartRe.lastIndex;\n        // continue if not a symlink\n        if (knownHard[base] || cache && cache[base] === base) {\n            return process.nextTick(LOOP);\n        }\n        if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n            // known symbolic link.  no need to stat again.\n            return gotResolvedLink(cache[base]);\n        }\n        return fs.lstat(base, gotStat);\n    }\n    function gotStat(err, stat) {\n        if (err) return cb(err);\n        // if not a symlink, skip to the next path part\n        if (!stat.isSymbolicLink()) {\n            knownHard[base] = true;\n            if (cache) cache[base] = base;\n            return process.nextTick(LOOP);\n        }\n        // stat & read the link if not read before\n        // call gotTarget as soon as the link target is known\n        // dev/ino always return 0 on windows, so skip the check.\n        if (!isWindows) {\n            var id = stat.dev.toString(32) + \":\" + stat.ino.toString(32);\n            if (seenLinks.hasOwnProperty(id)) {\n                return gotTarget(null, seenLinks[id], base);\n            }\n        }\n        fs.stat(base, function(err) {\n            if (err) return cb(err);\n            fs.readlink(base, function(err, target) {\n                if (!isWindows) seenLinks[id] = target;\n                gotTarget(err, target);\n            });\n        });\n    }\n    function gotTarget(err, target, base) {\n        if (err) return cb(err);\n        var resolvedLink = pathModule.resolve(previous, target);\n        if (cache) cache[base] = resolvedLink;\n        gotResolvedLink(resolvedLink);\n    }\n    function gotResolvedLink(resolvedLink) {\n        // resolve the link, then start over\n        p = pathModule.resolve(resolvedLink, p.slice(pos));\n        start();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fs.realpath/old.js\n");

/***/ })

};
;